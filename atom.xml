<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>何小智の博客</title>
  
  <subtitle>好记性不如烂笔头</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-27T03:02:03.806Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>RenKe XZ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode332、重新安排行程</title>
    <link href="http://yoursite.com/2020/08/27/LeetCode332/"/>
    <id>http://yoursite.com/2020/08/27/LeetCode332/</id>
    <published>2020-08-27T02:13:22.157Z</published>
    <updated>2020-08-27T03:02:03.806Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>想把自己刷题过程中一些，使用经典方法、思想的题记录下来。</p></blockquote><a id="more"></a><h2 id="LeetCode332、重新安排行程"><a href="#LeetCode332、重新安排行程" class="headerlink" title="LeetCode332、重新安排行程"></a>LeetCode332、重新安排行程</h2><p><strong>题目地址：</strong></p><p><a href="https://leetcode-cn.com/problems/reconstruct-itinerary/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reconstruct-itinerary/</a></p><p><strong>错误思想：</strong></p><p>首先将列表转换为字典，在插入过程中将字典中的value排序。（这一步思想是对的）</p><p>然后从”JFK”开始遍历，每次取<code>dict[&quot;x&quot;][0]</code>保证字典序。</p><p><strong>错误原因：</strong></p><p><code>[[&quot;JFK&quot;,&quot;KUL&quot;],[&quot;JFK&quot;,&quot;NRT&quot;],[&quot;NRT&quot;,&quot;JFK&quot;]]</code></p><p>NRT节点会访问不到</p><h3 id="错误解法："><a href="#错误解法：" class="headerlink" title="错误解法："></a>错误解法：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findItinerary</span><span class="params">(self, tickets: List[List[str]])</span> -&gt; List[str]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> tickets:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#构建location字典</span></span><br><span class="line">        location = collections.defaultdict(list)</span><br><span class="line">        <span class="keyword">for</span> ticket <span class="keyword">in</span> tickets:</span><br><span class="line">            <span class="keyword">if</span> len(location[ticket[<span class="number">0</span>]])!=<span class="number">0</span>:</span><br><span class="line">                i = <span class="number">0</span></span><br><span class="line">                <span class="keyword">while</span> i&lt;len(location[ticket[<span class="number">0</span>]]):</span><br><span class="line">                    <span class="keyword">if</span> location[ticket[<span class="number">0</span>]][i] &gt; ticket[<span class="number">1</span>]:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    i += <span class="number">1</span></span><br><span class="line">                location[ticket[<span class="number">0</span>]].insert(i,ticket[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                location[ticket[<span class="number">0</span>]].append(ticket[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">        <span class="comment">#遍历</span></span><br><span class="line">        res = [<span class="string">"JFK"</span>]</span><br><span class="line">        res.append(location[<span class="string">"JFK"</span>][<span class="number">0</span>])</span><br><span class="line">        location[<span class="string">"JFK"</span>].pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(tickets)<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> len(location[res[<span class="number">-1</span>]]) !=<span class="number">0</span>:</span><br><span class="line">                res.append(location[res[<span class="number">-1</span>]][<span class="number">0</span>])</span><br><span class="line">                location[res[<span class="number">-2</span>]].pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p><strong>正确思想：</strong></p><ul><li>欧拉通路：通过图中所有边恰好一次且行遍所有顶点的通路称为欧拉通路。</li><li>欧拉回路：通过图中所有边恰好一次且行遍所有顶点的回路称为欧拉回路。</li><li>欧拉图：具有欧拉回路的无向图称为欧拉图。</li><li>半欧拉图：具有欧拉通路但不具有欧拉回路的无向图称为半欧拉图。</li></ul><p><strong>当我们贪心地选择字典序最小的节点前进时，我们可能先走入「死胡同」，从而导致无法遍历到其他还未访问的边。于是我们希望能够遍历完当前节点所连接的其他节点后再进入「死胡同」。</strong></p><h3 id="正确解法："><a href="#正确解法：" class="headerlink" title="正确解法："></a>正确解法：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findItinerary</span><span class="params">(self, tickets: List[List[str]])</span> -&gt; List[str]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> tickets:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        <span class="comment">#利用小根堆排序</span></span><br><span class="line">        vec = collections.defaultdict(list)</span><br><span class="line">        <span class="keyword">for</span> fr,to <span class="keyword">in</span> tickets:</span><br><span class="line">            vec[fr].append(to)</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> vec.keys():</span><br><span class="line">            heapq.heapify(vec[key])</span><br><span class="line">        print(vec)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#节点会倒序入栈</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(curr)</span>:</span></span><br><span class="line">            <span class="keyword">while</span> vec[curr]:</span><br><span class="line">                tem = heapq.heappop(vec[curr])</span><br><span class="line">                dfs(tem)</span><br><span class="line">            stack.append(curr)</span><br><span class="line">        </span><br><span class="line">        stack = []</span><br><span class="line">        dfs(<span class="string">"JFK"</span>)</span><br><span class="line">        <span class="keyword">return</span> stack[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;想把自己刷题过程中一些，使用经典方法、思想的题记录下来。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="欧拉回路" scheme="http://yoursite.com/tags/%E6%AC%A7%E6%8B%89%E5%9B%9E%E8%B7%AF/"/>
    
      <category term="欧拉通路" scheme="http://yoursite.com/tags/%E6%AC%A7%E6%8B%89%E9%80%9A%E8%B7%AF/"/>
    
      <category term="Hierholzer算法" scheme="http://yoursite.com/tags/Hierholzer%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode459、重复的字符串</title>
    <link href="http://yoursite.com/2020/08/24/LeetCode459/"/>
    <id>http://yoursite.com/2020/08/24/LeetCode459/</id>
    <published>2020-08-24T07:46:26.333Z</published>
    <updated>2020-08-24T07:51:48.596Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>想把自己刷题过程中一些，使用经典方法、思想的题记录下来。</p></blockquote><a id="more"></a><h2 id="LeetCode459、重复的字符串"><a href="#LeetCode459、重复的字符串" class="headerlink" title="LeetCode459、重复的字符串"></a>LeetCode459、重复的字符串</h2><p><strong>题目地址：</strong></p><p><a href="https://leetcode-cn.com/problems/repeated-substring-pattern/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/repeated-substring-pattern/</a></p><p>重复的字符串需要满足四个条件：</p><ul><li>总串长度是子串长度的n倍，即总串长度能够整除子串长度</li><li>子串是总串的前缀</li><li>s[子串长度]=s[0],s[子串长度+1]=s[1]……</li><li>子串长度小于等于总串长度的一半</li></ul><h3 id="解法："><a href="#解法：" class="headerlink" title="解法："></a>解法：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">repeatedSubstringPattern</span><span class="params">(self, s: str)</span> -&gt; bool:</span></span><br><span class="line">        sLen = len(s) </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,sLen//<span class="number">2</span>+<span class="number">1</span>):</span><br><span class="line">            match = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> sLen % i == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(i,sLen):</span><br><span class="line">                    <span class="keyword">if</span> s[j]!=s[j-i]:</span><br><span class="line">                        match = <span class="literal">False</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">if</span> match:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;想把自己刷题过程中一些，使用经典方法、思想的题记录下来。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="字符串" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode529、扫雷游戏</title>
    <link href="http://yoursite.com/2020/08/20/LeetCode529/"/>
    <id>http://yoursite.com/2020/08/20/LeetCode529/</id>
    <published>2020-08-20T04:04:30.836Z</published>
    <updated>2020-08-20T04:22:55.356Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>想把自己刷题过程中一些，使用经典方法、思想的题记录下来。</p></blockquote><a id="more"></a><h2 id="LeetCode529、扫雷游戏"><a href="#LeetCode529、扫雷游戏" class="headerlink" title="LeetCode529、扫雷游戏"></a>LeetCode529、扫雷游戏</h2><p><strong>题目地址：</strong></p><p><a href="https://leetcode-cn.com/problems/minesweeper/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minesweeper/</a></p><ul><li><p>“M”表示地雷。</p></li><li><p>“E”表示未挖出的空方块</p></li><li><p>“B”表示已经挖出来的空方块，且周围8个方块不存在地雷</p></li><li><p>“数字1-8”表示放个周围有多少个地雷</p></li></ul><h3 id="解法1：dfs"><a href="#解法1：dfs" class="headerlink" title="解法1：dfs"></a>解法1：dfs</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">updateBoard</span><span class="params">(self, board: List[List[str]], click: List[int])</span> -&gt; List[List[str]]:</span></span><br><span class="line">        array1 = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>]</span><br><span class="line">        array2 = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">        m = len(board)</span><br><span class="line">        n = len(board[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># print(m,n)</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(x,y)</span>:</span></span><br><span class="line">            num = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">                newX = x + array1[i]</span><br><span class="line">                newY = y + array2[i]</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">0</span>&lt;=newX&lt;m <span class="keyword">and</span> <span class="number">0</span>&lt;=newY&lt;n) <span class="keyword">or</span> board[newX][newY]==<span class="string">'B'</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> board[newX][newY] == <span class="string">'M'</span>:</span><br><span class="line">                    num += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> num&gt;<span class="number">0</span>:</span><br><span class="line">                board[x][y] = str(num)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                board[x][y] = <span class="string">'B'</span></span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">                    newX1 = x + array1[j]</span><br><span class="line">                    newY2 = y + array2[j]</span><br><span class="line">                    <span class="comment"># print(newX1,newY2)</span></span><br><span class="line">                    <span class="comment"># print(not 0&lt;=newX1&lt;m or not 0&lt;=newY2&lt;n)</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span>(<span class="number">0</span>&lt;=newX1&lt;m <span class="keyword">and</span> <span class="number">0</span>&lt;=newY2&lt;n) <span class="keyword">or</span> board[newX1][newY2]!=<span class="string">'E'</span>:</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    dfs(newX1,newY2)</span><br><span class="line">        <span class="keyword">if</span> board[click[<span class="number">0</span>]][click[<span class="number">1</span>]]==<span class="string">'M'</span>:</span><br><span class="line">            board[click[<span class="number">0</span>]][click[<span class="number">1</span>]] = <span class="string">'X'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            dfs(click[<span class="number">0</span>],click[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> board</span><br></pre></td></tr></table></figure><h3 id="解法2：bfs"><a href="#解法2：bfs" class="headerlink" title="解法2：bfs"></a>解法2：bfs</h3><p><strong>注意：</strong>一定要有visit数组，如果没有的话，可能会加入重复节点进入队列中。</p><p>下图中绿色边框，橙色填充的节点为重复入队的节点。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/08/20/GjrsI39U7deKXa6.png" alt="示例图" title="">                </div>                <div class="image-caption">示例图</div>            </figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">array1 = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>]</span><br><span class="line">        array2 = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">        m = len(board)</span><br><span class="line">        n = len(board[<span class="number">0</span>])</span><br><span class="line">        queue = collections.deque()</span><br><span class="line">        queue.append(click)</span><br><span class="line">        visit = [[<span class="literal">False</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(m)]</span><br><span class="line">        visit[click[<span class="number">0</span>]][click[<span class="number">1</span>]] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">bfs</span><span class="params">()</span>:</span></span><br><span class="line">            <span class="keyword">while</span> queue:</span><br><span class="line">                node = queue.popleft()</span><br><span class="line">                x = node[<span class="number">0</span>]</span><br><span class="line">                y = node[<span class="number">1</span>]</span><br><span class="line">                num = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">                    newX = x + array1[i]</span><br><span class="line">                    newY = y + array2[i]</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">0</span>&lt;=newX&lt;m <span class="keyword">and</span> <span class="number">0</span>&lt;=newY&lt;n):</span><br><span class="line">                        <span class="keyword">continue</span></span><br><span class="line">                    <span class="keyword">if</span> board[newX][newY] == <span class="string">'M'</span>:</span><br><span class="line">                        num += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> num&gt;<span class="number">0</span>:</span><br><span class="line">                    board[x][y] = str(num)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    board[x][y]=<span class="string">'B'</span></span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">8</span>):</span><br><span class="line">                        newX1 = x + array1[j]</span><br><span class="line">                        newY2 = y + array2[j]</span><br><span class="line">                        <span class="comment"># print(newX1,newY2)</span></span><br><span class="line">                        <span class="comment"># print(not 0&lt;=newX1&lt;m or not 0&lt;=newY2&lt;n)</span></span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">not</span>(<span class="number">0</span>&lt;=newX1&lt;m <span class="keyword">and</span> <span class="number">0</span>&lt;=newY2&lt;n) <span class="keyword">or</span> board[newX1][newY2]!=<span class="string">'E'</span> <span class="keyword">or</span> visit[newX1][newY2]==<span class="literal">True</span>:</span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        queue.append([newX1,newY2])</span><br><span class="line">                        visit[newX1][newY2] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> board[click[<span class="number">0</span>]][click[<span class="number">1</span>]]==<span class="string">'M'</span>:</span><br><span class="line">            board[click[<span class="number">0</span>]][click[<span class="number">1</span>]] = <span class="string">'X'</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            bfs()</span><br><span class="line">        <span class="keyword">return</span> board</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;想把自己刷题过程中一些，使用经典方法、思想的题记录下来。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="bfs" scheme="http://yoursite.com/tags/bfs/"/>
    
      <category term="dfs" scheme="http://yoursite.com/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode647、回文子串</title>
    <link href="http://yoursite.com/2020/08/19/LeetCode647/"/>
    <id>http://yoursite.com/2020/08/19/LeetCode647/</id>
    <published>2020-08-19T08:27:49.587Z</published>
    <updated>2020-08-19T09:05:23.800Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>想把自己刷题过程中一些，使用经典方法、思想的题记录下来。</p></blockquote><a id="more"></a><h2 id="LeetCode647、回文子串"><a href="#LeetCode647、回文子串" class="headerlink" title="LeetCode647、回文子串"></a>LeetCode647、回文子串</h2><p><strong>题目地址：</strong></p><p><a href="https://leetcode-cn.com/problems/palindromic-substrings/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/palindromic-substrings/</a></p><p>给定一个字符串，你的任务是计算这个字符串中有多少个回文子串。</p><p>具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被视作不同的子串。</p><h3 id="解法1：暴力"><a href="#解法1：暴力" class="headerlink" title="解法1：暴力"></a>解法1：暴力</h3><p>思想：每个位置都以它为中心求回文。</p><p><strong>奇数回文</strong>的解决方法：<code>x==y</code></p><p><strong>偶数回文</strong>的解决方法：<code>y = x + i % 2</code></p><p>遍历范围：<code>2*size-1</code></p><table><thead><tr><th>编号i</th><th>回文中心左起始位置x</th><th>回文中心右起始位置y</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>2</td><td>1</td><td>1</td></tr><tr><td>3</td><td>1</td><td>2</td></tr><tr><td>4</td><td>2</td><td>2</td></tr><tr><td>5</td><td>2</td><td>3</td></tr><tr><td>6</td><td>3</td><td>3</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countSubstrings</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        size = len(s)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>*size<span class="number">-1</span>):</span><br><span class="line">            x = i//<span class="number">2</span></span><br><span class="line">            y = x + i % <span class="number">2</span></span><br><span class="line">            <span class="keyword">while</span> x&gt;=<span class="number">0</span> <span class="keyword">and</span> y&lt;size <span class="keyword">and</span> s[x] == s[y]:</span><br><span class="line">                x-=<span class="number">1</span></span><br><span class="line">                y+=<span class="number">1</span></span><br><span class="line">                result += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="解法2：manache"><a href="#解法2：manache" class="headerlink" title="解法2：manache"></a>解法2：manache</h3><p>manache算法详解：<a href="https://ethsonliu.com/2018/04/manacher.html" target="_blank" rel="noopener">https://ethsonliu.com/2018/04/manacher.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countSubstrings</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        node = <span class="string">"#"</span></span><br><span class="line">        s = node.join(s)</span><br><span class="line">        s = <span class="string">"$#"</span> + s + <span class="string">"#!"</span></span><br><span class="line">        print(s)</span><br><span class="line"></span><br><span class="line">        n = len(s)</span><br><span class="line">        f = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line">        iMax = rMax = ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n<span class="number">-1</span>):</span><br><span class="line">            f[i] = <span class="number">1</span> <span class="keyword">if</span> i&gt;rMax <span class="keyword">else</span> min(rMax-i+<span class="number">1</span>,f[<span class="number">2</span> * iMax - i])</span><br><span class="line">            <span class="keyword">while</span> s[i+f[i]]==s[i-f[i]]:</span><br><span class="line">                f[i]+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> i+f[i]<span class="number">-1</span>&gt;rMax:</span><br><span class="line">                iMax = i</span><br><span class="line">                rMax = i + f[i] <span class="number">-1</span></span><br><span class="line">            ans += (f[i]//<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;想把自己刷题过程中一些，使用经典方法、思想的题记录下来。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="暴力" scheme="http://yoursite.com/tags/%E6%9A%B4%E5%8A%9B/"/>
    
      <category term="manacher" scheme="http://yoursite.com/tags/manacher/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode108and109、有序结构构建平衡二叉搜索树</title>
    <link href="http://yoursite.com/2020/08/18/LeetCode108and109/"/>
    <id>http://yoursite.com/2020/08/18/LeetCode108and109/</id>
    <published>2020-08-18T04:56:29.028Z</published>
    <updated>2020-08-18T05:10:37.727Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>想把自己刷题过程中一些，使用经典方法、思想的题记录下来。</p></blockquote><a id="more"></a><h2 id="LeetCode108、将有序数组转换为平衡二叉搜索树"><a href="#LeetCode108、将有序数组转换为平衡二叉搜索树" class="headerlink" title="LeetCode108、将有序数组转换为平衡二叉搜索树"></a>LeetCode108、将有序数组转换为平衡二叉搜索树</h2><p><strong>题目地址：</strong></p><p><a href="https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/</a></p><p>取<code>mid=(left+right)//2</code>，(left,mid-1)构建左子树，(mid+1,right)构建右子树。</p><h3 id="解法：分治"><a href="#解法：分治" class="headerlink" title="解法：分治"></a>解法：分治</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortedArrayToBST</span><span class="params">(self, nums: List[int])</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">buildTree</span><span class="params">(left,right)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> left&gt;right:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            mid = (left+right)//<span class="number">2</span></span><br><span class="line">            root = TreeNode()</span><br><span class="line">            root.val = nums[mid]</span><br><span class="line">            root.left = buildTree(left,mid<span class="number">-1</span>)</span><br><span class="line">            root.right = buildTree(mid+<span class="number">1</span>,right)</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        <span class="keyword">return</span> buildTree(<span class="number">0</span>,len(nums)<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><h2 id="LeetCode109、将有序链表转换二叉搜索树"><a href="#LeetCode109、将有序链表转换二叉搜索树" class="headerlink" title="LeetCode109、将有序链表转换二叉搜索树"></a>LeetCode109、将有序链表转换二叉搜索树</h2><h3 id="解法1：分治"><a href="#解法1：分治" class="headerlink" title="解法1：分治"></a>解法1：分治</h3><p>每次遍历列表找到mid节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortedListToBST</span><span class="params">(self, head: ListNode)</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">findMid</span><span class="params">(left,right)</span>:</span></span><br><span class="line">            slow = left</span><br><span class="line">            fast = left</span><br><span class="line">            <span class="keyword">while</span> fast != right <span class="keyword">and</span> fast.next != right:</span><br><span class="line">                slow = slow.next</span><br><span class="line">                fast = fast.next.next</span><br><span class="line">            <span class="keyword">return</span> slow</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">buildTree</span><span class="params">(left,right)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> left == right:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            mid = findMid(left,right)</span><br><span class="line">            root = TreeNode()</span><br><span class="line">            root.val = mid.val</span><br><span class="line">            root.left = buildTree(left,mid)</span><br><span class="line">            root.right = buildTree(mid.next,right)</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> buildTree(head,<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><h3 id="解法2：分治"><a href="#解法2：分治" class="headerlink" title="解法2：分治"></a>解法2：分治</h3><p>利用中序遍历，延迟填入节点中的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortedListToBST</span><span class="params">(self, head: ListNode)</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">getLength</span><span class="params">(head)</span>:</span></span><br><span class="line">            num = <span class="number">0</span></span><br><span class="line">            p = head</span><br><span class="line">            <span class="keyword">while</span> p:</span><br><span class="line">                num += <span class="number">1</span></span><br><span class="line">                p = p.next</span><br><span class="line">            <span class="keyword">return</span> num</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">buildTree</span><span class="params">(left,right)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> left&gt;right:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            mid = (left+right)//<span class="number">2</span></span><br><span class="line">            root = TreeNode()</span><br><span class="line">            root.left = buildTree(left,mid<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">nonlocal</span> head</span><br><span class="line">            root.val = head.val</span><br><span class="line">            head = head.next</span><br><span class="line">            root.right = buildTree(mid+<span class="number">1</span>,right)</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> buildTree(<span class="number">0</span>,getLength(head)<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;想把自己刷题过程中一些，使用经典方法、思想的题记录下来。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="分治" scheme="http://yoursite.com/tags/%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>基于以太坊私链的溯源Dapp</title>
    <link href="http://yoursite.com/2020/08/15/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%BA%AF%E6%BA%90Dapp/"/>
    <id>http://yoursite.com/2020/08/15/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%BA%AF%E6%BA%90Dapp/</id>
    <published>2020-08-15T09:58:10.027Z</published>
    <updated>2020-08-18T07:58:44.950Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>帮助老师撰写以太坊课程的实验指导书，因此需要设计一个基于以太坊私链的溯源Dapp项目。</p></blockquote><a id="more"></a><h1 id="基于以太坊私链的溯源Dapp"><a href="#基于以太坊私链的溯源Dapp" class="headerlink" title="基于以太坊私链的溯源Dapp"></a>基于以太坊私链的溯源Dapp</h1><p>项目源码：<a href="https://github.com/HeXueZhi/FoodTransportation" target="_blank" rel="noopener">https://github.com/HeXueZhi/FoodTransportation</a></p><p>实验环境：</p><ul><li>win10：用于创建Dapp</li><li>CentOS7：用于搭建私链</li></ul><h3 id="一、私链的创建"><a href="#一、私链的创建" class="headerlink" title="一、私链的创建"></a>一、私链的创建</h3><p>前面的文章有写如何搭建私链。</p><p><a href="https://hexuezhi.github.io/2020/04/30/以太坊搭建私链/" target="_blank" rel="noopener">以太坊搭建私链</a></p><h3 id="二、以太坊Dapp的创建"><a href="#二、以太坊Dapp的创建" class="headerlink" title="二、以太坊Dapp的创建"></a>二、以太坊Dapp的创建</h3><p>Dapp整体基于truffle，前端采用webpack打包。</p><h4 id="2-1-编写合约"><a href="#2-1-编写合约" class="headerlink" title="2.1 编写合约"></a>2.1 编写合约</h4><p>合约编写以及编译采用<a href="http://remix.ethereum.org/" target="_blank" rel="noopener">remix</a>（需要较好的网络环境），推荐使用老版本界面。<a href="https://hexuezhi.github.io/2020/04/30/水龙头合约/" target="_blank" rel="noopener">remix入门</a></p><p>合约代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;&#x3D;0.4.22 &lt;0.7.0;</span><br><span class="line"></span><br><span class="line">contract FoodTransportation&#123;</span><br><span class="line">    struct Location&#123;</span><br><span class="line">        string locationName;</span><br><span class="line">        string transPerson;</span><br><span class="line">        uint timeStamp;</span><br><span class="line">    &#125;</span><br><span class="line">    string foodName;</span><br><span class="line"></span><br><span class="line">    mapping (uint &#x3D;&gt; Location) trail;</span><br><span class="line">    uint8 locationNum;</span><br><span class="line"></span><br><span class="line">    function addNewLocation(string memory food,string memory locationName,string memory transPerson)public&#123;</span><br><span class="line">        if(bytes(foodName).length &#x3D;&#x3D; 0)&#123;</span><br><span class="line">            foodName &#x3D; food;</span><br><span class="line">        &#125;</span><br><span class="line">        Location memory newLocation;</span><br><span class="line">        newLocation.locationName &#x3D; locationName;</span><br><span class="line">        newLocation.transPerson &#x3D; transPerson;</span><br><span class="line">        newLocation.timeStamp &#x3D; now;</span><br><span class="line">        trail[locationNum] &#x3D; newLocation;</span><br><span class="line">        locationNum++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getLocationNum() public view returns(uint8)&#123;</span><br><span class="line">        return locationNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getFoodName() public view returns(string memory)&#123;</span><br><span class="line">        return foodName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getLocation(uint8 locationNo) public view returns(string memory,string memory,uint)&#123;</span><br><span class="line">        return (trail[locationNo].locationName,trail[locationNo].transPerson,trail[locationNo].timeStamp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一步需要完成合约的编译和测试。</p><h4 id="2-2-环境准备"><a href="#2-2-环境准备" class="headerlink" title="2.2 环境准备"></a>2.2 环境准备</h4><p>win10系统中，安装node、truffle、ganache-cli。</p><p>执行<code>truffle version</code>查看版本。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/08/15/9PmGtVHWqx5iZhc.png" alt="truffle version" title="">                </div>                <div class="image-caption">truffle version</div>            </figure><p>尤其需要注意solidity和web3的版本。版本不同语法支持也不同，所以安装时，尽量选择于上图中相差不多的版本。</p><h4 id="2-3-truffle-webpack创建项目"><a href="#2-3-truffle-webpack创建项目" class="headerlink" title="2.3 truffle+webpack创建项目"></a>2.3 truffle+webpack创建项目</h4><ol><li><p>新建Dapp/FoodTransportation文件夹</p></li><li><p>文件夹下执行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truffle unbox webpack</span><br></pre></td></tr></table></figure><p>此命令会下载truffle提供的官方示例，下载时间可能会有点长，耐心等待。下载完成后的提示以及目录结构如下图所示。</p><p><img src="https://i.loli.net/2020/08/15/YLxKbDhaNI4SeC5.png" alt="download truffle-webpack"></p><p>此示例项目的运行启动：留个坑。</p></li><li><p>修改<code>truffle-config.js</code>为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'babel-register'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  networks: &#123;</span><br><span class="line">    development: &#123;</span><br><span class="line">      host: <span class="string">'localhost'</span>,</span><br><span class="line">      port: <span class="number">8545</span>,</span><br><span class="line">      network_id: <span class="string">'*'</span> <span class="comment">// Match any network id</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本文件夹下的powershell中执行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel<span class="literal">-register</span></span><br></pre></td></tr></table></figure></li><li><p>删除contracts文件夹中的<code>ConvertLib.sol</code>和<code>MetaCoin.sol</code>文件，创建<code>FoodTransportation.sol</code>合约文件，复制刚才编写的合约代码。</p></li><li><p>修改migrations文件夹中的<code>2_deploy_contracts.js</code>文件。</p><p><strong>注意：</strong>这里直接删除这个文件也无妨，因为本项目使用web3来部署合约，不需要使用<code>truffle migrate</code>命令帮助部署合约。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> FoodTransportation = artifacts.require(<span class="string">"./FoodTransportation"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">deployer</span>) </span>&#123;</span><br><span class="line">  deployer.deploy(FoodTransportation);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>powershell中执行<code>truffle compile</code>命令。truffle中自带的solc-js会对合约进行编译。在Dapp文件夹下会出现build文件夹，存放编译形成的json文件。</p></li><li><p>在Dapp的app文件夹下粘贴写好的html文件，src目录下粘贴需要的js文件和css文件。</p></li><li><p>修改webpack-config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/app.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">    filename: <span class="string">'app.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mode : <span class="string">'development'</span>,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// Copy our app's index.html to the build folder.</span></span><br><span class="line">    <span class="keyword">new</span> CopyWebpackPlugin([</span><br><span class="line">      &#123; <span class="attr">from</span>: <span class="string">'./index.html'</span>, <span class="attr">to</span>: <span class="string">"index.html"</span> &#125;</span><br><span class="line">    ])</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [ <span class="string">'style-loader'</span>, <span class="string">'css-loader'</span> ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.json$/</span>, <span class="attr">exclude</span>: <span class="regexp">/(node_modules|bower_components)/</span>, <span class="attr">use</span>: <span class="string">'json-loader'</span> &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        query: &#123;</span><br><span class="line">          presets: [<span class="string">'es2015'</span>],</span><br><span class="line">          plugins: [<span class="string">'transform-runtime'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在app目录下执行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm install web3@<span class="number">0.18</span>.<span class="number">4</span> -<span class="literal">-save</span><span class="literal">-dev</span></span><br><span class="line">npm install webpack -<span class="literal">-save</span><span class="literal">-dev</span></span><br><span class="line">npm install style<span class="literal">-loader</span> css<span class="literal">-loader</span> json<span class="literal">-loader</span> -<span class="literal">-save</span><span class="literal">-dev</span></span><br><span class="line">npm install <span class="literal">-D</span> babel<span class="literal">-loader</span>@<span class="number">7</span> babel<span class="literal">-core</span> babel<span class="literal">-preset</span><span class="literal">-env</span> -<span class="literal">-save</span><span class="literal">-dev</span></span><br><span class="line">npm install babel<span class="literal">-preset</span><span class="literal">-es2015</span> -<span class="literal">-save</span><span class="literal">-dev</span></span><br><span class="line">npm install babel<span class="literal">-plugin</span><span class="literal">-transform</span><span class="literal">-runtime</span> -<span class="literal">-save</span><span class="literal">-dev</span></span><br><span class="line">npm run build</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure></li><li><p>进入<code>http://localhost:8080</code>查看界面。注意：现在如果没有启动私链，页面由于没有获取到账户，会发出警告，启动私链，连接metamask刷新即可。</p></li></ol><h3 id="三、合约部署"><a href="#三、合约部署" class="headerlink" title="三、合约部署"></a>三、合约部署</h3><h4 id="3-1-win10本地ganache测试"><a href="#3-1-win10本地ganache测试" class="headerlink" title="3.1 win10本地ganache测试"></a>3.1 win10本地ganache测试</h4><ol><li><p>安装<code>ganache-cli</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> ganache<span class="literal">-cli</span></span><br></pre></td></tr></table></figure></li><li><p>执行<code>ganache-cli</code></p><p><img src="https://i.loli.net/2020/08/15/Z76IToRKD3gm5AP.png" alt="ganache-cli"></p></li><li><p>在谷歌浏览器中安装metamask插件，安装好后，先在metamask右上角选择localhost:8545网络，然后选择助记词恢复钱包账户。</p></li><li><p>然后在<code>Dapp/app</code>执行<code>npm run dev</code>，打开浏览器的<code>http://localhost:8080/</code></p></li><li><p>按F12，查看console界面。</p></li><li><p>测试项目。</p></li></ol><h4 id="3-2-CentOS私链测试"><a href="#3-2-CentOS私链测试" class="headerlink" title="3.2 CentOS私链测试"></a>3.2 CentOS私链测试</h4><ol><li><p>开启私链，如无账户，先创建账户<code>personal.newAccount()</code>，输入密码。</p></li><li><p>开始挖矿。<code>miner.start(1)</code></p></li><li><p>查看账户余额<code>eth.getBalance(eth.accounts[0])</code>，为了保证能够发起合约部署等交易，需要一些ETH。</p></li><li><p>设置虚拟机防火墙，打开8545端口。<a href="https://hexuezhi.github.io/2020/06/26/CentOS7防火墙设置/" target="_blank" rel="noopener">CentOS设置防火墙</a></p></li><li><p>metamask连接CentOS的私链。需要新创建rpc网络。</p><ul><li>rpc地址：<code>http://192.168.2.151:8545</code>，ip填虚拟机ip就可以。</li><li>chainID：填入<code>genesis.json</code>中的chainid即可。</li></ul></li><li><p>切换至刚创建的网络，并导入账户。通过虚拟机私链文件夹下的keystore文件夹下的json文件导入到metamask即可。</p><p><img src="https://i.loli.net/2020/08/15/mAJSqV3L5Gxe9ZO.png" alt="image-20200815203841886"></p></li><li><p>导入账户之后刷新<code>http://localhost:8080</code>，再点击metamask，就能够连接刚刚导入的账户了。</p></li><li><p>测试项目。</p></li><li><p>测试完成后执行<code>miner.stop()</code>停止挖矿。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;帮助老师撰写以太坊课程的实验指导书，因此需要设计一个基于以太坊私链的溯源Dapp项目。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="以太坊" scheme="http://yoursite.com/categories/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
    
      <category term="以太坊" scheme="http://yoursite.com/tags/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
      <category term="Dapp" scheme="http://yoursite.com/tags/Dapp/"/>
    
      <category term="truffle" scheme="http://yoursite.com/tags/truffle/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode130、被围绕的区域</title>
    <link href="http://yoursite.com/2020/08/12/LeetCode130/"/>
    <id>http://yoursite.com/2020/08/12/LeetCode130/</id>
    <published>2020-08-12T00:34:28.892Z</published>
    <updated>2020-08-12T00:35:33.861Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>想把自己刷题过程中一些，使用经典方法、思想的题记录下来。</p></blockquote><a id="more"></a><h2 id="LeetCode130、被围绕的区域"><a href="#LeetCode130、被围绕的区域" class="headerlink" title="LeetCode130、被围绕的区域"></a>LeetCode130、被围绕的区域</h2><p><strong>题目地址：</strong></p><p><a href="https://leetcode-cn.com/problems/surrounded-regions/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/surrounded-regions/</a></p><p>被围绕的区间不会存在于边界上，换句话说，任何边界上的 ‘O’ 都不会被填充为 ‘X’。 任何不在边界上，或不与边界上的 ‘O’ 相连的 ‘O’ 最终都会被填充为 ‘X’。如果两个元素在水平或垂直方向相邻，则称它们是“相连”的。</p><p>因此可以遍历列表，将能够与边界上’O’相连的’O’标记出来，剩下的未被标记的’O’即为需要改变的。</p><h3 id="解法1：dfs"><a href="#解法1：dfs" class="headerlink" title="解法1：dfs"></a>解法1：dfs</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(self, board: List[List[str]])</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> board:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        m = len(board)</span><br><span class="line">        n = len(board[<span class="number">0</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(x,y)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="number">0</span>&lt;=x&lt;m <span class="keyword">or</span> <span class="keyword">not</span> <span class="number">0</span>&lt;=y&lt;n <span class="keyword">or</span> board[x][y] != <span class="string">"O"</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            board[x][y] = <span class="string">"A"</span></span><br><span class="line">            dfs(x+<span class="number">1</span>,y)</span><br><span class="line">            dfs(x<span class="number">-1</span>,y)</span><br><span class="line">            dfs(x,y+<span class="number">1</span>)</span><br><span class="line">            dfs(x,y<span class="number">-1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">            dfs(i,<span class="number">0</span>)</span><br><span class="line">            dfs(i,n<span class="number">-1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">            dfs(<span class="number">0</span>,j)</span><br><span class="line">            dfs(m<span class="number">-1</span>,j)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="keyword">if</span> board[i][j] == <span class="string">"A"</span>:</span><br><span class="line">                    board[i][j] = <span class="string">"O"</span></span><br><span class="line">                <span class="keyword">elif</span> board[i][j]==<span class="string">"O"</span>:</span><br><span class="line">                    board[i][j] = <span class="string">"X"</span></span><br></pre></td></tr></table></figure><h3 id="解法2：bfs"><a href="#解法2：bfs" class="headerlink" title="解法2：bfs"></a>解法2：bfs</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(self, board: List[List[str]])</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Do not return anything, modify board in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment">#BFS</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> board:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        m = len(board)</span><br><span class="line">        n = len(board[<span class="number">0</span>])</span><br><span class="line">        </span><br><span class="line">        queue = collections.deque()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="keyword">if</span> board[i][<span class="number">0</span>]==<span class="string">"O"</span>:</span><br><span class="line">                queue.append((i,<span class="number">0</span>))</span><br><span class="line">            <span class="keyword">if</span> board[i][n<span class="number">-1</span>]==<span class="string">"O"</span>:</span><br><span class="line">                queue.append((i,n<span class="number">-1</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="keyword">if</span> board[<span class="number">0</span>][j]==<span class="string">"O"</span>:</span><br><span class="line">                queue.append((<span class="number">0</span>,j))</span><br><span class="line">            <span class="keyword">if</span> board[m<span class="number">-1</span>][j]==<span class="string">"O"</span>:</span><br><span class="line">                queue.append((m<span class="number">-1</span>,j))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            x,y = queue.popleft()</span><br><span class="line">            board[x][y] = <span class="string">"A"</span></span><br><span class="line">            <span class="keyword">for</span> mx, my <span class="keyword">in</span> [(x - <span class="number">1</span>, y), (x + <span class="number">1</span>, y), (x, y - <span class="number">1</span>), (x, y + <span class="number">1</span>)]:</span><br><span class="line">                <span class="keyword">if</span> <span class="number">0</span> &lt;= mx &lt; m <span class="keyword">and</span> <span class="number">0</span> &lt;= my &lt; n <span class="keyword">and</span> board[mx][my] == <span class="string">"O"</span>:</span><br><span class="line">                    queue.append((mx, my))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="keyword">if</span> board[i][j] == <span class="string">"A"</span>:</span><br><span class="line">                    board[i][j] = <span class="string">"O"</span></span><br><span class="line">                <span class="keyword">elif</span> board[i][j]==<span class="string">"O"</span>:</span><br><span class="line">                    board[i][j] = <span class="string">"X"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;想把自己刷题过程中一些，使用经典方法、思想的题记录下来。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="bfs" scheme="http://yoursite.com/tags/bfs/"/>
    
      <category term="dfs" scheme="http://yoursite.com/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode207、课程表</title>
    <link href="http://yoursite.com/2020/08/04/LeetCode207/"/>
    <id>http://yoursite.com/2020/08/04/LeetCode207/</id>
    <published>2020-08-04T02:47:48.951Z</published>
    <updated>2020-08-04T03:03:20.371Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>想把自己刷题过程中一些，使用经典方法、思想的题记录下来。</p></blockquote><a id="more"></a><h2 id="LeetCode207、课程表"><a href="#LeetCode207、课程表" class="headerlink" title="LeetCode207、课程表"></a>LeetCode207、课程表</h2><p><strong>题目地址：</strong></p><p><a href="https://leetcode-cn.com/problems/course-schedule/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/course-schedule/</a></p><h3 id="解法1：拓扑排序、bfs"><a href="#解法1：拓扑排序、bfs" class="headerlink" title="解法1：拓扑排序、bfs"></a>解法1：拓扑排序、bfs</h3><p>通过拓扑排序判断图中是否存在环路。</p><p>构建有向边的邻接矩阵<code>edge</code>和每个节点的入度表<code>indegree</code>.</p><p>从入度为0的节点开始遍历，遍历到一个节点，此节点的入读数减1，入度为0时加入queue。</p><p>如无环，每个节点都会入队和出队，则每次出队<code>numCourse--</code>,最后判断其是否为0.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canFinish</span><span class="params">(self, numCourses: int, prerequisites: List[List[int]])</span> -&gt; bool:</span></span><br><span class="line">        indegree = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(numCourses)]</span><br><span class="line">        edge = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(numCourses)]</span><br><span class="line">        <span class="keyword">for</span> pre <span class="keyword">in</span> prerequisites:</span><br><span class="line">            indegree[pre[<span class="number">0</span>]] += <span class="number">1</span></span><br><span class="line">            edge[pre[<span class="number">1</span>]].append(pre[<span class="number">0</span>])</span><br><span class="line">        print(indegree)</span><br><span class="line">        print(edge)</span><br><span class="line">        queue = deque()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(indegree)):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> indegree[i]:</span><br><span class="line">                queue.append(i)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            node = queue.popleft()</span><br><span class="line">            numCourses -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> v <span class="keyword">in</span> edge[node]:</span><br><span class="line">                indegree[v] -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> indegree[v]:</span><br><span class="line">                    queue.append(v)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> numCourses==<span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="解法2：拓扑排序、dfs"><a href="#解法2：拓扑排序、dfs" class="headerlink" title="解法2：拓扑排序、dfs"></a>解法2：拓扑排序、dfs</h3><p>用<code>flags</code>数组来保存当前节点的状态：</p><ul><li>0：没被访问过</li><li>-1：已经被访问过</li><li>1：在当前遍历中访问过（表示存在环路）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canFinish</span><span class="params">(self, numCourses: int, prerequisites: List[List[int]])</span> -&gt; bool:</span></span><br><span class="line">        flags = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(numCourses)]</span><br><span class="line">        edge = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(numCourses)]</span><br><span class="line">        <span class="keyword">for</span> pre <span class="keyword">in</span> prerequisites:</span><br><span class="line">            edge[pre[<span class="number">1</span>]].append(pre[<span class="number">0</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(i,edge,flags)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> flags[i]==<span class="number">-1</span>: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> flags[i]==<span class="number">1</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            flags[i] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> v <span class="keyword">in</span> edge[i]:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> dfs(v,edge,flags): <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            flags[i] = <span class="number">-1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(numCourses):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> dfs(i,edge,flags): <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;想把自己刷题过程中一些，使用经典方法、思想的题记录下来。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="bfs" scheme="http://yoursite.com/tags/bfs/"/>
    
      <category term="dfs" scheme="http://yoursite.com/tags/dfs/"/>
    
      <category term="拓扑排序" scheme="http://yoursite.com/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode179、最大数</title>
    <link href="http://yoursite.com/2020/07/31/LeetCode179/"/>
    <id>http://yoursite.com/2020/07/31/LeetCode179/</id>
    <published>2020-07-31T06:44:55.655Z</published>
    <updated>2020-07-31T08:19:07.585Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>想把自己刷题过程中一些，使用经典方法、思想的题记录下来。</p></blockquote><a id="more"></a><h2 id="LeetCode179、最大数"><a href="#LeetCode179、最大数" class="headerlink" title="LeetCode179、最大数"></a>LeetCode179、最大数</h2><p><strong>题目地址：</strong></p><p><a href="https://leetcode-cn.com/problems/largest-number/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/largest-number/</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/07/31/vTgwijF8NoGhXyf.png" alt="image-20200731144650252" title="">                </div>                <div class="image-caption">image-20200731144650252</div>            </figure><h3 id="python解法："><a href="#python解法：" class="headerlink" title="python解法："></a>python解法：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LargerNumKey</span><span class="params">(str)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self+other &gt; other+self</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">largestNumber</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        largest_num = <span class="string">''</span>.join(sorted(map(str, nums), key=LargerNumKey))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'0'</span> <span class="keyword">if</span> largest_num[<span class="number">0</span>] == <span class="string">'0'</span> <span class="keyword">else</span> largest_num</span><br></pre></td></tr></table></figure><p>首先LargerNumKey继承了str类，实现了富比较方法。</p><p><strong>3，30比较：</strong>self=30，other=3，返回False，不交换位置。</p><h3 id="java解法："><a href="#java解法：" class="headerlink" title="java解法："></a>java解法：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">LargerNumberComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String a, String b)</span> </span>&#123;</span><br><span class="line">            String order1 = a + b;</span><br><span class="line">            String order2 = b + a;</span><br><span class="line">           <span class="keyword">return</span> order2.compareTo(order1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">largestNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Get input integers as strings.</span></span><br><span class="line">        String[] asStrs = <span class="keyword">new</span> String[nums.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            asStrs[i] = String.valueOf(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Sort strings according to custom comparator.</span></span><br><span class="line">        Arrays.sort(asStrs, <span class="keyword">new</span> LargerNumberComparator());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If, after being sorted, the largest number is `0`, the entire number</span></span><br><span class="line">        <span class="comment">// is zero.</span></span><br><span class="line">        <span class="keyword">if</span> (asStrs[<span class="number">0</span>].equals(<span class="string">"0"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Build largest number from sorted array.</span></span><br><span class="line">        String largestNumberStr = <span class="keyword">new</span> String();</span><br><span class="line">        <span class="keyword">for</span> (String numAsStr : asStrs) &#123;</span><br><span class="line">            largestNumberStr += numAsStr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> largestNumberStr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;想把自己刷题过程中一些，使用经典方法、思想的题记录下来。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode187、重复的DNA序列</title>
    <link href="http://yoursite.com/2020/07/31/LeetCode187/"/>
    <id>http://yoursite.com/2020/07/31/LeetCode187/</id>
    <published>2020-07-31T02:15:38.282Z</published>
    <updated>2020-07-31T03:00:46.288Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>想把自己刷题过程中一些，使用经典方法、思想的题记录下来。</p></blockquote><a id="more"></a><h2 id="LeetCode187、重复的DNA序列"><a href="#LeetCode187、重复的DNA序列" class="headerlink" title="LeetCode187、重复的DNA序列"></a>LeetCode187、重复的DNA序列</h2><p><strong>题目地址：</strong></p><p><a href="https://leetcode-cn.com/problems/repeated-dna-sequences/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/repeated-dna-sequences/</a></p><h3 id="解法一：滑动窗口暴力法"><a href="#解法一：滑动窗口暴力法" class="headerlink" title="解法一：滑动窗口暴力法"></a>解法一：滑动窗口暴力法</h3><h3 id="解法二：滑动窗口-hash"><a href="#解法二：滑动窗口-hash" class="headerlink" title="解法二：滑动窗口+hash"></a>解法二：滑动窗口+hash</h3><p>将string映射为nums数组，每10位数计算为4进制数作为hash值存入set（）中，如果在hash在set中，则表示子串重复，将子串存入set（）中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findRepeatedDnaSequences</span><span class="params">(self, s: str)</span> -&gt; List[str]:</span></span><br><span class="line">        L,n = <span class="number">10</span>,len(s)</span><br><span class="line">        <span class="keyword">if</span> n&lt;=L:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        <span class="comment">#a的值不能改小，如果把a改成2，"CA"和"AG"相等，a的值由字典d决定</span></span><br><span class="line">        a = <span class="number">4</span></span><br><span class="line">        aL = a ** L</span><br><span class="line">        d = &#123;<span class="string">"A"</span>:<span class="number">0</span>,<span class="string">"C"</span>:<span class="number">1</span>,<span class="string">"G"</span>:<span class="number">2</span>,<span class="string">"T"</span>:<span class="number">3</span>&#125;</span><br><span class="line">        nums = [d[c] <span class="keyword">for</span> c <span class="keyword">in</span> s]</span><br><span class="line">        seen = set()</span><br><span class="line">        output = set()</span><br><span class="line">        h = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n-L+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> range(L):</span><br><span class="line">                    h = h * a + nums[j]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                h = h * a - nums[i<span class="number">-1</span>]*aL + nums[i+L<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">if</span> h <span class="keyword">in</span> seen:</span><br><span class="line">                output.add(s[i:i+L])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                seen.add(h)</span><br><span class="line">        <span class="keyword">return</span> list(output)</span><br></pre></td></tr></table></figure><h3 id="解法三：滑动窗口-位运算"><a href="#解法三：滑动窗口-位运算" class="headerlink" title="解法三：滑动窗口+位运算"></a>解法三：滑动窗口+位运算</h3><p><code>A=00,C=01,G=10,T=11</code></p><p>总共会出现四个字母，因此每个字母可以用两位二进制位来表示。</p><p><strong>每次用bitmask左移两位与当前数取或运算。</strong></p><p>算法其他部分如方法二。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findRepeatedDnaSequences</span><span class="params">(self, s: str)</span> -&gt; List[str]:</span></span><br><span class="line">        L, n = <span class="number">10</span>, len(s)</span><br><span class="line">        <span class="keyword">if</span> n &lt;= L:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        to_int = &#123;<span class="string">'A'</span>: <span class="number">0</span>, <span class="string">'C'</span>: <span class="number">1</span>, <span class="string">'G'</span>: <span class="number">2</span>, <span class="string">'T'</span>: <span class="number">3</span>&#125;</span><br><span class="line">        nums = [to_int.get(s[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">        </span><br><span class="line">        bitmask = <span class="number">0</span></span><br><span class="line">        seen, output = set(), set()</span><br><span class="line">        <span class="keyword">for</span> start <span class="keyword">in</span> range(n - L + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> start != <span class="number">0</span>:</span><br><span class="line">                <span class="comment">#左移两位用来放新的字母</span></span><br><span class="line">                bitmask &lt;&lt;= <span class="number">2</span></span><br><span class="line">                bitmask |= nums[start + L - <span class="number">1</span>]</span><br><span class="line">                <span class="comment">#(3 &lt;&lt; 2 * L)表示将11左移20位，表示22位数字的高两位设置为1，其他为0，</span></span><br><span class="line">                <span class="comment">#加了‘~’表示取反，将高两位设置为1，余位设置位0</span></span><br><span class="line">                <span class="comment">#再拿bitmask取并，表示将bitmask的高两位设置为0，其他位不变</span></span><br><span class="line">                bitmask &amp;= ~(<span class="number">3</span> &lt;&lt; <span class="number">2</span> * L)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(L):</span><br><span class="line">                    bitmask &lt;&lt;= <span class="number">2</span></span><br><span class="line">                    bitmask |= nums[i]</span><br><span class="line">            print(bitmask)</span><br><span class="line">            print(bin(bitmask))</span><br><span class="line">            <span class="keyword">if</span> bitmask <span class="keyword">in</span> seen:</span><br><span class="line">                output.add(s[start:start + L])</span><br><span class="line">            seen.add(bitmask)</span><br><span class="line">        <span class="keyword">return</span> list(output)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;想把自己刷题过程中一些，使用经典方法、思想的题记录下来。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode150、逆波兰表达式求值</title>
    <link href="http://yoursite.com/2020/07/30/LeetCode150/"/>
    <id>http://yoursite.com/2020/07/30/LeetCode150/</id>
    <published>2020-07-30T14:13:46.790Z</published>
    <updated>2020-07-30T14:38:19.839Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>想把自己刷题过程中一些，使用经典方法、思想的题记录下来。</p></blockquote><a id="more"></a><h2 id="LeetCode150、逆波兰表达式求值"><a href="#LeetCode150、逆波兰表达式求值" class="headerlink" title="LeetCode150、逆波兰表达式求值"></a>LeetCode150、逆波兰表达式求值</h2><p><strong>题目地址：</strong></p><p><a href="https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/</a></p><h3 id="解法：栈、python除法"><a href="#解法：栈、python除法" class="headerlink" title="解法：栈、python除法"></a>解法：栈、python除法</h3><p>逆波兰表达式是一种后缀表达式，所谓后缀就是指算符写在后面。<br>适合用栈操作运算：<strong>遇到数字则入栈；遇到算符则取出栈顶两个数字进行计算，并将结果压入栈中。</strong></p><p><strong>有坑：</strong>python除法<strong>向下取整</strong>。</p><p>主要是负数除法操作，-45//7算出来的结果是-7。</p><p>原因是负数除法第一个数到第二个数之间的距离是多少。</p><p>-45到７的距离为52，52//7=7，其结果在加上符号为-7。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">evalRPN</span><span class="params">(self, tokens: List[str])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> tokens:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        stack = []</span><br><span class="line">        tokensLen = len(tokens)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(tokensLen):</span><br><span class="line">            <span class="keyword">if</span> tokens[i] != <span class="string">"+"</span> <span class="keyword">and</span> tokens[i] != <span class="string">"-"</span> <span class="keyword">and</span> tokens[i] != <span class="string">"*"</span> <span class="keyword">and</span> tokens[i] != <span class="string">"/"</span>:</span><br><span class="line">                stack.append(int(tokens[i]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                num2 = stack.pop()</span><br><span class="line">                num1 = stack.pop()</span><br><span class="line">                <span class="keyword">if</span> tokens[i] == <span class="string">"+"</span>:</span><br><span class="line">                    stack.append(num1+num2)</span><br><span class="line">                <span class="keyword">elif</span> tokens[i] == <span class="string">"-"</span>:</span><br><span class="line">                    stack.append(num1-num2)</span><br><span class="line">                <span class="keyword">elif</span> tokens[i] == <span class="string">"*"</span>:</span><br><span class="line">                    stack.append(num1*num2)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment">#判断num1和num2是不是异号，用了异或操作符</span></span><br><span class="line">                    <span class="keyword">if</span> (num1&lt;<span class="number">0</span>) ^ (num2&lt;<span class="number">0</span>):</span><br><span class="line">                        stack.append((abs(num1)//abs(num2))*<span class="number">-1</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        stack.append(abs(num1)//abs(num2))</span><br><span class="line">        <span class="keyword">return</span> stack[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;想把自己刷题过程中一些，使用经典方法、思想的题记录下来。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode329、矩阵中的最长递增路径</title>
    <link href="http://yoursite.com/2020/07/26/LeetCode329/"/>
    <id>http://yoursite.com/2020/07/26/LeetCode329/</id>
    <published>2020-07-26T03:44:32.149Z</published>
    <updated>2020-07-26T14:34:08.070Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>想把自己刷题过程中一些，使用经典方法、思想的题记录下来。</p></blockquote><a id="more"></a><h2 id="LeetCode329、矩阵中的最长递增路径"><a href="#LeetCode329、矩阵中的最长递增路径" class="headerlink" title="LeetCode329、矩阵中的最长递增路径"></a>LeetCode329、矩阵中的最长递增路径</h2><p><strong>题目地址：</strong></p><p><a href="https://leetcode-cn.com/problems/longest-increasing-path-in-a-matrix/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-increasing-path-in-a-matrix/</a></p><h3 id="解法：动态规划"><a href="#解法：动态规划" class="headerlink" title="解法：动态规划"></a>解法：动态规划</h3><p>定义<code>f(i,j)</code>为以<code>matrix[i][j]</code>为起点的最长递增路径长度。</p><p>状态转移方程为：<code>f(x,y) = max(f(i,j))+1 且i,j为x,y上下左右四个方向上的位置。num[x][y]&lt;num[i][j]是为了保证递增序列</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestIncreasingPath</span><span class="params">(self, matrix: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matrix:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        m = len(matrix)</span><br><span class="line">        n = len(matrix[<span class="number">0</span>])</span><br><span class="line">        <span class="comment">#用来保存过程中的结果，就是每个位置为起点的最长递增路径</span></span><br><span class="line">        arr = [[<span class="number">0</span>]*n <span class="keyword">for</span> _ <span class="keyword">in</span> range(m)]</span><br><span class="line">        <span class="comment">#计算以x,y位置为起点的最长递增路径，最短的是x,y位置上的值比周围所有值都大，法形成递增序列，因此f(x,y)=1</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">startLength</span><span class="params">(x,y)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> arr[x][y] != <span class="number">0</span>:<span class="comment">#表示计算过这个值</span></span><br><span class="line">                <span class="keyword">return</span> arr[x][y]</span><br><span class="line">            flag = <span class="literal">False</span><span class="comment">#用flag标记是否比周围值都大</span></span><br><span class="line">            <span class="keyword">for</span> i,j <span class="keyword">in</span> [(x<span class="number">-1</span>,y),(x+<span class="number">1</span>,y),(x,y<span class="number">-1</span>),(x,y+<span class="number">1</span>)]:</span><br><span class="line">                <span class="keyword">if</span> <span class="number">0</span>&lt;=i&lt;m <span class="keyword">and</span> <span class="number">0</span>&lt;=j&lt;n <span class="keyword">and</span> matrix[i][j]&gt;matrix[x][y]:</span><br><span class="line">                    flag = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">if</span> arr[i][j] != <span class="number">0</span>:</span><br><span class="line">                        arr[x][y] = max(arr[i][j]+<span class="number">1</span>,arr[x][y])</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        arr[i][j] = startLength(i,j)</span><br><span class="line">                        arr[x][y] = max(arr[i][j]+<span class="number">1</span>,arr[x][y])</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> flag:<span class="comment">#比周围值都大设置为1</span></span><br><span class="line">                arr[x][y] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> arr[x][y]</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> range(n):</span><br><span class="line">                res = max(startLength(x,y),res)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;想把自己刷题过程中一些，使用经典方法、思想的题记录下来。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode410、分割数组求最小的最大值</title>
    <link href="http://yoursite.com/2020/07/25/LeetCode410/"/>
    <id>http://yoursite.com/2020/07/25/LeetCode410/</id>
    <published>2020-07-25T09:17:59.765Z</published>
    <updated>2020-07-26T14:34:20.797Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>想把自己刷题过程中一些，使用经典方法、思想的题记录下来。</p></blockquote><a id="more"></a><h2 id="LeetCode410、分割数组求最小的最大值"><a href="#LeetCode410、分割数组求最小的最大值" class="headerlink" title="LeetCode410、分割数组求最小的最大值"></a>LeetCode410、分割数组求最小的最大值</h2><p><strong>题目地址：</strong></p><p><a href="https://leetcode-cn.com/problems/split-array-largest-sum/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/split-array-largest-sum/</a></p><h3 id="解法一：动态规划"><a href="#解法一：动态规划" class="headerlink" title="解法一：动态规划"></a>解法一：动态规划</h3><p>定义<code>f(i,j)</code>为前i个数分成j组，所有分组方式中的最小的最大值。</p><p>可以从这<code>i</code>个数的尾部拿走一些值，组成尾数组<code>tail</code>，假设拿走<code>k</code>个值。</p><p><code>max(f(i-k,j-1),sum(tail))</code>为当前分法的最大值，表示前i-k个数分为j-1组，后面的k个数成为一组。</p><p>分组的极限情况是每个数单独成为一组，也就是说<code>i-k</code>个数需要大于等于分组个数<code>j-1</code>，所以<code>k&lt;=i-j+1</code>。</p><p>采用自底向上的动态规划：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">splitArray</span><span class="params">(self, nums: List[int], m: int)</span> -&gt; int:</span></span><br><span class="line">        length = len(nums)</span><br><span class="line">        <span class="comment">#保存以各个数为结尾的和</span></span><br><span class="line">        arraySum = [<span class="number">0</span>,nums[<span class="number">0</span>]]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,length):</span><br><span class="line">            arraySum.append(arraySum[i]+nums[i])</span><br><span class="line">        <span class="comment">#自底向上保存运行结果，需要求的是最小值，预先填入极大的值，要求result[length][m]</span></span><br><span class="line">        result = [[<span class="number">10</span>**<span class="number">18</span>] * (m+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(length+<span class="number">1</span>)]</span><br><span class="line">        result[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#前i个数分为j组的最小的最大值</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,length+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,m+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> i&gt;=j:</span><br><span class="line">                    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>,i-j+<span class="number">2</span>):</span><br><span class="line">                        result[i][j] = min(result[i][j],max(result[i-k][j<span class="number">-1</span>],arraySum[i]-arraySum[i-k]))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(result)</span></span><br><span class="line">        <span class="keyword">return</span> result[length][m]</span><br></pre></td></tr></table></figure><h3 id="解法二：二分查找-贪心"><a href="#解法二：二分查找-贪心" class="headerlink" title="解法二：二分查找+贪心"></a>解法二：二分查找+贪心</h3><p>我们要求取的值的范围在<code>max(nums)</code>到<code>sum(nums)</code>之间。因此可以用二分查找方法在<code>max(nums)</code>到<code>sum(nums)</code>之间遍历。找到要求的值。</p><p>贪心地模拟分割的过程，从前到后遍历数组，用sum 表示当前分割子数组的和，cnt 表示已经分割出的子数组的数量（包括当前子数组），那么每当sum 加上当前值超过了 x，我们就把当前取的值作为新的一段分割子数组的开头，并将 cnt 加 1。遍历结束后验证是否 cnt 不超过 m。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">splitArray</span><span class="params">(self, nums: List[int], m: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(x: int)</span> -&gt; bool:</span></span><br><span class="line">            total, cnt = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">                <span class="keyword">if</span> total + num &gt; x:</span><br><span class="line">                    cnt += <span class="number">1</span></span><br><span class="line">                    total = num</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    total += num</span><br><span class="line">            <span class="keyword">return</span> cnt &lt;= m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        left = max(nums)</span><br><span class="line">        right = sum(nums)</span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            mid = (left + right) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> check(mid):</span><br><span class="line">                right = mid</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> left</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;想把自己刷题过程中一些，使用经典方法、思想的题记录下来。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="动态规划" scheme="http://yoursite.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>近期面试经验总结</title>
    <link href="http://yoursite.com/2020/07/19/%E8%BF%91%E6%9C%9F%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/07/19/%E8%BF%91%E6%9C%9F%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/</id>
    <published>2020-07-19T02:22:17.131Z</published>
    <updated>2020-07-19T02:55:18.116Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>近期面试了几个后端岗位，记录一下面试得出的经验。</p></blockquote><a id="more"></a><h2 id="一、面试中的问题"><a href="#一、面试中的问题" class="headerlink" title="一、面试中的问题"></a>一、面试中的问题</h2><h4 id="1-问简历上的项目"><a href="#1-问简历上的项目" class="headerlink" title="1.问简历上的项目"></a>1.问简历上的项目</h4><p>大体来说就是会照着简历上写的项目来进行提问。<br>首先，就是项目的总体框架，涉及到的技术栈。会对涉及到的知识进行提问。</p><p>其次，在项目中的具体工作，就是你负责了哪一部分。项目中遇到的困难，以及如何解决的。</p><p>最后，面试官问这些一个是测试你的技术掌握的深度，再一个就是看看你对技术的热情程度。所以需要在这个过程中体现出来自己对技术的热枕。</p><h4 id="2-操作系统相关"><a href="#2-操作系统相关" class="headerlink" title="2.操作系统相关"></a>2.操作系统相关</h4><ul><li>进程管理</li><li>内存管理</li><li>死锁相关</li></ul><h4 id="3-计算机网络相关"><a href="#3-计算机网络相关" class="headerlink" title="3.计算机网络相关"></a>3.计算机网络相关</h4><ul><li>http<ul><li>https</li><li>http2.0</li></ul></li><li>osi和tcp/ip网络模型</li><li>Tcp三次握手，四次挥手。这里不仅要知道怎么握手，还要知道为什么是三次和四次</li><li>cookie和session</li><li>从输入网址到显示页面，发生了什么</li></ul><h4 id="4-mysql相关"><a href="#4-mysql相关" class="headerlink" title="4.mysql相关"></a>4.mysql相关</h4><ul><li>事务<ul><li>定义及四个特征</li><li>隔离级别</li></ul></li><li>innodb和myisam存储引擎</li><li>脏读，不可重复度和幻读</li><li>索引<ul><li>索引的类型</li><li>匹配原则</li><li>底层数据结构：B+树</li></ul></li></ul><h4 id="5-java"><a href="#5-java" class="headerlink" title="5.java"></a>5.java</h4><h5 id="5-1-java集合"><a href="#5-1-java集合" class="headerlink" title="5.1 java集合"></a>5.1 java集合</h5><ul><li>hashmap</li><li>arrayList</li></ul><h5 id="5-2-JVM"><a href="#5-2-JVM" class="headerlink" title="5.2  JVM"></a>5.2  JVM</h5><ul><li>内存机构</li><li>垃圾回收机制</li></ul><h5 id="5-3-多线程"><a href="#5-3-多线程" class="headerlink" title="5.3 多线程"></a>5.3 多线程</h5><ul><li>hashmap、hashtable、CurrentHashMap</li><li>锁</li></ul><h2 id="二、面试经验"><a href="#二、面试经验" class="headerlink" title="二、面试经验"></a>二、面试经验</h2><h4 id="1-算法方面"><a href="#1-算法方面" class="headerlink" title="1.算法方面"></a>1.算法方面</h4><p>首先，要弄清楚面试官的需求。以及一些题目的要求。所以第一步是<strong>一定不要马上写代码</strong>！！！拿到题目要问清楚面试官的具体要求，然后把自己的具体思路讲述给面试官。<strong>思路得到面试官肯定后，再写代码。</strong></p><p>其次，在写代码的过程中，一定要注意程序的<strong>鲁棒性</strong>。特别要考虑一些空值和边界值的情况</p><p>最后，面试官出的题目可能是连环题，在你写完代码之后，会问你写的程序的<strong>时间复杂度和空间复杂度</strong>。然后再问你<strong>优化方案</strong>。</p><h4 id="2-项目经历方面"><a href="#2-项目经历方面" class="headerlink" title="2.项目经历方面"></a>2.项目经历方面</h4><p>首先一个明确你在项目中的工作，然后是技术难点和解决方案，也有可能是技术亮点。</p><p>这类问题回答过程中一定要体现自己对于技术的热情。</p><h4 id="3-基础知识方面"><a href="#3-基础知识方面" class="headerlink" title="3.基础知识方面"></a>3.基础知识方面</h4><p>第一种就是单纯问你的基础知识，这方面理解的基础上记忆就好了。</p><p>第二种就比较复杂。面试官会结合具体的实际业务场景来对基础知识进行提问。这一块要求对知识的掌握程度更加深刻。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;近期面试了几个后端岗位，记录一下面试得出的经验。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="面经" scheme="http://yoursite.com/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>字节跳动懂车帝后端面经</title>
    <link href="http://yoursite.com/2020/07/17/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E6%87%82%E8%BD%A6%E5%B8%9D%E5%90%8E%E7%AB%AF%E9%9D%A2%E7%BB%8F/"/>
    <id>http://yoursite.com/2020/07/17/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E6%87%82%E8%BD%A6%E5%B8%9D%E5%90%8E%E7%AB%AF%E9%9D%A2%E7%BB%8F/</id>
    <published>2020-07-17T12:45:07.499Z</published>
    <updated>2020-07-23T08:34:03.353Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>找了学长内推了字节跳动懂车帝的后端岗位，这也是作者本人的第一次面试，有纪念意义，所以记录一下过程。</p></blockquote><a id="more"></a><h2 id="字节跳动懂车帝面经"><a href="#字节跳动懂车帝面经" class="headerlink" title="字节跳动懂车帝面经"></a>字节跳动懂车帝面经</h2><p>懂车帝后端主要用Go和python语言，因此相对来说就会少问一些java方面的知识。</p><p>面试的平台是在牛客网上，上来先做了一个简短的自我介绍，然后就直接开始问问题了。</p><h4 id="问题1、从长度未知的链表中随机取出一个数。"><a href="#问题1、从长度未知的链表中随机取出一个数。" class="headerlink" title="问题1、从长度未知的链表中随机取出一个数。"></a>问题1、从长度未知的链表中随机取出一个数。</h4><p>首先，需要说明这是一个经典的问题，需要用蓄水池抽样算法。但是本人当时并不知道这个算法。因此想出了两个方案，但是面试官都说不对，因此最后在面试官的提示下需要回去看看蓄水池算法。</p><p>错误方法1：先获取链表的长度，然后取链表长度的随机数，再取相应随机数位置的数。</p><p>面试官说不能获取链表的长度。</p><p>错误方法2：先生成一个随机数，然后取随机数位置上的链表上的数。会出现两种情况，一种是数到相应的位置上有数，直接取。第二种情况，向后遍历链表直到链表尾，发现随机数大于链表长度，这时候用随机数对链表长度取余数。取余数位置上的数。</p><p>面试官说还是需要获取到链表的长度。WTF？向后遍历到链表的尾部的同时就能够记录到链表的长度的啊。</p><p>正确答案：<strong>蓄水池取水算法</strong></p><p><strong>前提：</strong>给定一个数据流，数据流长度N很大，且N直到处理完所有数据之前都不可知，请问如何在只遍历一遍数据（O(N)）的情况下，能够随机选取出m个不重复的数据。<code>（这里面试官没有说出来只能够遍历一次链表）</code>。本题面试官提出的是取一个数据，因此把m设置为1即可。</p><p><strong>算法思路大致如下：</strong></p><ol><li>如果接收的数据量小于m，则依次放入蓄水池。</li><li>当遍历到第i个数据时，i &gt;= m，在[0, i]范围内取以随机数d，若d的落在[0, m-1]范围内，则用这第i个数据替换蓄水池中的第d个数据。</li><li>重复步骤2。</li></ol><p><strong>算法随机性的证明：</strong></p><p><strong>第i个数据最后能够留在蓄水池中的概率=第i个数据进入过蓄水池的概率*第i个数据不被替换的概率</strong>（第i+1到第N次处理数据都不会被替换）。</p><ol><li>当<code>i&lt;=m</code>时，数据直接放进蓄水池，所以<strong>第i个数据进入过蓄水池的概率=1</strong>。</li><li>当<code>i&gt;m</code>时，在[1,i]内选取随机数d，如果<code>d&lt;=m</code>，则使用第i个数据替换蓄水池中第d个数据，因此<strong>第i个数据进入蓄水池的概率=m/i</strong>。</li><li>当<code>i&lt;=m</code>时，程序从接收到第<code>m+1</code>个数据时开始执行替换操作，第<code>m+1</code>次处理会替换池中数据的为<code>m/(m+1)</code>，会替换掉第<code>i</code>个数据的概率为<code>1/m</code>，则第<code>m+1</code>次处理替换掉第<code>i</code>个数据的概率为<code>(m/(m+1))*(1/m)=1/(m+1)</code>，不被替换的概率为<code>1-1/(m+1)=m/(m+1)</code>。依次，第<code>m+2</code>次处理不替换掉第i个数据概率为<code>(m+1)/(m+2)</code>…第<code>N</code>次处理不替换掉第i个数据的概率为<code>(N-1)/N</code>。所以，之后第<code>i</code>个数据不被替换的概率=<code>m/(m+1)*(m+1)/(m+2)*...*(N-1)/N=m/N</code>。（<strong>这里如果m==1，表示只取一个数据，因此概率为1/N</strong>）</li><li>当<code>i&gt;m</code>时，程序从接收到第<code>i+1</code>个数据时开始有可能替换第i个数据。则参考上述第3点，<strong>之后第i个数据不被替换的概率=i/N</strong>。</li><li>结合第1点和第3点可知，当<code>i&lt;=m</code>时，第i个接收到的数据最后留在蓄水池中的概率=<code>1*m/N=m/N</code>。结合第2点和第4点可知，当<code>i&gt;m</code>时，第i个接收到的数据留在蓄水池中的概率=<code>m/i*i/N=m/N</code>。综上可知，<strong>每个数据最后被选中留在蓄水池中的概率为m/N</strong>。</li></ol><p>这个算法建立在统计学基础上，很巧妙地获得了<code>&quot;m/N&quot;</code>这个概率。</p><h4 id="问题2、写一个斐波那契数列。给n求n位置上的值"><a href="#问题2、写一个斐波那契数列。给n求n位置上的值" class="headerlink" title="问题2、写一个斐波那契数列。给n求n位置上的值"></a>问题2、写一个斐波那契数列。给n求n位置上的值</h4><p>0、1、1、2、3、5……</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib(n<span class="number">-1</span>)+fib(n<span class="number">-2</span>)</span><br></pre></td></tr></table></figure><h4 id="问题3、斐波那契数列递归算法的时间空间复杂度，以及如何优化"><a href="#问题3、斐波那契数列递归算法的时间空间复杂度，以及如何优化" class="headerlink" title="问题3、斐波那契数列递归算法的时间空间复杂度，以及如何优化"></a>问题3、斐波那契数列递归算法的时间空间复杂度，以及如何优化</h4><p>时间复杂度O（n）</p><p>空间复杂度O（n）</p><p>优化采用自底向下的动态规划算法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    res = [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">        res.append(res[<span class="number">-1</span>]+res[<span class="number">-2</span>])</span><br><span class="line">    <span class="keyword">return</span> res[n]</span><br></pre></td></tr></table></figure><p>这种算法需要空间空间复杂度为O(n),可以再优化为常数级别。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    num1 = <span class="number">0</span></span><br><span class="line">    num2 = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> num1</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">        num1,num2 = num2,num1+num2</span><br><span class="line">    <span class="keyword">return</span> num2</span><br></pre></td></tr></table></figure><p>说起来惭愧，这是《剑指offer》上的原题，面试之前作者并没有读过，当时又非常紧张，没有写出来这道题。面完试感觉这道题是easy的。</p><h4 id="问题4-操作系统什么时候会从用户态进入到内核态"><a href="#问题4-操作系统什么时候会从用户态进入到内核态" class="headerlink" title="问题4.操作系统什么时候会从用户态进入到内核态"></a>问题4.操作系统什么时候会从用户态进入到内核态</h4><p>内核态主要涉及到一些特权指令的操作。发生系统调用时会从用户态转移到内核态。</p><p><strong>系统调用：</strong></p><ul><li>设备管理</li><li>文件管理</li><li>进程控制</li><li>进程通信</li><li>内存管理</li></ul><h4 id="问题5-Tcp拥塞控制"><a href="#问题5-Tcp拥塞控制" class="headerlink" title="问题5.Tcp拥塞控制"></a>问题5.Tcp拥塞控制</h4><ul><li>慢开始</li><li>拥塞避免</li><li>快重传</li><li>快恢复</li></ul><p><strong>慢开始：</strong>指数增长就是将拥塞窗口cwnd设置为1，没经过一个RTT，cwnd加倍，指数增长。知道到达满开始门限阈值采用拥塞避免算法。</p><p><strong>拥塞避免：</strong>线性zeng’zhang每经过一个RTT就增加一个MSS大小。知道出现第一次超时（网络拥塞），就将慢开始门限设置为此时拥塞窗口值的一半。然后把cwnd重置为1。执行慢开始算法。</p><p><strong>快重传：</strong>当发送方接收到3个冗余ACK时，就认为确认的报文后面的报文段丢失了。并立即对缺失的报文段重传。</p><p><strong>快恢复：</strong>就是发生冗余ACK时间时候，将慢开始门限设置为当前的一半，然后将cwnd设置慢开始门限值，开始拥塞避免算法。</p><h4 id="问题6-进程通信方式"><a href="#问题6-进程通信方式" class="headerlink" title="问题6.进程通信方式"></a>问题6.进程通信方式</h4><ol><li>管道pipe：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。</li><li>命名管道FIFO：有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。</li><li>消息队列MessageQueue：消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。</li><li>共享存储SharedMemory：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号量，配合使用，来实现进程间的同步和通信。</li><li>信号量Semaphore：信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。</li><li>套接字Socket：套解口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同及其间的进程通信。</li><li>信号 ( sinal ) ： 信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。</li></ol><h4 id="问题7-Tcp连接三次握手，为什么不是两次"><a href="#问题7-Tcp连接三次握手，为什么不是两次" class="headerlink" title="问题7.Tcp连接三次握手，为什么不是两次"></a>问题7.Tcp连接三次握手，为什么不是两次</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/07/17/TeGwm2hYEJRzcB4.jpg" alt="654b2aab47dbab75a9813b891790d60" title="">                </div>                <div class="image-caption">654b2aab47dbab75a9813b891790d60</div>            </figure><p><strong>第一次握手：</strong>客户机向服务器发送<strong>连接请求报文</strong>。</p><p><strong>第二次握手：</strong>服务器的TCP收到连接请求报文之后，同意链接，向客户机发回确认，为TCP连接分配TCP缓存和变量。</p><p><strong>第三次握手：</strong>客户机收到确认报文，向服务器发送确认报文为连接分配缓存和变量。</p><p><strong>为什么不是两次？</strong></p><p>​    <strong>防止客户端失效的连接请求报文段突然又传到服务器</strong></p><p>例如以下情况如果使用两次握手：</p><ul><li>如果客户端向服务器发送第一次连接请求在网络节点上滞留了，没有收到服务器的确认，于是又重新发送了一次连接请求</li><li>服务器收到客户端的第二次请求发送确认，则连接建立完成</li><li>服务器客户端进行数据传输，传输完成断开连接。</li><li>此时，在网络上滞留的客户端第一次连接请求到达服务器，服务器发送确认连接但是客户端实际上并没有发送请求，因此不会理睬服务器发送的请求。但是服务器认为连接已完成，并等待客户端进行数据传输。这样会造成资源的浪费</li></ul><p>如果采用三次握手的话：</p><ul><li>滞留在网络上的客户端第一次请求到达服务器之后，服务器发送确认，但实际上服务器并没有发送请求，因此不会理睬服务器的确认，故不会发送确认，服务器等不到客户端的确认则连接建立失败。这样就防止了客户端失效的连接请求报文段突然又传到服务器</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这是作者本人的第一次面试，面试的时候很紧张。面试官出了编程题马上就上手去写，没有思考的过程，也没有去问具体的一些要求。导致越写越慌，到最后连斐波那契数列这样的基础题，也没有写出来。基础知识也很不牢靠，一些简单的问题，也没有答上来。</p><p>在面试后在网上找了一些《剑指offer》的资料，发现前几章很有帮助，其中比较重要的一点就是，拿到面试题先思考，不理解需求的问，想清楚了之后再具体的写代码。</p><p><strong>一些面试题答案的参考文献：</strong></p><p><a href="https://www.jianshu.com/p/7a9ea6ece2af" target="_blank" rel="noopener">https://www.jianshu.com/p/7a9ea6ece2af</a></p><p><a href="https://blog.csdn.net/zhaohong_bo/article/details/89552188" target="_blank" rel="noopener">https://blog.csdn.net/zhaohong_bo/article/details/89552188</a></p><p><a href="https://blog.csdn.net/qq_41727218/article/details/87881235" target="_blank" rel="noopener">https://blog.csdn.net/qq_41727218/article/details/87881235</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;找了学长内推了字节跳动懂车帝的后端岗位，这也是作者本人的第一次面试，有纪念意义，所以记录一下过程。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="面经" scheme="http://yoursite.com/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
      <category term="字节跳动" scheme="http://yoursite.com/tags/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/"/>
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>python集合的一些基本操作</title>
    <link href="http://yoursite.com/2020/07/12/python%E9%9B%86%E5%90%88%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2020/07/12/python%E9%9B%86%E5%90%88%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</id>
    <published>2020-07-12T13:03:11.494Z</published>
    <updated>2020-07-12T13:36:16.864Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>刷题过程中有时需要用到集合相关的数据结构，主要是list、set和dict。记录一下如何在刷题过程中应用这些结构。</p></blockquote><a id="more"></a><h2 id="python集合的一些基本操作"><a href="#python集合的一些基本操作" class="headerlink" title="python集合的一些基本操作"></a>python集合的一些基本操作</h2><h3 id="一、list"><a href="#一、list" class="headerlink" title="一、list"></a>一、list</h3><h4 id="1、列表的创建"><a href="#1、列表的创建" class="headerlink" title="1、列表的创建"></a>1、列表的创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nums = []</span><br><span class="line"><span class="comment">#快速创建队列并赋值</span></span><br><span class="line">nums = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line"><span class="comment">#快速创建二维数组，并赋值</span></span><br><span class="line">nums = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(m)]</span><br></pre></td></tr></table></figure><h4 id="2、列表的压入"><a href="#2、列表的压入" class="headerlink" title="2、列表的压入"></a>2、列表的压入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nums.append(x)</span><br><span class="line">nums.insert(index,x)<span class="comment">#在index插入x</span></span><br></pre></td></tr></table></figure><h4 id="3、列表的删除"><a href="#3、列表的删除" class="headerlink" title="3、列表的删除"></a>3、列表的删除</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = nums.pop(<span class="number">1</span>)<span class="comment">#删除index为1的元素</span></span><br><span class="line">list.remove(<span class="number">2</span>)<span class="comment">#删除元素2的第一个匹配项</span></span><br></pre></td></tr></table></figure><h4 id="4、列表排序"><a href="#4、列表排序" class="headerlink" title="4、列表排序"></a>4、列表排序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nums.sort()</span><br><span class="line">nums.sort(key=<span class="literal">None</span>,reverse=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h4 id="5、反转列表"><a href="#5、反转列表" class="headerlink" title="5、反转列表"></a>5、反转列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums.reverse()</span><br></pre></td></tr></table></figure><h4 id="6、复制列表"><a href="#6、复制列表" class="headerlink" title="6、复制列表"></a>6、复制列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums.copy()</span><br></pre></td></tr></table></figure><h4 id="7、列表中某个元素出现的个数"><a href="#7、列表中某个元素出现的个数" class="headerlink" title="7、列表中某个元素出现的个数"></a>7、列表中某个元素出现的个数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums.count(x)<span class="comment">#x出现的次数</span></span><br></pre></td></tr></table></figure><h4 id="8、某个值的第一个匹配项的index"><a href="#8、某个值的第一个匹配项的index" class="headerlink" title="8、某个值的第一个匹配项的index"></a>8、某个值的第一个匹配项的index</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums.index(x)</span><br></pre></td></tr></table></figure><h3 id="二、set"><a href="#二、set" class="headerlink" title="二、set"></a>二、set</h3><h4 id="1、集合的创建"><a href="#1、集合的创建" class="headerlink" title="1、集合的创建"></a>1、集合的创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums = &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="2、集合的压入"><a href="#2、集合的压入" class="headerlink" title="2、集合的压入"></a>2、集合的压入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nums.add(x)</span><br><span class="line"><span class="comment">#高级方法</span></span><br><span class="line">nums.update(x)<span class="comment">#x可以是列表、元组、字典，且x可以又多个，用逗号隔开</span></span><br><span class="line">nums.update([<span class="number">1</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line"><span class="comment">#&#123;1, 3, 4, 5, 6&#125;</span></span><br></pre></td></tr></table></figure><h4 id="3、集合的删除"><a href="#3、集合的删除" class="headerlink" title="3、集合的删除"></a>3、集合的删除</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nums.remove(x)<span class="comment">#如果元素不存在会发生错误</span></span><br><span class="line">nums.discard(x)<span class="comment">#如果元素不存在不会发生错误</span></span><br></pre></td></tr></table></figure><h3 id="三、dict"><a href="#三、dict" class="headerlink" title="三、dict"></a>三、dict</h3><h4 id="1、字典的创建"><a href="#1、字典的创建" class="headerlink" title="1、字典的创建"></a>1、字典的创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums = &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="2、字典的压入"><a href="#2、字典的压入" class="headerlink" title="2、字典的压入"></a>2、字典的压入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums[x] = y</span><br></pre></td></tr></table></figure><h4 id="3、字典的删除"><a href="#3、字典的删除" class="headerlink" title="3、字典的删除"></a>3、字典的删除</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> nums[x]</span><br></pre></td></tr></table></figure><h4 id="4、字典的遍历"><a href="#4、字典的遍历" class="headerlink" title="4、字典的遍历"></a>4、字典的遍历</h4><h5 id="4-1、遍历键"><a href="#4-1、遍历键" class="headerlink" title="4.1、遍历键"></a>4.1、遍历键</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> nums:</span><br><span class="line">    print(nums[key])</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> nums.keys():</span><br></pre></td></tr></table></figure><h5 id="4-2、遍历值"><a href="#4-2、遍历值" class="headerlink" title="4.2、遍历值"></a>4.2、遍历值</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> nums.values():</span><br><span class="line">    print(value)</span><br></pre></td></tr></table></figure><h5 id="4-3、遍历键和值"><a href="#4-3、遍历键和值" class="headerlink" title="4.3、遍历键和值"></a>4.3、遍历键和值</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> nums.items():</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;刷题过程中有时需要用到集合相关的数据结构，主要是list、set和dict。记录一下如何在刷题过程中应用这些结构。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python刷题过程中的栈、队列和堆的实现</title>
    <link href="http://yoursite.com/2020/07/12/python%E5%88%B7%E9%A2%98%E7%9A%84%E6%A0%88%E9%98%9F%E5%88%97%E5%92%8C%E5%A0%86%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2020/07/12/python%E5%88%B7%E9%A2%98%E7%9A%84%E6%A0%88%E9%98%9F%E5%88%97%E5%92%8C%E5%A0%86%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-07-12T12:49:55.263Z</published>
    <updated>2020-07-12T13:02:45.561Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>刷题过程中有时需要用到栈、队列和堆的数据结构，记录一下如何在刷题过程中快速应用</p></blockquote><a id="more"></a><h2 id="python刷题的栈、队列和堆的实现"><a href="#python刷题的栈、队列和堆的实现" class="headerlink" title="python刷题的栈、队列和堆的实现"></a>python刷题的栈、队列和堆的实现</h2><h3 id="一、栈"><a href="#一、栈" class="headerlink" title="一、栈"></a>一、栈</h3><h4 id="1、栈的创建"><a href="#1、栈的创建" class="headerlink" title="1、栈的创建"></a>1、栈的创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stack = []</span><br></pre></td></tr></table></figure><h4 id="2、栈的压入"><a href="#2、栈的压入" class="headerlink" title="2、栈的压入"></a>2、栈的压入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stack.append(x)</span><br></pre></td></tr></table></figure><h4 id="3、栈的弹出"><a href="#3、栈的弹出" class="headerlink" title="3、栈的弹出"></a>3、栈的弹出</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = stack.pop()</span><br></pre></td></tr></table></figure><h3 id="二、队列"><a href="#二、队列" class="headerlink" title="二、队列"></a>二、队列</h3><h4 id="1、队列的创建"><a href="#1、队列的创建" class="headerlink" title="1、队列的创建"></a>1、队列的创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">queue = deque()</span><br></pre></td></tr></table></figure><h4 id="2、队列的压入"><a href="#2、队列的压入" class="headerlink" title="2、队列的压入"></a>2、队列的压入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queue.append(x)</span><br></pre></td></tr></table></figure><h4 id="3、队列的弹出"><a href="#3、队列的弹出" class="headerlink" title="3、队列的弹出"></a>3、队列的弹出</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = stack.popleft()</span><br></pre></td></tr></table></figure><h3 id="三、堆（最小堆）"><a href="#三、堆（最小堆）" class="headerlink" title="三、堆（最小堆）"></a>三、堆（最小堆）</h3><p><strong>注意：</strong>heapq默认是创建的最小堆，如果需要最大堆，就将<code>-x</code>存入堆中。</p><h4 id="1、栈的创建-1"><a href="#1、栈的创建-1" class="headerlink" title="1、栈的创建"></a>1、栈的创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line">heap = []<span class="comment">#新建</span></span><br><span class="line"><span class="comment">#或者将列表变成小顶堆</span></span><br><span class="line">nums = [......]</span><br><span class="line">heapq.heapify(nums)</span><br></pre></td></tr></table></figure><h4 id="2、堆的压入"><a href="#2、堆的压入" class="headerlink" title="2、堆的压入"></a>2、堆的压入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heapq.heappush(heap,x)</span><br></pre></td></tr></table></figure><h4 id="3、堆的弹出"><a href="#3、堆的弹出" class="headerlink" title="3、堆的弹出"></a>3、堆的弹出</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heapq.heappop(heaq)</span><br></pre></td></tr></table></figure><h4 id="4、寻找序列中最大或最小的N个元素"><a href="#4、寻找序列中最大或最小的N个元素" class="headerlink" title="4、寻找序列中最大或最小的N个元素"></a>4、寻找序列中最大或最小的N个元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lista = [<span class="number">64</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">83</span>, <span class="number">85</span>, <span class="number">50</span>, <span class="number">10</span>, <span class="number">49</span>, <span class="number">28</span>, <span class="number">60</span>]</span><br><span class="line">print(heapq.nlargest(<span class="number">3</span>, lista)) <span class="comment"># [93, 92, 85]</span></span><br><span class="line">print(heapq.nsmallest(<span class="number">3</span>, lista)) <span class="comment"># [10, 28, 49]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;刷题过程中有时需要用到栈、队列和堆的数据结构，记录一下如何在刷题过程中快速应用&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>win10下运行hadoop的wordcount程序报错</title>
    <link href="http://yoursite.com/2020/06/27/WordCount%E7%A8%8B%E5%BA%8F%E6%8A%A5%E9%94%99/"/>
    <id>http://yoursite.com/2020/06/27/WordCount%E7%A8%8B%E5%BA%8F%E6%8A%A5%E9%94%99/</id>
    <published>2020-06-27T12:15:08.039Z</published>
    <updated>2020-06-27T12:29:58.709Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>学习hadoop的过程中遇到了一个bug，记录一下过程</p></blockquote><a id="more"></a><h2 id="Exception-in-thread“main”java-lang-UnsatisfiedLinkError-org-apache-hadoop-io-nativeio-NativeIO-Windows-access0-Ljava-lang-String-I-Z"><a href="#Exception-in-thread“main”java-lang-UnsatisfiedLinkError-org-apache-hadoop-io-nativeio-NativeIO-Windows-access0-Ljava-lang-String-I-Z" class="headerlink" title="Exception in thread“main”java.lang.UnsatisfiedLinkError: org.apache.hadoop.io.nativeio.NativeIO$Windows.access0(Ljava/lang/String;I)Z"></a>Exception in thread“main”java.lang.UnsatisfiedLinkError: org.apache.hadoop.io.nativeio.NativeIO$Windows.access0(Ljava/lang/String;I)Z</h2><h3 id="第一步、检查系统环境变量"><a href="#第一步、检查系统环境变量" class="headerlink" title="第一步、检查系统环境变量"></a>第一步、检查系统环境变量</h3><h4 id="1、检查HADOOP-HOME"><a href="#1、检查HADOOP-HOME" class="headerlink" title="1、检查HADOOP_HOME"></a>1、检查HADOOP_HOME</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/27/lYMTFLXqh4tjRH5.png" alt="image-20200627202154495" title="">                </div>                <div class="image-caption">image-20200627202154495</div>            </figure><h4 id="2、检查PATH"><a href="#2、检查PATH" class="headerlink" title="2、检查PATH"></a>2、检查PATH</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/27/vYaiKe8wSRZIodT.png" alt="image-20200627202320374" title="">                </div>                <div class="image-caption">image-20200627202320374</div>            </figure><h3 id="第二步、检查hadoop-bin文件夹"><a href="#第二步、检查hadoop-bin文件夹" class="headerlink" title="第二步、检查hadoop/bin文件夹"></a>第二步、检查hadoop/bin文件夹</h3><p>主要检查是否有<code>winutils.exe</code>和<code>hadoop.dll</code>两个文件。</p><p>如果没有的话请从网上下载，要下载对应版本的文件。</p><h3 id="第三步、检查C-Windows-System32文件夹"><a href="#第三步、检查C-Windows-System32文件夹" class="headerlink" title="第三步、检查C:\Windows\System32文件夹"></a>第三步、检查C:\Windows\System32文件夹</h3><p>检查是否有<code>hadoop.dll</code>文件，如果没有的话，从hadoop/bin文件夹下复制过去。</p><p>文章来源：<a href="https://sparkbyexamples.com/spark/spark-hadoop-exception-in-thread-main-java-lang-unsatisfiedlinkerror-org-apache-hadoop-io-nativeio-nativeiowindows-access0ljava-lang-stringiz/" target="_blank" rel="noopener">https://sparkbyexamples.com/spark/spark-hadoop-exception-in-thread-main-java-lang-unsatisfiedlinkerror-org-apache-hadoop-io-nativeio-nativeiowindows-access0ljava-lang-stringiz/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;学习hadoop的过程中遇到了一个bug，记录一下过程&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="hadoop" scheme="http://yoursite.com/categories/hadoop/"/>
    
    
      <category term="hadoop" scheme="http://yoursite.com/tags/hadoop/"/>
    
      <category term="wordcount" scheme="http://yoursite.com/tags/wordcount/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7设置防火墙</title>
    <link href="http://yoursite.com/2020/06/26/CentOS7%E9%98%B2%E7%81%AB%E5%A2%99%E8%AE%BE%E7%BD%AE/"/>
    <id>http://yoursite.com/2020/06/26/CentOS7%E9%98%B2%E7%81%AB%E5%A2%99%E8%AE%BE%E7%BD%AE/</id>
    <published>2020-06-26T04:22:20.489Z</published>
    <updated>2020-07-18T10:35:27.636Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>CentOS7设置防火墙，记录一下过程</p></blockquote><a id="more"></a><h2 id="CentOS7设置防火墙"><a href="#CentOS7设置防火墙" class="headerlink" title="CentOS7设置防火墙"></a>CentOS7设置防火墙</h2><h4 id="1、防火墙设置"><a href="#1、防火墙设置" class="headerlink" title="1、防火墙设置"></a>1、防火墙设置</h4><ul><li><strong>启动防火墙</strong>：<code>systemctl start firewalld.service</code></li><li><strong>关闭防火墙</strong>：<code>systemctl stop firewalld.service</code></li><li><strong>重启防火墙</strong>：<code>systemctl restart firewalld.service</code></li><li><strong>显示防火墙状态</strong>：<code>systemctl status firewalld.service</code></li><li><strong>开机自动开启防火墙</strong>：<code>systemctl enable firewalld.service</code></li><li><strong>开机禁用防火墙</strong>：<code>systemctl disable firewalld.service</code></li><li><strong>查看防火墙是否开机启动</strong>：<code>systemctl is-enabled firewalld.service</code></li><li>查看已启动的服务列表：<code>systemctl list-unit-files|grep enabled</code></li><li>查看启动失败的服务列表：<code>systemctl --failed</code></li></ul><h4 id="2、防火墙配置"><a href="#2、防火墙配置" class="headerlink" title="2、防火墙配置"></a>2、防火墙配置</h4><ul><li>查看版本： <code>firewall-cmd --version</code></li><li>查看帮助： <code>firewall-cmd --help</code></li><li>显示状态： <code>firewall-cmd --state</code></li><li><strong>查看所有打开的端口</strong>： <code>firewall-cmd --zone=public --list-ports</code></li><li><strong>更新防火墙规则</strong>：<code>firewall-cmd --reload</code></li><li>查看区域信息:  <code>firewall-cmd --get-active-zones</code></li><li>查看指定接口所属区域：<code>firewall-cmd --get-zone-of-interface=eth0</code></li><li>拒绝所有包：<code>firewall-cmd --panic-on</code></li><li>取消拒绝状态： <code>firewall-cmd --panic-off</code></li><li>查看是否拒绝： <code>firewall-cmd --query-panic</code></li><li><strong>添加开放端口</strong>：<code>firewall-cmd --zone=public --add-port=80/tcp --permanent</code>  （–permanent永久生效，没有此参数重启后失效）</li><li><strong>删除开放端口</strong>：<code>firewall-cmd --zone=public --remove-port=80/tcp --permanent</code></li><li>查看开放端口：<code>firewall-cmd --zone=public --query-port=80/tcp</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;CentOS7设置防火墙，记录一下过程&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CentOS" scheme="http://yoursite.com/categories/CentOS/"/>
    
    
      <category term="CentOS" scheme="http://yoursite.com/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>scrapy爬虫</title>
    <link href="http://yoursite.com/2020/06/16/scrapy%E7%88%AC%E8%99%AB/"/>
    <id>http://yoursite.com/2020/06/16/scrapy%E7%88%AC%E8%99%AB/</id>
    <published>2020-06-15T16:01:06.077Z</published>
    <updated>2020-06-15T16:26:20.829Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>学习了一下scrapy爬虫，记录一下过程。</p></blockquote><a id="more"></a><h2 id="scrapy爬虫"><a href="#scrapy爬虫" class="headerlink" title="scrapy爬虫"></a>scrapy爬虫</h2><h3 id="一、新建工程"><a href="#一、新建工程" class="headerlink" title="一、新建工程"></a>一、新建工程</h3><h4 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h4><p>powershell下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject 工程名称</span><br></pre></td></tr></table></figure><h4 id="2-创建爬虫程序"><a href="#2-创建爬虫程序" class="headerlink" title="2. 创建爬虫程序"></a>2. 创建爬虫程序</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> 工程名称</span><br><span class="line">scrapy genspider 程序名称 爬取的网站地址</span><br></pre></td></tr></table></figure><p>注意：==网站地址前面不要有http://之类的==</p><h4 id="3-启动spider"><a href="#3-启动spider" class="headerlink" title="3. 启动spider"></a>3. 启动spider</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawel 程序名称</span><br></pre></td></tr></table></figure><h3 id="二、文件说明"><a href="#二、文件说明" class="headerlink" title="二、文件说明"></a>二、文件说明</h3><ul><li><strong>scrapy.cfg</strong>：项目的配置信息，主要为Scrapy命令行工具提供一个基础的配置信息。（真正爬虫相关的配置信息在settings.py文件中）</li><li><strong>items.py</strong>：设置数据存储模板，用于结构化数据，如：Django的Model</li><li><strong>pipelines</strong>：数据处理行为，如：一般结构化的数据持久化</li><li><strong>settings.py</strong>：配置文件，如：递归的层数、并发数，延迟下载等</li><li><strong>spiders</strong>：爬虫目录，如：创建文件，编写爬虫规则</li></ul><p>以上命名都是固定的</p><hr><h4 id="1-items-py："><a href="#1-items-py：" class="headerlink" title="1. items.py："></a>1. items.py：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThirdItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    name = scrapy.Field()</span><br><span class="line">    age = scrapy.Field()</span><br></pre></td></tr></table></figure><h4 id="2-example-py"><a href="#2-example-py" class="headerlink" title="2. example.py"></a>2. example.py</h4><p>example.py是scrapy genspider命令中spider名称</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> Request</span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> Item<span class="comment">#导入自定义的item结构化数据类</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'example'</span></span><br><span class="line">    allowed_domains = [<span class="string">'example.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://example.com'</span>]<span class="comment">#要爬取的网页</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        print(response.body)<span class="comment">#打印获取到的网页源码</span></span><br><span class="line">        <span class="comment">#获取页面数据的两种方式</span></span><br><span class="line">        <span class="comment">#url = response.css(' ').extract()</span></span><br><span class="line">        url = response.xpath(<span class="string">' '</span>).extract()</span><br><span class="line">        <span class="keyword">for</span> next_url <span class="keyword">in</span> url:</span><br><span class="line">            <span class="keyword">yield</span> Request(url=parse.urljoin(response.url, next_url), callback=self.parse_detail)<span class="comment">#parse_detail为自定义函数</span></span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_detail</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        print(<span class="string">"================进入parse_detail================="</span>)</span><br><span class="line">        print(response.body)<span class="comment">#打印url的源码</span></span><br><span class="line">        items = Item()</span><br><span class="line">        items[<span class="string">'name'</span>] = response.xpath(<span class="string">' '</span>).extract_first(<span class="string">""</span>)</span><br><span class="line">        items[<span class="string">'name'</span>] = items[<span class="string">'name'</span>].replace(<span class="string">'\n'</span>, <span class="string">''</span>).replace(<span class="string">' '</span>, <span class="string">''</span>)</span><br><span class="line">        </span><br><span class="line">        items[<span class="string">'age'</span>] = response.xpath(<span class="string">' '</span>).extract_first(<span class="string">""</span>)</span><br><span class="line">        items[<span class="string">'age'</span>] = items[<span class="string">'age'</span>].replace(<span class="string">'\n'</span>, <span class="string">''</span>).replace(<span class="string">' '</span>, <span class="string">''</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">yield</span> items</span><br></pre></td></tr></table></figure><h4 id="4-main-py"><a href="#4-main-py" class="headerlink" title="4. main.py"></a>4. main.py</h4><p>在pycharm里，可以将指令写入main.py中，简化操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> cmdline</span><br><span class="line"></span><br><span class="line"><span class="comment">#cmdline.execute("scrapy","crawl","example")</span></span><br><span class="line">cmdline.execute(<span class="string">"scrapy crawl example"</span>.split())</span><br></pre></td></tr></table></figure><p><strong>如果没有出现运行标志，表示需要配置：</strong></p><ol><li><p>配置</p><p><img src="https://i.loli.net/2020/06/16/JXgyRfLoSO1V2EW.png" alt="QQ截图20200323083706-1584923944607.png"></p></li><li><p>添加新配置</p><p><img src="https://i.loli.net/2020/06/16/GzmRhMltLfBPE1w.png" alt="QQ截图20200323083807"></p></li><li><p>配置信息</p><p><img src="https://i.loli.net/2020/06/16/GBnOXsPCAM9U1Wt.png" alt="QQ截图20200323084005"></p></li></ol><p>==工作目录需要选择py文件的父文件夹==</p><h3 id="三、延迟获取"><a href="#三、延迟获取" class="headerlink" title="三、延迟获取"></a>三、延迟获取</h3><p>对于浏览器看到的和实际打印的response.body不同的解决方法有两种，两种都可以进行尝试。</p><h4 id="1-DOWNLOAD-DELAY"><a href="#1-DOWNLOAD-DELAY" class="headerlink" title="1. DOWNLOAD_DELAY"></a>1. DOWNLOAD_DELAY</h4><p>在setting.py中找到<code>DOWNLOAD_DELAY</code>取消注释设置值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DOWNLOAD_DELAY = <span class="number">5</span> <span class="comment">#数值越大，延迟越大</span></span><br></pre></td></tr></table></figure><h4 id="2-middleware"><a href="#2-middleware" class="headerlink" title="2. middleware"></a>2. middleware</h4><h5 id="2-1-安装selenium"><a href="#2-1-安装selenium" class="headerlink" title="2.1 安装selenium"></a>2.1 安装selenium</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure><h5 id="2-2-安装chromedriver"><a href="#2-2-安装chromedriver" class="headerlink" title="2.2 安装chromedriver"></a>2.2 安装chromedriver</h5><p>注意：==chromedriver的版本一定要与Chrome的版本一致，不然就不起作用。==</p><p>查看chrome版本方法：在浏览器地址栏输入chrome://version/</p><p>两个下载地址：</p><ol><li><em><a href="http://chromedriver.storage.googleapis.com/index.html" target="_blank" rel="noopener">http://chromedriver.storage.googleapis.com/index.html</a></em></li><li><em><a href="https://npm.taobao.org/mirrors/chromedriver/" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/chromedriver/</a></em></li></ol><p>解压压缩包，找到chromedriver.exe复制到chrome的安装目录（其实也可以随便放一个文件夹）。复制chromedriver.exe文件的路径并加入到电脑的环境变量中去（不添加也行，得记住路径）。具体的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/16/GyaXmnPUofhQADH.png" alt="image-20200407175944138" title="">                </div>                <div class="image-caption">image-20200407175944138</div>            </figure><p>进入环境变量编辑界面，添加到用户变量即可，双击PATH，将你的文件位置（C:\Program Files (x86)\Google\Chrome\Application）添加到后面。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/16/lu5rDegSPIMab7z.png" alt="image-20200407180622270" title="">                </div>                <div class="image-caption">image-20200407180622270</div>            </figure><p>打开cmd，输入<code>chromedriver</code>监测是否安装成功。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/16/DTX7oHsF2xLNVR1.png" alt="image-20200407180356103" title="">                </div>                <div class="image-caption">image-20200407180356103</div>            </figure><h5 id="2-3-配置"><a href="#2-3-配置" class="headerlink" title="2.3 配置"></a>2.3 配置</h5><ol><li><p>将settings.py中的<code>DOWNLOADER_MIDDLEWARES</code>解除注释。</p><p><img src="https://i.loli.net/2020/06/16/3LgwAxkH9WmCSqZ.png" alt="image-20200407233740811"></p></li><li><p>在middlewares.py导入将需要的包并且设置变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> HtmlResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line">driver = webdriver.Chrome(<span class="string">"C:\Program Files (x86)\Google\Chrome\Application\chromedriver.exe"</span>,chrome_options=chrome_options)</span><br></pre></td></tr></table></figure></li><li><p>在middlewares.py找到相应的middleware的类中的<code>process_request</code>函数，函数中添加以下代码，代码块如图。其中起关键作用的是<code>time.sleep(10)</code>，意思是延迟多长时间。延迟后再返回current.url和body。<em>本例中类名为<code>MyCrowlersDownloaderMiddleware</code>，具体类名会根据项目名变化。</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    driver.get(request.url)</span><br><span class="line"><span class="keyword">except</span> TimeoutException:</span><br><span class="line">    print(<span class="string">'超时，丢弃本页'</span>, request.url)</span><br><span class="line">    driver.execute_script(<span class="string">'window.stop()'</span>)</span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">return</span> HtmlResponse(url=driver.current_url, body=driver.page_source, encoding=<span class="string">"utf-8"</span>,request=request)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/06/16/TbJoWKl4Mye1PjI.png" alt="image-20200407235207035"></p></li></ol><h5 id="2-4-滚动加载配置（这部分好像有问题）"><a href="#2-4-滚动加载配置（这部分好像有问题）" class="headerlink" title="2.4 滚动加载配置（这部分好像有问题）"></a>2.4 滚动加载配置（这部分好像有问题）</h5><ol><li><p>在middlewares.py新导入一个包。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException</span><br></pre></td></tr></table></figure></li><li><p>在<code>process_request</code>函数中添加以下代码，代码块如图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    spider.browser.get(request.url)</span><br><span class="line">    spider.browser.execute_script(<span class="string">'window.scrollTo(0, document.body.scrollHeight)'</span>)</span><br><span class="line"><span class="keyword">except</span> TimeoutException <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'超时'</span>)</span><br><span class="line">    spider.browser.execute_script(<span class="string">'window.stop()'</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span> HtmlResponse(url=spider.browser.current_url, body=spider.browser.page_source, encoding=<span class="string">"utf-8"</span>,request=request)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/06/16/z1SwWC2ctujKXY5.png" alt="image-20200407235904011.png"></p></li></ol><h3 id="四、保存数据"><a href="#四、保存数据" class="headerlink" title="四、保存数据"></a>四、保存数据</h3><p>共使用三种保存方法，一种是保存为json文件，一种是直接保存到es中。</p><h4 id="1-保存至json"><a href="#1-保存至json" class="headerlink" title="1. 保存至json"></a>1. 保存至json</h4><ol><li><p>在piplines.py中添加如下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScrapyCodePipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        <span class="comment"># print('pipeline got item:',item)</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scrapy.exporters <span class="keyword">import</span> JsonItemExporter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsonExporterPipleline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 调用scrapy提供的json export导出json文件</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.file = open(<span class="string">'export.json'</span>, <span class="string">'wb'</span>)</span><br><span class="line">        self.exporter = JsonItemExporter(self.file, encoding=<span class="string">"utf-8"</span>, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">        self.exporter.start_exporting()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.exporter.finish_exporting()</span><br><span class="line">        self.file.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        self.exporter.export_item(item)</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure></li><li><p>在settings.py中找到<code>ITEM_PIPELINES</code>，改成如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;<span class="comment"># item处理方式</span></span><br><span class="line">   <span class="comment"># 'scrapy_code.pipelines.ScrapyCodePipeline': 300,</span></span><br><span class="line">   <span class="string">'scrapy_code.pipelines.JsonExporterPipleline'</span>: <span class="number">300</span>,</span><br><span class="line">   <span class="comment"># 'scrapy_code.pipelines.MysqlTwistedPipline': 300,</span></span><br><span class="line">   <span class="comment"># 'scrapy_code.pipelines.ElasticsearchPipeline': 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-保存至es中"><a href="#2-保存至es中" class="headerlink" title="2. 保存至es中"></a>2. 保存至es中</h4><ol><li><p>在piplines.py的同级文件夹下建立Python Package，取名为models，在models下建立es_types.py。目录结构如下：</p><ul><li>models:<ul><li>_<em>init_</em>.py</li><li>es_types.py</li></ul></li><li>piplines.py</li></ul></li><li><p>在es_types.py中写入如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># elasticsearch_dsl：https://elasticsearch-dsl.readthedocs.io/en/latest/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> elasticsearch_dsl <span class="keyword">import</span> DocType, Date, Completion, Keyword, Text, Integer</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> elasticsearch_dsl.analysis <span class="keyword">import</span> CustomAnalyzer</span><br><span class="line"></span><br><span class="line"><span class="comment">#需要在es中安装ik分词器</span></span><br><span class="line">ik_analyzer = CustomAnalyzer(<span class="string">"ik_max_word"</span>, filter=[<span class="string">"lowercase"</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> elasticsearch_dsl.connections <span class="keyword">import</span> connections</span><br><span class="line"></span><br><span class="line">es=connections.create_connection(host=<span class="string">"127.0.0.1"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">jobType</span><span class="params">(DocType)</span>:</span></span><br><span class="line">    <span class="comment"># 设置index名称和document名称</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Index</span>:</span></span><br><span class="line">        name = <span class="string">"51job"</span></span><br><span class="line">        doc_type = <span class="string">"_doc"</span></span><br><span class="line">        <span class="comment"># settings = &#123;</span></span><br><span class="line">        <span class="comment">#   "number_of_shards": 2,</span></span><br><span class="line">        <span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span>fileds定义</span></span><br><span class="line">    url = Keyword()  <span class="comment"># 不分词，默认保留256个字符</span></span><br><span class="line">    job_name = Text(</span><br><span class="line">        analyzer=<span class="string">"ik_max_word"</span>)  <span class="comment"># “中华人民共和国国歌”拆分为“中华人民共和国,中华人民,中华,华人,人民共和国,人民,人,民,共和国,共和,和,国国,国歌”，会穷尽各种可能的组合；</span></span><br><span class="line">    salary = Text(analyzer=<span class="string">"ik_smart"</span>)  <span class="comment"># 将“中华人民共和国国歌”拆分为“中华人民共和国,国歌”将“中华人民共和国国歌”拆分为“中华人民共和国,国歌”</span></span><br><span class="line">    company = Text(analyzer=<span class="string">"ik_max_word"</span>)</span><br><span class="line">    job_position = Text(analyzer=<span class="string">"ik_max_word"</span>)</span><br><span class="line">    experience = Text(analyzer=<span class="string">"ik_max_word"</span>)</span><br><span class="line">    education = Text(analyzer=<span class="string">"ik_max_word"</span>)</span><br><span class="line">    number_of_people = Integer()</span><br><span class="line">    published_time = Date()</span><br><span class="line">    position_detail = Text(analyzer=<span class="string">"ik_smart"</span>)</span><br><span class="line">    position_type = Text(analyzer=<span class="string">"ik_max_word"</span>)</span><br><span class="line">    location = Text(analyzer=<span class="string">"ik_max_word"</span>)</span><br><span class="line">    company_detail = Text(analyzer=<span class="string">"ik_max_word"</span>)</span><br><span class="line"></span><br><span class="line">    suggest = Completion(analyzer=ik_analyzer)  <span class="comment"># 搜索建议</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,item)</span>:</span></span><br><span class="line">        super(jobType, self).__init__()<span class="comment">#调一下父类的init，避免init重写导致一些init操作没执行</span></span><br><span class="line">        self.assignment(item)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span>将item转换为es的数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">assignment</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="comment"># TODO：给没爬到的字段赋默认值：空串</span></span><br><span class="line">        keys = [<span class="string">'url'</span>, <span class="string">'job_name'</span>, <span class="string">'salary'</span>, <span class="string">'company'</span>, <span class="string">'job_position'</span>, <span class="string">'experience'</span>, <span class="string">'education'</span>, <span class="string">'number_of_people'</span>,</span><br><span class="line">                <span class="string">'published_time'</span>, <span class="string">'position_detail'</span>, <span class="string">'position_type'</span>, <span class="string">'location'</span>, <span class="string">'company_detail'</span>]</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> keys:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                item[key]</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                item[key] = <span class="string">''</span></span><br><span class="line">        <span class="comment"># TODO：将字段值转换为es的数据</span></span><br><span class="line">        <span class="comment"># 虽然只是将原来的item值赋给了成员变量，但这个过程中会执行数据格式转换操作，比如url本来在item是python的字符串类型，转换后变为es的keyword类型</span></span><br><span class="line">        self.url = item[<span class="string">'url'</span>]</span><br><span class="line">        self.job_name = item[<span class="string">'job_name'</span>]</span><br><span class="line">        self.salary = item[<span class="string">'salary'</span>]</span><br><span class="line">        self.company = item[<span class="string">'company'</span>]</span><br><span class="line">        self.job_position = item[<span class="string">'job_position'</span>]</span><br><span class="line">        self.experience = item[<span class="string">'experience'</span>]</span><br><span class="line">        self.education = item[<span class="string">'education'</span>]</span><br><span class="line">        self.number_of_people = item[<span class="string">'number_of_people'</span>]</span><br><span class="line">        self.published_time = item[<span class="string">'published_time'</span>]</span><br><span class="line">        self.position_detail = item[<span class="string">'position_detail'</span>]</span><br><span class="line">        self.position_type = item[<span class="string">'position_type'</span>]</span><br><span class="line">        self.location = item[<span class="string">'location'</span>]</span><br><span class="line">        self.company_detail = item[<span class="string">'company_detail'</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># # 或者简化代码为</span></span><br><span class="line">        <span class="comment"># for key in keys:</span></span><br><span class="line">        <span class="comment">#     vars(self)[key]=item[key]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># TODO：生成搜索建议词</span></span><br><span class="line">        self.suggest = self.gen_suggests(((self.job_name, <span class="number">10</span>), (self.company, <span class="number">3</span>), (self.position_type, <span class="number">7</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_suggests</span><span class="params">(self, info_tuple)</span>:</span></span><br><span class="line">        <span class="comment"># 根据字符串生成搜索建议数组</span></span><br><span class="line">        used_words = set()  <span class="comment"># set为去重功能</span></span><br><span class="line">        suggests = []</span><br><span class="line">        <span class="keyword">for</span> text, weight <span class="keyword">in</span> info_tuple:</span><br><span class="line">            <span class="keyword">if</span> text:</span><br><span class="line">                <span class="comment"># 字符串不为空时，调用elasticsearch的analyze接口分析字符串（分词、大小写转换）</span></span><br><span class="line">                words = es.indices.analyze(body=&#123;<span class="string">'text'</span>: text, <span class="string">'analyzer'</span>: <span class="string">"ik_max_word"</span>&#125;)</span><br><span class="line">                <span class="comment"># anylyzed_words = set([r["token"] for r in words["tokens"] if len(r["token"]) &gt; 1])</span></span><br><span class="line">                analyzed_words = []</span><br><span class="line">                <span class="keyword">for</span> r <span class="keyword">in</span> words[<span class="string">"tokens"</span>]:</span><br><span class="line">                    <span class="keyword">if</span> len(r[<span class="string">"tokens"</span>]) &gt; <span class="number">1</span>:</span><br><span class="line">                        analyzed_words.append(r[<span class="string">"tokens"</span>])</span><br><span class="line">                anylyzed_words = set(analyzed_words)</span><br><span class="line"></span><br><span class="line">                new_words = anylyzed_words - used_words</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                new_words = set()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> new_words:</span><br><span class="line">                suggests.append(&#123;<span class="string">'input'</span>: list(new_words), <span class="string">'weight'</span>: weight&#125;)</span><br><span class="line">        <span class="keyword">return</span> suggests</span><br></pre></td></tr></table></figure></li><li><p>在piplines.py中添加如下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .models.es_types <span class="keyword">import</span> jobType</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElasticsearchPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        job = jobType(item)<span class="comment"># 将item转换为es所需格式</span></span><br><span class="line">        <span class="comment"># 将数据传入es</span></span><br><span class="line">        <span class="comment"># jobType继承自DocType，所以DocType有的函数，它都有。</span></span><br><span class="line">        <span class="comment"># save就是DocType定义的将类中的各成员变量打包成数据插入操作，进行数据插入的函数</span></span><br><span class="line">        job.save()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#仍返回item，使得运行窗口能看到爬到的数据</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure></li><li><p>在settings.py中找到<code>ITEM_PIPELINES</code>，改成如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;<span class="comment"># item处理方式</span></span><br><span class="line">   <span class="comment"># 'scrapy_code.pipelines.ScrapyCodePipeline': 300,</span></span><br><span class="line">   <span class="comment"># 'scrapy_code.pipelines.JsonExporterPipleline': 300,</span></span><br><span class="line">   <span class="comment"># 'scrapy_code.pipelines.MysqlTwistedPipline': 300,</span></span><br><span class="line">    <span class="string">'scrapy_code.pipelines.ElasticsearchPipeline'</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;学习了一下scrapy爬虫，记录一下过程。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="scrapy" scheme="http://yoursite.com/categories/scrapy/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="scrapy" scheme="http://yoursite.com/tags/scrapy/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>何小智の博客</title>
  
  <subtitle>时间是人类发展的空间。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-10-16T05:35:38.937Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>RenKeXZ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>typora主题</title>
    <link href="http://yoursite.com/2020/10/16/typora%E4%B8%BB%E9%A2%98/"/>
    <id>http://yoursite.com/2020/10/16/typora%E4%B8%BB%E9%A2%98/</id>
    <published>2020-10-15T16:00:00.000Z</published>
    <updated>2020-10-16T05:35:38.937Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一直在用flora这款主题，碰巧看到原主题github上有人发了<a href="https://github.com/wnanbei/typora-theme-flora/issues/4" target="_blank" rel="noopener">issue</a>求黑色主题，下手改了一个。改完发现原主题有<a href="https://github.com/wnanbei/typora-theme-flora/issues/3" target="_blank" rel="noopener">bug</a>，也一并解决了。</p></blockquote><a id="more"></a><p><strong>主题下载地址</strong>：<a href="https://github.com/HeXueZhi/typora-theme-FloraDark" target="_blank" rel="noopener">https://github.com/HeXueZhi/typora-theme-FloraDark</a><br><strong>如果可以的话请帮忙给个star，谢谢</strong></p><p><strong>声明</strong>：本主题是在<a href="https://github.com/wnanbei/typora-theme-flora" target="_blank" rel="noopener">typora-theme-flora</a>主题基础上做的修改，在此感谢原作者<a href="https://github.com/wnanbei" target="_blank" rel="noopener">wnanbei</a>。</p><p><strong>由来</strong>：一直在用flora这款主题，碰巧看到原主题github上有人发了<a href="https://github.com/wnanbei/typora-theme-flora/issues/4" target="_blank" rel="noopener">issue</a>求黑色主题，下手改了一个。改完发现原主题有<a href="https://github.com/wnanbei/typora-theme-flora/issues/3" target="_blank" rel="noopener">bug</a>，也一并解决了。所以本主题可以放心使用。</p><p><strong>相比原主题的变动</strong>：</p><ol><li>调大了字体，以及适配各种小符号。</li><li>修改了原主题的代码样式，以及一些代码选择、光标所在行背景颜色，语言选择。（原主题代码中会出现大片红色，显得很乱）</li><li>修改表格，增加分割线及表头深色显示。</li><li>在此基础上增加了黑色主题并修复了bug。</li></ol><h3 id="Dark-Preview"><a href="#Dark-Preview" class="headerlink" title="Dark Preview"></a>Dark Preview</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/10/16/KDJnT8VZo9R4PkX.png" alt="QQ截图20201013225453" title="">                </div>                <div class="image-caption">QQ截图20201013225453</div>            </figure><h3 id="Light-Preview"><a href="#Light-Preview" class="headerlink" title="Light Preview"></a>Light Preview</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/10/16/Ca75pbMrGUqdnVX.png" alt="QQ截图20201009130648" title="">                </div>                <div class="image-caption">QQ截图20201009130648</div>            </figure><h3 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h3><ol><li>通过Typora的<strong>设置-&gt;主题-&gt;打开主题文件夹</strong>，来打开文件夹。</li><li>将<code>flora文件夹</code>、<code>flora-hans.css</code>以及<code>flora-dark.css</code>复制到typora的主题文件夹下。</li><li>重启Typora，再次进入<strong>设置-&gt;主题</strong>，就可以选择新的FloraDark主题了。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一直在用flora这款主题，碰巧看到原主题github上有人发了&lt;a href=&quot;https://github.com/wnanbei/typora-theme-flora/issues/4&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;issue&lt;/a&gt;求黑色主题，下手改了一个。改完发现原主题有&lt;a href=&quot;https://github.com/wnanbei/typora-theme-flora/issues/3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bug&lt;/a&gt;，也一并解决了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="typora" scheme="http://yoursite.com/categories/typora/"/>
    
    
  </entry>
  
  <entry>
    <title>01背包问题</title>
    <link href="http://yoursite.com/2020/10/12/01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2020/10/12/01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</id>
    <published>2020-10-11T16:00:00.000Z</published>
    <updated>2020-10-12T17:04:01.542Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在LeetCode上看到大神总结的01背包问题。</p></blockquote><a id="more"></a><p>原链接：<a href="https://leetcode-cn.com/problems/combination-sum-iv/solution/xi-wang-yong-yi-chong-gui-lu-gao-ding-bei-bao-wen-/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/combination-sum-iv/solution/xi-wang-yong-yi-chong-gui-lu-gao-ding-bei-bao-wen-/</a></p><h3 id="一、背包问题分类"><a href="#一、背包问题分类" class="headerlink" title="一、背包问题分类"></a>一、背包问题分类</h3><h4 id="1-组合问题"><a href="#1-组合问题" class="headerlink" title="1 组合问题"></a>1 组合问题</h4><p><a href="https://leetcode-cn.com/problems/combination-sum-iv/description/" target="_blank" rel="noopener">377.组合总和Ⅳ</a></p><p><a href="https://leetcode-cn.com/problems/target-sum/description/" target="_blank" rel="noopener">494.目标和</a></p><p><a href="https://leetcode-cn.com/problems/coin-change-2/description/" target="_blank" rel="noopener">518.零钱兑换 II</a></p><h4 id="2-True、False问题。"><a href="#2-True、False问题。" class="headerlink" title="2 True、False问题。"></a>2 True、False问题。</h4><p><a href="https://leetcode-cn.com/problems/word-break/" target="_blank" rel="noopener">139.单词拆分</a></p><p><a href="https://leetcode-cn.com/problems/partition-equal-subset-sum/" target="_blank" rel="noopener">416.分割等和子集</a></p><h4 id="3-最大最小问题"><a href="#3-最大最小问题" class="headerlink" title="3 最大最小问题"></a>3 最大最小问题</h4><p><a href="https://leetcode-cn.com/problems/ones-and-zeroes/description/" target="_blank" rel="noopener">474.一和零</a></p><p><a href="https://leetcode-cn.com/problems/coin-change/description/" target="_blank" rel="noopener">322.零钱兑换</a></p><h3 id="二、背包问题状态转移公式"><a href="#二、背包问题状态转移公式" class="headerlink" title="二、背包问题状态转移公式"></a>二、背包问题状态转移公式</h3><h4 id="1-组合问题公式"><a href="#1-组合问题公式" class="headerlink" title="1 组合问题公式"></a>1 组合问题公式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i] +&#x3D; dp[i-num]</span><br></pre></td></tr></table></figure><h4 id="2-True、False问题公式"><a href="#2-True、False问题公式" class="headerlink" title="2 True、False问题公式"></a>2 True、False问题公式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i] &#x3D; dp[i] or dp[i-num]</span><br></pre></td></tr></table></figure><h4 id="3-最大最小问题公式"><a href="#3-最大最小问题公式" class="headerlink" title="3 最大最小问题公式"></a>3 最大最小问题公式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dp[i] &#x3D; min(dp[i], dp[i-num]+1)或者dp[i] &#x3D; max(dp[i], dp[i-num]+1)</span><br></pre></td></tr></table></figure><h3 id="三、解题步骤"><a href="#三、解题步骤" class="headerlink" title="三、解题步骤"></a>三、解题步骤</h3><ol><li>分析是否为背包问题。</li><li>是以上三种背包问题中的哪一种。</li><li>是0-1背包问题还是完全背包问题。也就是题目给的nums数组中的元素是否可以重复使用。</li><li>如果是组合问题，是否需要考虑元素之间的顺序。需要考虑顺序有顺序的解法，不需要考虑顺序又有对应的解法。</li></ol><h3 id="四、背包问题的判定"><a href="#四、背包问题的判定" class="headerlink" title="四、背包问题的判定"></a>四、背包问题的判定</h3><p><strong>背包问题具备的特征</strong>：</p><p>给定一个target，target可以是数字也可以是字符串，再给定一个数组nums，nums中装的可能是数字，也可能是字符串，问：能否使用nums中的元素做各种排列组合得到target。</p><p><strong>背包问题技巧</strong>：</p><ol><li>如果是0-1背包，即数组中的元素不可重复使用，nums放在外循环，target在内循环，且内循环倒序；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> num in nums:</span><br><span class="line">    <span class="function"><span class="keyword">for</span> i in <span class="title">range</span><span class="params">(target, nums<span class="number">-1</span>, <span class="number">-1</span>)</span>:</span></span><br></pre></td></tr></table></figure><ol start="2"><li>如果是完全背包，即数组中的元素可重复使用，nums放在外循环，target在内循环。且内循环正序。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> num in nums:</span><br><span class="line">    <span class="function"><span class="keyword">for</span> i in <span class="title">range</span><span class="params">(nums, target+<span class="number">1</span>)</span>:</span></span><br></pre></td></tr></table></figure><ol start="3"><li>如果组合问题需考虑元素之间的顺序，需将target放在外循环，将nums放在内循环。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">for</span> i in <span class="title">range</span><span class="params">(<span class="number">1</span>, target+<span class="number">1</span>)</span>:</span></span><br><span class="line"><span class="function">    <span class="keyword">for</span> num in nums:</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在LeetCode上看到大神总结的01背包问题。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="01背包问题" scheme="http://yoursite.com/tags/01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Java刷题笔记</title>
    <link href="http://yoursite.com/2020/09/24/java%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/09/24/java%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</id>
    <published>2020-09-23T16:00:00.000Z</published>
    <updated>2020-10-12T16:49:46.591Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>想把自己刷题过程中一些，使用经典方法、思想的题记录下来。</p></blockquote><a id="more"></a><h2 id="一、集合"><a href="#一、集合" class="headerlink" title="一、集合"></a>一、集合</h2><h3 id="1-数组"><a href="#1-数组" class="headerlink" title="1 数组"></a>1 数组</h3><h4 id="1-1-新建数组"><a href="#1-1-新建数组" class="headerlink" title="1.1 新建数组"></a>1.1 新建数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br></pre></td></tr></table></figure><h4 id="1-2-数组大小"><a href="#1-2-数组大小" class="headerlink" title="1.2 数组大小"></a>1.2 数组大小</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.length</span><br></pre></td></tr></table></figure><h3 id="2-List"><a href="#2-List" class="headerlink" title="2 List"></a>2 List</h3><h4 id="2-1-新建List"><a href="#2-1-新建List" class="headerlink" title="2.1 新建List"></a>2.1 新建List</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; nums = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><h4 id="2-2-添加元素"><a href="#2-2-添加元素" class="headerlink" title="2.2 添加元素"></a>2.2 添加元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nums.add(<span class="number">3</span>);<span class="comment">//尾部添加3</span></span><br><span class="line">nums.add(<span class="number">0</span>,<span class="number">3</span>);<span class="comment">//index=0处，添加3</span></span><br></pre></td></tr></table></figure><h4 id="2-3-获取元素"><a href="#2-3-获取元素" class="headerlink" title="2.3 获取元素"></a>2.3 获取元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = nums.get(<span class="number">0</span>);<span class="comment">//index</span></span><br></pre></td></tr></table></figure><h4 id="2-4-删除元素"><a href="#2-4-删除元素" class="headerlink" title="2.4 删除元素"></a>2.4 删除元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums.remove(<span class="number">0</span>);<span class="comment">//删除第一个元素</span></span><br></pre></td></tr></table></figure><h4 id="2-5-是否为空"><a href="#2-5-是否为空" class="headerlink" title="2.5 是否为空"></a>2.5 是否为空</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums.isEmpty()</span><br></pre></td></tr></table></figure><h4 id="2-6-是否包含元素"><a href="#2-6-是否包含元素" class="headerlink" title="2.6 是否包含元素"></a>2.6 是否包含元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums.contains(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h4 id="2-7-列表长度"><a href="#2-7-列表长度" class="headerlink" title="2.7 列表长度"></a>2.7 列表长度</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums.size()</span><br></pre></td></tr></table></figure><h4 id="2-8-清空列表"><a href="#2-8-清空列表" class="headerlink" title="2.8 清空列表"></a>2.8 清空列表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums.clear()</span><br></pre></td></tr></table></figure><h3 id="3-Set"><a href="#3-Set" class="headerlink" title="3 Set"></a>3 Set</h3><h4 id="3-1-新建集合"><a href="#3-1-新建集合" class="headerlink" title="3.1 新建集合"></a>3.1 新建集合</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br></pre></td></tr></table></figure><h4 id="3-1-添加元素"><a href="#3-1-添加元素" class="headerlink" title="3.1 添加元素"></a>3.1 添加元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set.add(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h4 id="3-2-删除元素"><a href="#3-2-删除元素" class="headerlink" title="3.2 删除元素"></a>3.2 删除元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set.remove(<span class="number">2</span>);<span class="comment">//这里只能删除元素，无index</span></span><br></pre></td></tr></table></figure><h4 id="3-3-是否包含"><a href="#3-3-是否包含" class="headerlink" title="3.3 是否包含"></a>3.3 是否包含</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set.contains(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><h3 id="3-HashMap"><a href="#3-HashMap" class="headerlink" title="3 HashMap"></a>3 HashMap</h3><h4 id="3-1-新建HashMap"><a href="#3-1-新建HashMap" class="headerlink" title="3.1 新建HashMap"></a>3.1 新建HashMap</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br></pre></td></tr></table></figure><h4 id="3-2-添加键值对"><a href="#3-2-添加键值对" class="headerlink" title="3.2 添加键值对"></a>3.2 添加键值对</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.put(<span class="string">"zhang"</span>, <span class="string">"31"</span>);</span><br></pre></td></tr></table></figure><h4 id="3-3-获取键值对"><a href="#3-3-获取键值对" class="headerlink" title="3.3 获取键值对"></a>3.3 获取键值对</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.get(<span class="string">"zhang"</span>);</span><br></pre></td></tr></table></figure><h4 id="3-4-是否包含"><a href="#3-4-是否包含" class="headerlink" title="3.4 是否包含"></a>3.4 是否包含</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map.containsKey(<span class="string">"zhang"</span>);</span><br><span class="line">map.containsValue(<span class="string">"31"</span>);</span><br></pre></td></tr></table></figure><h4 id="3-5-删除键值对"><a href="#3-5-删除键值对" class="headerlink" title="3.5 删除键值对"></a>3.5 删除键值对</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map.remove(<span class="string">"zhang"</span>);</span><br><span class="line">map.remove(<span class="string">"zhang"</span>,<span class="string">"31"</span>);<span class="comment">//Removes the entry for the specified key only if it is currently mapped to the specified value.</span></span><br></pre></td></tr></table></figure><h4 id="3-6-返回key-Set"><a href="#3-6-返回key-Set" class="headerlink" title="3.6 返回key Set"></a>3.6 返回key Set</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.keySet();</span><br></pre></td></tr></table></figure><h4 id="3-7-返回value-Colleciton"><a href="#3-7-返回value-Colleciton" class="headerlink" title="3.7 返回value Colleciton"></a>3.7 返回value Colleciton</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.values();</span><br></pre></td></tr></table></figure><h4 id="3-8-遍历HashMap"><a href="#3-8-遍历HashMap" class="headerlink" title="3.8 遍历HashMap"></a>3.8 遍历HashMap</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line"><span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-Stack"><a href="#4-Stack" class="headerlink" title="4 Stack"></a>4 Stack</h3><p>官方不推荐使用Stack类，推荐使用<code>Deque</code>。</p><h4 id="4-1-新建栈"><a href="#4-1-新建栈" class="headerlink" title="4.1 新建栈"></a>4.1 新建栈</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br></pre></td></tr></table></figure><h4 id="4-2-添加元素"><a href="#4-2-添加元素" class="headerlink" title="4.2 添加元素"></a>4.2 添加元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stack.push(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h4 id="4-3-弹出元素"><a href="#4-3-弹出元素" class="headerlink" title="4.3 弹出元素"></a>4.3 弹出元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stack.pop();</span><br></pre></td></tr></table></figure><h4 id="4-4-获取栈顶元素"><a href="#4-4-获取栈顶元素" class="headerlink" title="4.4 获取栈顶元素"></a>4.4 获取栈顶元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stack.peek();</span><br></pre></td></tr></table></figure><h3 id="5-queue"><a href="#5-queue" class="headerlink" title="5 queue"></a>5 queue</h3><h4 id="5-1-新建队列"><a href="#5-1-新建队列" class="headerlink" title="5.1 新建队列"></a>5.1 新建队列</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayDeque&lt;Integer&gt; deque = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br></pre></td></tr></table></figure><h4 id="5-2-添加元素"><a href="#5-2-添加元素" class="headerlink" title="5.2 添加元素"></a>5.2 添加元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deque.add(<span class="number">3</span>);<span class="comment">//尾部添加3</span></span><br><span class="line">deque.addFirst(<span class="number">3</span>);<span class="comment">//头部添加3</span></span><br></pre></td></tr></table></figure><h4 id="5-3-获取元素"><a href="#5-3-获取元素" class="headerlink" title="5.3 获取元素"></a>5.3 获取元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">duque.getFirst();</span><br><span class="line">deque.getLast();</span><br></pre></td></tr></table></figure><h4 id="5-4-获取并删除"><a href="#5-4-获取并删除" class="headerlink" title="5.4 获取并删除"></a>5.4 获取并删除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deque.pollFirst();<span class="comment">//出队</span></span><br><span class="line">deque.pollLast();<span class="comment">//弹栈</span></span><br></pre></td></tr></table></figure><h3 id="6-PriorityQueue"><a href="#6-PriorityQueue" class="headerlink" title="6 PriorityQueue"></a>6 PriorityQueue</h3><h4 id="6-1-新建堆"><a href="#6-1-新建堆" class="headerlink" title="6.1 新建堆"></a>6.1 新建堆</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PriorityQueue&lt;Integer&gt; pq = <span class="keyword">new</span> PriorityQueue&lt;&gt;();</span><br></pre></td></tr></table></figure><h4 id="6-2-添加元素"><a href="#6-2-添加元素" class="headerlink" title="6.2 添加元素"></a>6.2 添加元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pq.add(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h4 id="6-3-获取元素"><a href="#6-3-获取元素" class="headerlink" title="6.3 获取元素"></a>6.3 获取元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pq.peek();<span class="comment">//不删除元素</span></span><br><span class="line">pq.poll();<span class="comment">//删除元素</span></span><br></pre></td></tr></table></figure><h4 id="6-4-删除元素"><a href="#6-4-删除元素" class="headerlink" title="6.4 删除元素"></a>6.4 删除元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pq.remove(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h4 id="6-5-转为数组"><a href="#6-5-转为数组" class="headerlink" title="6.5 转为数组"></a>6.5 转为数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pq.toArray();</span><br></pre></td></tr></table></figure><h3 id="7-Deque"><a href="#7-Deque" class="headerlink" title="7 Deque"></a>7 Deque</h3><p>双端队列，控制每一端元素的进出，可以实现栈或者队列。</p><h4 id="7-1-实例化"><a href="#7-1-实例化" class="headerlink" title="7.1 实例化"></a>7.1 实例化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Deque&lt;Integer&gt; deque = mew ArrayDeque&lt;&gt;();</span><br><span class="line">Deque&lt;Integer&gt; deque = enw LinkedList&lt;&gt;();</span><br></pre></td></tr></table></figure><h4 id="7-2-添加元素到队尾"><a href="#7-2-添加元素到队尾" class="headerlink" title="7.2 添加元素到队尾"></a>7.2 添加元素到队尾</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">addLast(E e) </span><br><span class="line">offerLast(E e)</span><br></pre></td></tr></table></figure><h4 id="7-3-取队尾元素并删除"><a href="#7-3-取队尾元素并删除" class="headerlink" title="7.3 取队尾元素并删除"></a>7.3 取队尾元素并删除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">E <span class="title">removeLast</span><span class="params">()</span></span></span><br><span class="line"><span class="function">E <span class="title">pollLast</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h4 id="7-4-取队尾元素并不删除"><a href="#7-4-取队尾元素并不删除" class="headerlink" title="7.4 取队尾元素并不删除"></a>7.4 取队尾元素并不删除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">E <span class="title">getLast</span><span class="params">()</span></span></span><br><span class="line"><span class="function">E <span class="title">peekLast</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h4 id="7-5-添加元素到队首"><a href="#7-5-添加元素到队首" class="headerlink" title="7.5 添加元素到队首"></a>7.5 添加元素到队首</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">addFirst(E e)</span><br><span class="line">offerFirst(E e)</span><br></pre></td></tr></table></figure><h4 id="7-6-取队首元素并删除"><a href="#7-6-取队首元素并删除" class="headerlink" title="7.6 取队首元素并删除"></a>7.6 取队首元素并删除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">E <span class="title">removeFirst</span><span class="params">()</span></span></span><br><span class="line"><span class="function">E <span class="title">pollFirst</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h4 id="7-7-取队首元素并不删除"><a href="#7-7-取队首元素并不删除" class="headerlink" title="7.7 取队首元素并不删除"></a>7.7 取队首元素并不删除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">E <span class="title">getFirst</span><span class="params">()</span></span></span><br><span class="line"><span class="function">E <span class="title">peekFirst</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h2 id="二、杂项"><a href="#二、杂项" class="headerlink" title="二、杂项"></a>二、杂项</h2><h3 id="1-三元运算符"><a href="#1-三元运算符" class="headerlink" title="1 三元运算符"></a>1 三元运算符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = node==<span class="keyword">null</span> ? <span class="number">0</span> : node.val;</span><br></pre></td></tr></table></figure><h3 id="2-Math"><a href="#2-Math" class="headerlink" title="2 Math"></a>2 Math</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = Math.max(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">int</span> a = Math.sqrt(<span class="number">4</span>);<span class="comment">//开根号</span></span><br><span class="line"><span class="keyword">int</span> a = Math.abs(-<span class="number">1</span>);<span class="comment">//取绝对值</span></span><br></pre></td></tr></table></figure><h3 id="3-最大值、最小值表示"><a href="#3-最大值、最小值表示" class="headerlink" title="3 最大值、最小值表示"></a>3 最大值、最小值表示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = Integer.MAX_VALUE</span><br><span class="line"><span class="keyword">int</span> b = Integer.MIN_VALUE</span><br></pre></td></tr></table></figure><h3 id="4-Arrays"><a href="#4-Arrays" class="headerlink" title="4 Arrays"></a>4 Arrays</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Arrays.sort(a);<span class="comment">//排序int[] a</span></span><br><span class="line">Arrays.fill(a,Integer.MAX_VALUE);<span class="comment">//快速向a中填充最大值</span></span><br></pre></td></tr></table></figure><h3 id="5-位运算"><a href="#5-位运算" class="headerlink" title="5 位运算"></a>5 位运算</h3><p><strong>位运算后，需要重新赋值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = a &amp; <span class="number">1</span>;<span class="comment">//判断a是不是基数</span></span><br><span class="line">a = a | <span class="number">1</span>;</span><br><span class="line">a = ~a;</span><br><span class="line">a = a ^ <span class="number">1</span>;<span class="comment">//异或运算</span></span><br><span class="line">a = a &lt;&lt; <span class="number">1</span>;<span class="comment">//左移一位</span></span><br><span class="line">a = a &gt;&gt; <span class="number">1</span>;<span class="comment">//右移一位</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;想把自己刷题过程中一些，使用经典方法、思想的题记录下来。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>oh-my-zsh安装及主题更换</title>
    <link href="http://yoursite.com/2020/09/14/%E5%AE%89%E8%A3%85ohmyzsh/"/>
    <id>http://yoursite.com/2020/09/14/%E5%AE%89%E8%A3%85ohmyzsh/</id>
    <published>2020-09-14T13:48:47.277Z</published>
    <updated>2020-09-27T11:35:34.977Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>折腾了一下自己的linux的shell，更换为oh-my-zsh，并更换主题,安装提示插件。</p></blockquote><a id="more"></a><p><strong>最终效果</strong>：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/09/21/KSrv5D4ZpIk8Y1c.png" alt="new UI" title="">                </div>                <div class="image-caption">new UI</div>            </figure><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum install git</span><br><span class="line">yum install zsh</span><br><span class="line"></span><br><span class="line"><span class="comment">#方案一：</span></span><br><span class="line">sh -c <span class="string">"<span class="variable">$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh --no-check-certificate -O -)</span>"</span></span><br><span class="line"><span class="comment">#方案二：（官方方案）</span></span><br><span class="line">sh -c <span class="string">"<span class="variable">$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure><h3 id="2-更换主题"><a href="#2-更换主题" class="headerlink" title="2 更换主题"></a>2 更换主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.oh-my-zsh/themes &amp;&amp; ls</span><br><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="comment">#ZSH_THEME="agnoster"</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><h3 id="3-安装插件（zsh-autosuggestions）"><a href="#3-安装插件（zsh-autosuggestions）" class="headerlink" title="3 安装插件（zsh-autosuggestions）"></a>3 安装插件（zsh-autosuggestions）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/zsh-users/zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span><br><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="comment">#将zsh-autosuggestions添加到plugins中</span></span><br><span class="line"><span class="comment">#plugins=(git zsh-autosuggestions)</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;折腾了一下自己的linux的shell，更换为oh-my-zsh，并更换主题,安装提示插件。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CentOS" scheme="http://yoursite.com/categories/CentOS/"/>
    
    
      <category term="oh-my-zsh" scheme="http://yoursite.com/tags/oh-my-zsh/"/>
    
  </entry>
  
  <entry>
    <title>获取用户任务列表报500BUG</title>
    <link href="http://yoursite.com/2020/09/04/%E7%94%A8%E6%88%B7%E4%BB%BB%E5%8A%A1%E5%88%97%E8%A1%A8%E6%8A%A5500BUG/"/>
    <id>http://yoursite.com/2020/09/04/%E7%94%A8%E6%88%B7%E4%BB%BB%E5%8A%A1%E5%88%97%E8%A1%A8%E6%8A%A5500BUG/</id>
    <published>2020-09-04T07:05:19.444Z</published>
    <updated>2020-09-05T08:57:25.003Z</updated>
    
    <content type="html"><![CDATA[<hr /><blockquote><p>公司人员报告了获取任务列表为500的bug，但是我们测试数据却能正常返回。玄学？NO!NO!NO!</p></blockquote><a id="more"></a><h3 id="BUG情况"><a href="#BUG情况" class="headerlink" title="BUG情况"></a>BUG情况</h3><p>公司人员报告了一个bug，获取我们用户任务列表的接口数据时会出现500的异常。但是经过我们自己测试没有发现问题。</p><p>几天后，公司人员又发来了截图，表示获取任务列表又出现了500异常。并且测试过后发现只有<code>userid</code>是6的才会出现500异常，其他<code>userid</code>不会出现，并且<code>userid</code>为6的用户调用这个接口，时而能够正常返回数据，时而又出现500bug。</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>经过查看项目log发现程序运行过程中出现了空指针异常。并且定位到相关的代码行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> sl = user.getFinishTime().getTime() - user.getCreateTime().getTime();</span><br></pre></td></tr></table></figure><p>（不要问为什么任务的变量名是<code>user</code>，我也不知道。。。）小伙伴写这段代码时是通过获取到任务的<code>finishTime</code>，再拿<code>finishTime</code>减去<code>createTime</code>。</p><p>初步猜想可能是新创建的任务没有finish，导致获取到的<code>finishTime</code>为<code>null</code>。因此引发空指针异常。</p><p>而当用户的任务完成时，<code>finishTime</code>被填上，再获取任务列表时，又可以正常获取到数据。</p><p>又因为公司那边测试一直用的是同一个用户id（6），所以每次创建任务之后获取任务列表，显示是500.其他用户id并没有运行任务，所以表象是只有<code>userid</code>为6的用户才会发生异常。</p><p>进一步查看log，佐证了自己的猜想。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/09/04/MFgUWpX9ZlRJbIH.png" alt="500bug" title="">                </div>                <div class="image-caption">500bug</div>            </figure><p>log显示在查询用户列表之前，用户新创建了一个任务。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>虽问题不是什么大问题，代码也不是自己写的，但有两点须引以为戒。</p><ol><li>变量名的规范：任务记录的对象，命名为<code>user</code>，让我在定位bug的时候，理解代码出现了偏差。所以变量命名规范，有助于对代码快速的理解，从而能够更快的定位bug。</li><li>注释：太重要了！！！如果不写注释，等出现bug再定位的时候，再次读即使是自己写的代码，也会耗费些时间来理解。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;公司人员报告了获取任务列表为500的bug，但是我们测试数据却能正常返回。玄学？NO!NO!NO!&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="bug" scheme="http://yoursite.com/categories/bug/"/>
    
    
      <category term="bug" scheme="http://yoursite.com/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>docker部署nginx+tomcat</title>
    <link href="http://yoursite.com/2020/09/03/docker%E9%83%A8%E7%BD%B2nginx+tomcat/"/>
    <id>http://yoursite.com/2020/09/03/docker%E9%83%A8%E7%BD%B2nginx+tomcat/</id>
    <published>2020-09-03T13:10:08.815Z</published>
    <updated>2020-09-05T12:33:38.941Z</updated>
    
    <content type="html"><![CDATA[<hr /><blockquote><p>以docker方式启动tomcat+nginx。</p></blockquote><a id="more"></a><h3 id="一、tomcat"><a href="#一、tomcat" class="headerlink" title="一、tomcat"></a>一、tomcat</h3><p>新建tomcat文件夹，可以放入自己的应用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir tomcat</span><br><span class="line"><span class="built_in">cd</span> tomcat</span><br><span class="line">mkdir app</span><br><span class="line"><span class="built_in">cd</span> app</span><br><span class="line">touch index.html</span><br><span class="line"><span class="built_in">echo</span> &lt;h1&gt;helloworld&lt;/h1&gt; &gt;index.html</span><br><span class="line"><span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure><p>拉取镜像，并建立开启容器(注意这里并不用开启8080端口映射)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull tomcat</span><br><span class="line">dockers run -id --name myTomcat -v <span class="variable">$PWD</span>:/usr/<span class="built_in">local</span>/tomcat/webapps tomcat</span><br></pre></td></tr></table></figure><p>查看容器ip：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect myTomcat | grep <span class="string">"IPAddress"</span></span><br></pre></td></tr></table></figure><p>假设这里查到的是<code>172.17.0.3</code></p><h3 id="二、nginx"><a href="#二、nginx" class="headerlink" title="二、nginx"></a>二、nginx</h3><p>首先服务器防火墙开启80端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>新建nginx文件夹，并新建<code>nginx.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir nginx</span><br><span class="line"><span class="built_in">cd</span> nginx</span><br><span class="line">touch nginx.conf</span><br><span class="line">vim nginx.comf</span><br></pre></td></tr></table></figure><p>填入<code>nginx.conf</code>的内容，注意http-&gt;server-&gt;location-&gt;proxy_pass。修改为上一步查到的<code>ip</code>。</p><p>注意：这里不能填入宿主机的ip。（因为tomcat默认并不是以host模式开启，而是以桥接模式开启）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">    <span class="comment">#                  '$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">    <span class="comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            proxy_pass http://172.17.0.3:8080;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拉取镜像，并建立开启容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br><span class="line">docker run -d --name myNginx -p 80:80 nginx</span><br></pre></td></tr></table></figure><p>将之前写的配置文件复制到容器中，并重启容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker cp nginx.conf  nginx:/etc/nginx/nginx.conf</span><br><span class="line">docker restart nginx</span><br></pre></td></tr></table></figure><h3 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h3><p>访问<code>http://服务器ip/app</code></p>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;以docker方式启动tomcat+nginx。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="以太坊" scheme="http://yoursite.com/categories/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="tomcat" scheme="http://yoursite.com/tags/tomcat/"/>
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>docker启动以太坊私链</title>
    <link href="http://yoursite.com/2020/09/01/docker%E5%90%AF%E5%8A%A8%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%A7%81%E9%93%BE/"/>
    <id>http://yoursite.com/2020/09/01/docker%E5%90%AF%E5%8A%A8%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%A7%81%E9%93%BE/</id>
    <published>2020-09-01T12:27:08.059Z</published>
    <updated>2020-10-08T16:26:39.888Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>以docker方式启动以太坊私链，并部署Dapp。</p></blockquote><a id="more"></a><h3 id="一、查看防火墙状态"><a href="#一、查看防火墙状态" class="headerlink" title="一、查看防火墙状态"></a>一、查看防火墙状态</h3><p>首先查看主机防火墙是否开启，如果已开启，需要开放<code>8545</code>端口，用于外界通过rpc方式访问私链。</p><p>查看防火墙状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld.service</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/09/01/wJPvbiOChzE9VGx.png" alt="防火墙状态" title="">                </div>                <div class="image-caption">防火墙状态</div>            </figure><p>开放方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8545/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="二、创建链码"><a href="#二、创建链码" class="headerlink" title="二、创建链码"></a>二、创建链码</h3><p>在workspace下，新建<code>/code/chain/mychain</code>文件夹，创建<code>genesis.json</code>。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/09/01/t9w182CRcK7DGpI.png" alt="路径" title="">                </div>                <div class="image-caption">路径</div>            </figure><p><strong>chainId：</strong>以太坊的链的id，可以自己随便取值，但是需要注意搭建私链时，这个值<strong>不能与以太坊主网或者是测试网的chainId相同</strong>。<a href="https://chainid.network/" target="_blank" rel="noopener">以太坊chainId查询</a></p><p>genesis.json：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;config&quot;: &#123;</span><br><span class="line">    &quot;chainId&quot;: 666,</span><br><span class="line">    &quot;homesteadBlock&quot;: 0,</span><br><span class="line">    &quot;eip150Block&quot;: 0,</span><br><span class="line">    &quot;eip150Hash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,</span><br><span class="line">    &quot;eip155Block&quot;: 0,</span><br><span class="line">    &quot;eip158Block&quot;: 0,</span><br><span class="line">    &quot;byzantiumBlock&quot;: 0,</span><br><span class="line">    &quot;constantinopleBlock&quot;: 0,</span><br><span class="line">    &quot;petersburgBlock&quot;: 0,</span><br><span class="line">    &quot;istanbulBlock&quot;: 0,</span><br><span class="line">    &quot;ethash&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;nonce&quot;: &quot;0x0&quot;,</span><br><span class="line">  &quot;timestamp&quot;: &quot;0x5ddf8f3e&quot;,</span><br><span class="line">  &quot;extraData&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,</span><br><span class="line">  &quot;gasLimit&quot;: &quot;0x47b760&quot;,</span><br><span class="line">  &quot;difficulty&quot;: &quot;0x00002&quot;,</span><br><span class="line">  &quot;mixHash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,</span><br><span class="line">  &quot;coinbase&quot;: &quot;0x0000000000000000000000000000000000000000&quot;,</span><br><span class="line">  &quot;alloc&quot;: &#123; &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;number&quot;: &quot;0x0&quot;,</span><br><span class="line">  &quot;gasUsed&quot;: &quot;0x0&quot;,</span><br><span class="line">  &quot;parentHash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、拉取image"><a href="#三、拉取image" class="headerlink" title="三、拉取image"></a>三、拉取image</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ethereum/client-go</span><br></pre></td></tr></table></figure><h3 id="四、创建容器"><a href="#四、创建容器" class="headerlink" title="四、创建容器"></a>四、创建容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --network=host --name mychain -v /workspace:/workspace --entrypoint /bin/sh ethereum/client-go</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">docker run -it --name mychain -p 8545:8545 -v /workspace:/workspace --entrypoint /bin/sh ethereum/client-go</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><code>-i</code>：打开STDIN，用于控制台交互，常与-t一起使用</li><li><code>-t</code>：分配tty设备，支持终端登陆，默认为false，常与-i一起使用</li><li><code>--network=host</code>：将容器的网络模式设置为host模式，即用宿主机的ip和端口进行外部通信</li><li><code>-p 8545:8545</code>：将宿主机的8545端口映射到dockers容器的8545端口上</li><li><code>--rm</code>：指定容器停止后自动删除容器（不支持以docker run -d启动的容器 ）</li><li><code>-v</code>：给容器挂载存储卷，挂载到容器的某个目录，这里讲本地的/workspace挂载到了容器的/workspace目录，用来在容器和宿主机之间共享文件</li><li><code>--entrypoint</code>：覆盖image的入口点，ubuntu环境下docker默认入口点其实是/bin/bash，修改默认入口点是为了不让节点自动运行，稍后会对节点进行自定义配置使其成为私有链节点</li></ul><p>此后启动容器就可以，直接通过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start -i mychain</span><br></pre></td></tr></table></figure><h3 id="五、启动私链"><a href="#五、启动私链" class="headerlink" title="五、启动私链"></a>五、启动私链</h3><p>经过上面的命令，此时命令行提示符已经转变。进入之前创建的<code>/workspace/code/chain/mychain</code>文件夹下，初始化链json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --datadir . init genesis.json</span><br></pre></td></tr></table></figure><p>启动私链，<code>networkid</code>和<code>rpcaddr</code>的设置方法同开发者模式。查看输出日志<code>output.log</code>同上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --datadir . --nodiscover --networkid 1234 --rpc --rpccorsdomain &quot;*&quot; --rpcaddr 0.0.0.0 --rpcport 8545 console --allow-insecure-unlock 2&gt;output.log</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>搭建私链后一定要进行以下测试，看是否能够正常发起交易。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;以docker方式启动以太坊私链，并部署Dapp。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="以太坊" scheme="http://yoursite.com/categories/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>以太坊合约交易inputData解码</title>
    <link href="http://yoursite.com/2020/09/01/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%90%88%E7%BA%A6%E4%BA%A4%E6%98%93inputData%E8%A7%A3%E7%A0%81/"/>
    <id>http://yoursite.com/2020/09/01/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%90%88%E7%BA%A6%E4%BA%A4%E6%98%93inputData%E8%A7%A3%E7%A0%81/</id>
    <published>2020-09-01T02:20:24.016Z</published>
    <updated>2020-09-05T12:37:10.138Z</updated>
    
    <content type="html"><![CDATA[<hr /><blockquote><p>以太坊每笔交易中都有InputData，本项目主要是识别合约交易中的InputData。</p></blockquote><a id="more"></a><h3 id="一、需求式例"><a href="#一、需求式例" class="headerlink" title="一、需求式例"></a>一、需求式例</h3><p>交易hash：<a href="https://cn.etherscan.com/tx/0xb1c0abd217193ffe64f97caedad8fa6f0f9c0265967d2ab9fb782280c928fb47" target="_blank" rel="noopener">0xb1c0abd217193ffe64f97caedad8fa6f0f9c0265967d2ab9fb782280c928fb47</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/09/01/zRVY1tOMWE37aqJ.png" alt="inputdata" title="">                </div>                <div class="image-caption">inputdata</div>            </figure><p>需要将交易中的数据解码为上图中的数据。</p><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><ol><li>先通过web3来取得交易中的<code>to</code>地址和<code>inputdata</code>。</li><li>将<code>to</code>地址传入erherScan的api获得合约的abi。</li><li>通过abi-decoder来解析inputdata。</li></ol><h3 id="三、具体实现"><a href="#三、具体实现" class="headerlink" title="三、具体实现"></a>三、具体实现</h3><p>项目地址：<a href="https://github.com/HeXueZhi/DecodeInputData" target="_blank" rel="noopener">https://github.com/HeXueZhi/DecodeInputData</a></p><p>整体通过webpack框架。<br>应用的包：<code>package.json</code>文件中的<code>dependencies</code></p><h4 id="3-1-实例化web3"><a href="#3-1-实例化web3" class="headerlink" title="3.1 实例化web3"></a>3.1 实例化web3</h4><p>在infura注册一个key，替换代码中的key。（<em>Infura</em>提供免费的以太坊节点RPC API服务）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> web3 !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        <span class="built_in">window</span>.web3 = <span class="keyword">new</span> Web3(web3.currentProvider);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> web3Provider;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>.ethereum) &#123;</span><br><span class="line">            web3Provider = <span class="built_in">window</span>.ethereum;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 请求用户授权</span></span><br><span class="line">                <span class="built_in">window</span>.ethereum.enable();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="comment">// 用户不授权时</span></span><br><span class="line">                <span class="built_in">console</span>.error(<span class="string">"User denied account access"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.web3) &#123;   <span class="comment">// 老版 MetaMask Legacy dapp browsers...</span></span><br><span class="line">            web3Provider = <span class="built_in">window</span>.web3.currentProvider;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            web3Provider = <span class="keyword">new</span> Web3.providers.HttpProvider(<span class="string">'https://mainnet.infura.io/v3/填入infura个人的key'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        web3 = <span class="keyword">new</span> Web3(web3Provider);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// App.start();</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-2-解析inputdata"><a href="#3-2-解析inputdata" class="headerlink" title="3.2 解析inputdata"></a>3.2 解析inputdata</h3><p>在etherscan注册apikey，替换代码中的。</p><p>如果不想注册删掉代码中的<code>&amp;apikey=填入etherscan的个人key</code>也可以，不过etherscan会添加每秒限制访问5次的限制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"./app.css"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> Web3&#125; <span class="keyword">from</span> <span class="string">'web3'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> web3;</span><br><span class="line"><span class="keyword">var</span> ABI;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fetch = <span class="built_in">require</span>(<span class="string">'node-fetch'</span>);</span><br><span class="line"><span class="comment">//通过fetch获取abi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> abiDecoder = <span class="built_in">require</span>(<span class="string">'abi-decoder'</span>); </span><br><span class="line"><span class="comment">// 通过abi解析inputdata</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.App = &#123;</span><br><span class="line">    getInputData: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"textArea"</span>).value = <span class="string">""</span>;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">"textArea2"</span>).value = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">var</span> TXHash = <span class="built_in">document</span>.getElementById(<span class="string">"TXHash"</span>).value;</span><br><span class="line">        <span class="keyword">if</span> (TXHash != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(TXHash);</span><br><span class="line">            <span class="keyword">var</span> inputData;</span><br><span class="line">            web3.eth.getTransaction(TXHash,<span class="function"><span class="keyword">function</span>(<span class="params">err, accs</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (err != <span class="literal">null</span>) &#123;</span><br><span class="line">                    alert(<span class="string">"There was an error fetching your TX."</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (accs.length == <span class="number">0</span>) &#123;</span><br><span class="line">                    alert(<span class="string">"Couldn't get any accounts! Make sure your Ethereum client is configured correctly."</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">console</span>.log(accs.input);<span class="comment">//输出inputdata</span></span><br><span class="line">                <span class="comment">//验证to地址是否是合约地址，合约地址的Code不为空</span></span><br><span class="line">                web3.eth.getCode(accs.to, <span class="function"><span class="keyword">function</span>(<span class="params">err, accs</span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(accs === <span class="string">'0x'</span>) &#123;</span><br><span class="line">                        alert(<span class="string">'普通转账交易'</span>);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">var</span> contractAddress = accs.to;</span><br><span class="line">                <span class="keyword">if</span> (contractAddress != <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">var</span> url = <span class="string">'https://api-cn.etherscan.com/api?module=contract&amp;action=getabi&amp;address='</span> + contractAddress + <span class="string">'&amp;apikey=填入etherscan的个人key'</span>;</span><br><span class="line">                    fetch(url, &#123;<span class="attr">method</span>: <span class="string">'get'</span>,&#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> response.json().then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">                        ABI = <span class="built_in">JSON</span>.parse(data.result);<span class="comment">//获取合约abi'</span></span><br><span class="line">                        <span class="comment">// console.log(ABI);</span></span><br><span class="line">                        <span class="built_in">document</span>.getElementById(<span class="string">"textArea"</span>).value = <span class="built_in">JSON</span>.stringify(<span class="built_in">JSON</span>.parse(data.result),<span class="literal">null</span>, <span class="string">' '</span>);</span><br><span class="line">                        abiDecoder.addABI(ABI);<span class="comment">//解析abi</span></span><br><span class="line">                        <span class="keyword">var</span> decodedData = abiDecoder.decodeMethod(accs.input);<span class="comment">//获得解析数据</span></span><br><span class="line">                        <span class="built_in">document</span>.getElementById(<span class="string">"textArea2"</span>).value = <span class="built_in">JSON</span>.stringify(decodedData,<span class="literal">null</span>,<span class="string">' '</span>);</span><br><span class="line">                    &#125;));</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    alert(<span class="string">"error: ContractAddress为null!!!"</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            alert(<span class="string">"error: TXHash为null!!!"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-3-build项目"><a href="#3-3-build项目" class="headerlink" title="3.3 build项目"></a>3.3 build项目</h3><p>在文件夹下执行:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><h3 id="3-4-启动项目"><a href="#3-4-启动项目" class="headerlink" title="3.4 启动项目"></a>3.4 启动项目</h3><p>在文件夹下执行:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>访问<code>http://localhost:8080</code>即可。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/09/01/oLYVu25P6QNyUk7.png" alt="项目截图" title="">                </div>                <div class="image-caption">项目截图</div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;以太坊每笔交易中都有InputData，本项目主要是识别合约交易中的InputData。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="以太坊" scheme="http://yoursite.com/categories/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
    
      <category term="以太坊" scheme="http://yoursite.com/tags/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
      <category term="inputData" scheme="http://yoursite.com/tags/inputData/"/>
    
  </entry>
  
  <entry>
    <title>基于以太坊私链的溯源Dapp</title>
    <link href="http://yoursite.com/2020/08/15/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%BA%AF%E6%BA%90Dapp/"/>
    <id>http://yoursite.com/2020/08/15/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%BA%AF%E6%BA%90Dapp/</id>
    <published>2020-08-15T09:58:10.027Z</published>
    <updated>2020-10-08T16:28:23.266Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>帮助老师撰写以太坊课程的实验指导书，因此需要设计一个基于以太坊私链的溯源Dapp项目。</p></blockquote><a id="more"></a><p>项目源码：<a href="https://github.com/HeXueZhi/FoodTransportation" target="_blank" rel="noopener">https://github.com/HeXueZhi/FoodTransportation</a></p><p>实验环境：</p><ul><li>win10：用于创建Dapp</li><li>CentOS7：用于搭建私链</li></ul><h3 id="一、私链的创建"><a href="#一、私链的创建" class="headerlink" title="一、私链的创建"></a>一、私链的创建</h3><p>前面的文章有写如何搭建私链。</p><p><a href="https://hexuezhi.github.io/2020/04/30/以太坊搭建私链/" target="_blank" rel="noopener">以太坊搭建私链</a></p><h3 id="二、以太坊Dapp的创建"><a href="#二、以太坊Dapp的创建" class="headerlink" title="二、以太坊Dapp的创建"></a>二、以太坊Dapp的创建</h3><p>Dapp整体基于truffle，前端采用webpack打包。</p><h4 id="2-1-编写合约"><a href="#2-1-编写合约" class="headerlink" title="2.1 编写合约"></a>2.1 编写合约</h4><p>合约编写以及编译采用<a href="http://remix.ethereum.org/" target="_blank" rel="noopener">remix</a>（需要较好的网络环境），推荐使用老版本界面。<a href="https://hexuezhi.github.io/2020/04/30/水龙头合约/" target="_blank" rel="noopener">remix入门</a></p><p>合约代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity &gt;&#x3D;0.4.22 &lt;0.7.0;</span><br><span class="line"></span><br><span class="line">contract FoodTransportation&#123;</span><br><span class="line">    struct Location&#123;</span><br><span class="line">        string locationName;</span><br><span class="line">        string transPerson;</span><br><span class="line">        uint timeStamp;</span><br><span class="line">    &#125;</span><br><span class="line">    string foodName;</span><br><span class="line"></span><br><span class="line">    mapping (uint &#x3D;&gt; Location) trail;</span><br><span class="line">    uint8 locationNum;</span><br><span class="line"></span><br><span class="line">    function addNewLocation(string memory food,string memory locationName,string memory transPerson)public&#123;</span><br><span class="line">        if(bytes(foodName).length &#x3D;&#x3D; 0)&#123;</span><br><span class="line">            foodName &#x3D; food;</span><br><span class="line">        &#125;</span><br><span class="line">        Location memory newLocation;</span><br><span class="line">        newLocation.locationName &#x3D; locationName;</span><br><span class="line">        newLocation.transPerson &#x3D; transPerson;</span><br><span class="line">        newLocation.timeStamp &#x3D; now;</span><br><span class="line">        trail[locationNum] &#x3D; newLocation;</span><br><span class="line">        locationNum++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getLocationNum() public view returns(uint8)&#123;</span><br><span class="line">        return locationNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getFoodName() public view returns(string memory)&#123;</span><br><span class="line">        return foodName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getLocation(uint8 locationNo) public view returns(string memory,string memory,uint)&#123;</span><br><span class="line">        return (trail[locationNo].locationName,trail[locationNo].transPerson,trail[locationNo].timeStamp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一步需要完成合约的编译和测试。</p><h4 id="2-2-环境准备"><a href="#2-2-环境准备" class="headerlink" title="2.2 环境准备"></a>2.2 环境准备</h4><p>win10系统中，安装node、truffle、ganache-cli。</p><p>执行<code>truffle version</code>查看版本。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/08/15/9PmGtVHWqx5iZhc.png" alt="truffle version" title="">                </div>                <div class="image-caption">truffle version</div>            </figure><p>尤其需要注意solidity和web3的版本。版本不同语法支持也不同，所以安装时，尽量选择于上图中相差不多的版本。</p><h4 id="2-3-truffle-webpack创建项目"><a href="#2-3-truffle-webpack创建项目" class="headerlink" title="2.3 truffle+webpack创建项目"></a>2.3 truffle+webpack创建项目</h4><ol><li><p>新建Dapp/FoodTransportation文件夹</p></li><li><p>文件夹下执行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truffle unbox webpack</span><br></pre></td></tr></table></figure><p>此命令会下载truffle提供的官方示例，下载时间可能会有点长，耐心等待。下载完成后的提示以及目录结构如下图所示。</p><p><img src="https://i.loli.net/2020/08/15/YLxKbDhaNI4SeC5.png" alt="download truffle-webpack"></p><p>此示例项目的运行启动：留个坑。</p></li><li><p>修改<code>truffle-config.js</code>为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'babel-register'</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  networks: &#123;</span><br><span class="line">    development: &#123;</span><br><span class="line">      host: <span class="string">'localhost'</span>,</span><br><span class="line">      port: <span class="number">8545</span>,</span><br><span class="line">      network_id: <span class="string">'*'</span> <span class="comment">// Match any network id</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本文件夹下的powershell中执行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel<span class="literal">-register</span></span><br></pre></td></tr></table></figure></li><li><p>删除contracts文件夹中的<code>ConvertLib.sol</code>和<code>MetaCoin.sol</code>文件，创建<code>FoodTransportation.sol</code>合约文件，复制刚才编写的合约代码。</p></li><li><p>修改migrations文件夹中的<code>2_deploy_contracts.js</code>文件。</p><p><strong>注意：</strong>这里直接删除这个文件也无妨，因为本项目使用web3来部署合约，不需要使用<code>truffle migrate</code>命令帮助部署合约。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> FoodTransportation = artifacts.require(<span class="string">"./FoodTransportation"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">deployer</span>) </span>&#123;</span><br><span class="line">  deployer.deploy(FoodTransportation);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>powershell中执行<code>truffle compile</code>命令。truffle中自带的solc-js会对合约进行编译。在Dapp文件夹下会出现build文件夹，存放编译形成的json文件。</p></li><li><p>在Dapp的app文件夹下粘贴写好的html文件，src目录下粘贴需要的js文件和css文件。</p></li><li><p>修改webpack-config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./src/app.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'build'</span>),</span><br><span class="line">    filename: <span class="string">'app.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mode : <span class="string">'development'</span>,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// Copy our app's index.html to the build folder.</span></span><br><span class="line">    <span class="keyword">new</span> CopyWebpackPlugin([</span><br><span class="line">      &#123; <span class="attr">from</span>: <span class="string">'./index.html'</span>, <span class="attr">to</span>: <span class="string">"index.html"</span> &#125;</span><br><span class="line">    ])</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [ <span class="string">'style-loader'</span>, <span class="string">'css-loader'</span> ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.json$/</span>, <span class="attr">exclude</span>: <span class="regexp">/(node_modules|bower_components)/</span>, <span class="attr">use</span>: <span class="string">'json-loader'</span> &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        query: &#123;</span><br><span class="line">          presets: [<span class="string">'es2015'</span>],</span><br><span class="line">          plugins: [<span class="string">'transform-runtime'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在app目录下执行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm install web3@<span class="number">0.18</span>.<span class="number">4</span> -<span class="literal">-save</span><span class="literal">-dev</span></span><br><span class="line">npm install webpack -<span class="literal">-save</span><span class="literal">-dev</span></span><br><span class="line">npm install style<span class="literal">-loader</span> css<span class="literal">-loader</span> json<span class="literal">-loader</span> -<span class="literal">-save</span><span class="literal">-dev</span></span><br><span class="line">npm install <span class="literal">-D</span> babel<span class="literal">-loader</span>@<span class="number">7</span> babel<span class="literal">-core</span> babel<span class="literal">-preset</span><span class="literal">-env</span> -<span class="literal">-save</span><span class="literal">-dev</span></span><br><span class="line">npm install babel<span class="literal">-preset</span><span class="literal">-es2015</span> -<span class="literal">-save</span><span class="literal">-dev</span></span><br><span class="line">npm install babel<span class="literal">-plugin</span><span class="literal">-transform</span><span class="literal">-runtime</span> -<span class="literal">-save</span><span class="literal">-dev</span></span><br><span class="line">npm run build</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure></li><li><p>进入<code>http://localhost:8080</code>查看界面。注意：现在如果没有启动私链，页面由于没有获取到账户，会发出警告，启动私链，连接metamask刷新即可。</p></li></ol><h3 id="三、合约部署"><a href="#三、合约部署" class="headerlink" title="三、合约部署"></a>三、合约部署</h3><h4 id="3-1-win10本地ganache测试"><a href="#3-1-win10本地ganache测试" class="headerlink" title="3.1 win10本地ganache测试"></a>3.1 win10本地ganache测试</h4><ol><li><p>安装<code>ganache-cli</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="literal">-g</span> ganache<span class="literal">-cli</span></span><br></pre></td></tr></table></figure></li><li><p>执行<code>ganache-cli</code></p><p><img src="https://i.loli.net/2020/08/15/Z76IToRKD3gm5AP.png" alt="ganache-cli"></p></li><li><p>在谷歌浏览器中安装metamask插件，安装好后，先在metamask右上角选择localhost:8545网络，然后选择助记词恢复钱包账户。</p></li><li><p>然后在<code>Dapp/app</code>执行<code>npm run dev</code>，打开浏览器的<code>http://localhost:8080/</code></p></li><li><p>按F12，查看console界面。</p></li><li><p>测试项目。</p></li></ol><h4 id="3-2-CentOS私链测试"><a href="#3-2-CentOS私链测试" class="headerlink" title="3.2 CentOS私链测试"></a>3.2 CentOS私链测试</h4><ol><li><p>开启私链，如无账户，先创建账户<code>personal.newAccount()</code>，输入密码。</p></li><li><p>开始挖矿。<code>miner.start(1)</code></p></li><li><p>查看账户余额<code>eth.getBalance(eth.accounts[0])</code>，为了保证能够发起合约部署等交易，需要一些ETH。</p></li><li><p>设置虚拟机防火墙，打开8545端口。<a href="https://hexuezhi.github.io/2020/06/26/CentOS7防火墙设置/" target="_blank" rel="noopener">CentOS设置防火墙</a></p></li><li><p>metamask连接CentOS的私链。需要新创建rpc网络。</p><ul><li>rpc地址：<code>http://192.168.2.151:8545</code>，ip填虚拟机ip就可以。</li><li>chainID：填入<code>genesis.json</code>中的chainid即可。</li></ul></li><li><p>切换至刚创建的网络，并导入账户。通过虚拟机私链文件夹下的keystore文件夹下的json文件导入到metamask即可。</p><p><img src="https://i.loli.net/2020/08/15/mAJSqV3L5Gxe9ZO.png" alt="image-20200815203841886"></p></li><li><p>导入账户之后刷新<code>http://localhost:8080</code>，再点击metamask，就能够连接刚刚导入的账户了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/09/01/XkTmJSiELF5dtw9.png" alt="项目截图" title="">                </div>                <div class="image-caption">项目截图</div>            </figure></li><li><p>测试项目。</p></li><li><p>测试完成后执行<code>miner.stop()</code>停止挖矿。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;帮助老师撰写以太坊课程的实验指导书，因此需要设计一个基于以太坊私链的溯源Dapp项目。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="以太坊" scheme="http://yoursite.com/categories/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
    
      <category term="以太坊" scheme="http://yoursite.com/tags/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
      <category term="Dapp" scheme="http://yoursite.com/tags/Dapp/"/>
    
      <category term="truffle" scheme="http://yoursite.com/tags/truffle/"/>
    
  </entry>
  
  <entry>
    <title>近期面试经验总结</title>
    <link href="http://yoursite.com/2020/07/19/%E8%BF%91%E6%9C%9F%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/07/19/%E8%BF%91%E6%9C%9F%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/</id>
    <published>2020-07-19T02:22:17.131Z</published>
    <updated>2020-10-08T10:25:46.218Z</updated>
    
    <content type="html"><![CDATA[<hr /><blockquote><p>近期面试了几个后端岗位，记录一下面试得出的经验。</p></blockquote><a id="more"></a><h2 id="一、面试中的问题"><a href="#一、面试中的问题" class="headerlink" title="一、面试中的问题"></a>一、面试中的问题</h2><h4 id="1-问简历上的项目"><a href="#1-问简历上的项目" class="headerlink" title="1.问简历上的项目"></a>1.问简历上的项目</h4><p>大体来说就是会照着简历上写的项目来进行提问。<br>首先，就是项目的总体框架，涉及到的技术栈。会对涉及到的知识进行提问。</p><p>其次，在项目中的具体工作，就是你负责了哪一部分。项目中遇到的困难，以及如何解决的。</p><p>最后，面试官问这些一个是测试你的技术掌握的深度，再一个就是看看你对技术的热情程度。所以需要在这个过程中体现出来自己对技术的热枕。</p><h4 id="2-操作系统相关"><a href="#2-操作系统相关" class="headerlink" title="2.操作系统相关"></a>2.操作系统相关</h4><ul><li>进程管理</li><li>内存管理</li><li>死锁相关</li></ul><h4 id="3-计算机网络相关"><a href="#3-计算机网络相关" class="headerlink" title="3.计算机网络相关"></a>3.计算机网络相关</h4><ul><li>http<ul><li>https</li><li>http2.0</li></ul></li><li>osi和tcp/ip网络模型</li><li>Tcp三次握手，四次挥手。这里不仅要知道怎么握手，还要知道为什么是三次和四次</li><li>cookie和session</li><li>从输入网址到显示页面，发生了什么</li></ul><h4 id="4-mysql相关"><a href="#4-mysql相关" class="headerlink" title="4.mysql相关"></a>4.mysql相关</h4><ul><li>事务<ul><li>定义及四个特征</li><li>隔离级别</li></ul></li><li>innodb和myisam存储引擎</li><li>脏读，不可重复度和幻读</li><li>索引<ul><li>索引的类型</li><li>匹配原则</li><li>底层数据结构：B+树</li></ul></li></ul><h4 id="5-java"><a href="#5-java" class="headerlink" title="5.java"></a>5.java</h4><h5 id="5-1-java集合"><a href="#5-1-java集合" class="headerlink" title="5.1 java集合"></a>5.1 java集合</h5><ul><li>hashmap</li><li>arrayList</li></ul><h5 id="5-2-JVM"><a href="#5-2-JVM" class="headerlink" title="5.2  JVM"></a>5.2  JVM</h5><ul><li>内存机构</li><li>垃圾回收机制</li></ul><h5 id="5-3-多线程"><a href="#5-3-多线程" class="headerlink" title="5.3 多线程"></a>5.3 多线程</h5><ul><li>hashmap、hashtable、CurrentHashMap</li><li>锁</li></ul><h2 id="二、面试经验"><a href="#二、面试经验" class="headerlink" title="二、面试经验"></a>二、面试经验</h2><h4 id="1-算法方面"><a href="#1-算法方面" class="headerlink" title="1.算法方面"></a>1.算法方面</h4><p>首先，要弄清楚面试官的需求。以及一些题目的要求。所以第一步是<strong>一定不要马上写代码</strong>！！！拿到题目要问清楚面试官的具体要求，然后把自己的具体思路讲述给面试官。<strong>思路得到面试官肯定后，再写代码。</strong></p><p>其次，在写代码的过程中，一定要注意程序的<strong>鲁棒性</strong>。特别要考虑一些空值和边界值的情况</p><p>最后，面试官出的题目可能是连环题，在你写完代码之后，会问你写的程序的<strong>时间复杂度和空间复杂度</strong>。然后再问你<strong>优化方案</strong>。</p><h4 id="2-项目经历方面"><a href="#2-项目经历方面" class="headerlink" title="2.项目经历方面"></a>2.项目经历方面</h4><p>首先一个明确你在项目中的工作，然后是技术难点和解决方案，也有可能是技术亮点。</p><p>这类问题回答过程中一定要体现自己对于技术的热情。</p><h4 id="3-基础知识方面"><a href="#3-基础知识方面" class="headerlink" title="3.基础知识方面"></a>3.基础知识方面</h4><p>第一种就是单纯问你的基础知识，这方面理解的基础上记忆就好了。</p><p>第二种就比较复杂。面试官会结合具体的实际业务场景来对基础知识进行提问。这一块要求对知识的掌握程度更加深刻。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;近期面试了几个后端岗位，记录一下面试得出的经验。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="面经" scheme="http://yoursite.com/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>字节跳动懂车帝后端面经</title>
    <link href="http://yoursite.com/2020/07/17/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E6%87%82%E8%BD%A6%E5%B8%9D%E5%90%8E%E7%AB%AF%E9%9D%A2%E7%BB%8F/"/>
    <id>http://yoursite.com/2020/07/17/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E6%87%82%E8%BD%A6%E5%B8%9D%E5%90%8E%E7%AB%AF%E9%9D%A2%E7%BB%8F/</id>
    <published>2020-07-17T12:45:07.499Z</published>
    <updated>2020-10-01T04:55:24.533Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>找了学长内推了字节跳动懂车帝的后端岗位，这也是作者本人的第一次面试，有纪念意义，所以记录一下过程。</p></blockquote><a id="more"></a><p>懂车帝后端主要用Go和python语言，因此相对来说就会少问一些java方面的知识。</p><p>面试的平台是在牛客网上，上来先做了一个简短的自我介绍，然后就直接开始问问题了。</p><h4 id="问题1、从长度未知的链表中随机取出一个数。"><a href="#问题1、从长度未知的链表中随机取出一个数。" class="headerlink" title="问题1、从长度未知的链表中随机取出一个数。"></a>问题1、从长度未知的链表中随机取出一个数。</h4><p>首先，需要说明这是一个经典的问题，需要用蓄水池抽样算法。但是本人当时并不知道这个算法。因此想出了两个方案，但是面试官都说不对，因此最后在面试官的提示下需要回去看看蓄水池算法。</p><p>错误方法1：先获取链表的长度，然后取链表长度的随机数，再取相应随机数位置的数。</p><p>面试官说不能获取链表的长度。</p><p>错误方法2：先生成一个随机数，然后取随机数位置上的链表上的数。会出现两种情况，一种是数到相应的位置上有数，直接取。第二种情况，向后遍历链表直到链表尾，发现随机数大于链表长度，这时候用随机数对链表长度取余数。取余数位置上的数。</p><p>面试官说还是需要获取到链表的长度。WTF？向后遍历到链表的尾部的同时就能够记录到链表的长度的啊。</p><p>正确答案：<strong>蓄水池取水算法</strong></p><p><strong>前提：</strong>给定一个数据流，数据流长度N很大，且N直到处理完所有数据之前都不可知，请问如何在只遍历一遍数据（O(N)）的情况下，能够随机选取出m个不重复的数据。<code>（这里面试官没有说出来只能够遍历一次链表）</code>。本题面试官提出的是取一个数据，因此把m设置为1即可。</p><p><strong>算法思路大致如下：</strong></p><ol><li>如果接收的数据量小于m，则依次放入蓄水池。</li><li>当遍历到第i个数据时，i &gt;= m，在[0, i]范围内取以随机数d，若d的落在[0, m-1]范围内，则用这第i个数据替换蓄水池中的第d个数据。</li><li>重复步骤2。</li></ol><p><strong>算法随机性的证明：</strong></p><p><strong>第i个数据最后能够留在蓄水池中的概率=第i个数据进入过蓄水池的概率*第i个数据不被替换的概率</strong>（第i+1到第N次处理数据都不会被替换）。</p><ol><li>当<code>i&lt;=m</code>时，数据直接放进蓄水池，所以<strong>第i个数据进入过蓄水池的概率=1</strong>。</li><li>当<code>i&gt;m</code>时，在[1,i]内选取随机数d，如果<code>d&lt;=m</code>，则使用第i个数据替换蓄水池中第d个数据，因此<strong>第i个数据进入蓄水池的概率=m/i</strong>。</li><li>当<code>i&lt;=m</code>时，程序从接收到第<code>m+1</code>个数据时开始执行替换操作，第<code>m+1</code>次处理会替换池中数据的为<code>m/(m+1)</code>，会替换掉第<code>i</code>个数据的概率为<code>1/m</code>，则第<code>m+1</code>次处理替换掉第<code>i</code>个数据的概率为<code>(m/(m+1))*(1/m)=1/(m+1)</code>，不被替换的概率为<code>1-1/(m+1)=m/(m+1)</code>。依次，第<code>m+2</code>次处理不替换掉第i个数据概率为<code>(m+1)/(m+2)</code>…第<code>N</code>次处理不替换掉第i个数据的概率为<code>(N-1)/N</code>。所以，之后第<code>i</code>个数据不被替换的概率=<code>m/(m+1)*(m+1)/(m+2)*...*(N-1)/N=m/N</code>。（<strong>这里如果m==1，表示只取一个数据，因此概率为1/N</strong>）</li><li>当<code>i&gt;m</code>时，程序从接收到第<code>i+1</code>个数据时开始有可能替换第i个数据。则参考上述第3点，<strong>之后第i个数据不被替换的概率=i/N</strong>。</li><li>结合第1点和第3点可知，当<code>i&lt;=m</code>时，第i个接收到的数据最后留在蓄水池中的概率=<code>1*m/N=m/N</code>。结合第2点和第4点可知，当<code>i&gt;m</code>时，第i个接收到的数据留在蓄水池中的概率=<code>m/i*i/N=m/N</code>。综上可知，<strong>每个数据最后被选中留在蓄水池中的概率为m/N</strong>。</li></ol><p>这个算法建立在统计学基础上，很巧妙地获得了<code>&quot;m/N&quot;</code>这个概率。</p><h4 id="问题2、写一个斐波那契数列。给n求n位置上的值"><a href="#问题2、写一个斐波那契数列。给n求n位置上的值" class="headerlink" title="问题2、写一个斐波那契数列。给n求n位置上的值"></a>问题2、写一个斐波那契数列。给n求n位置上的值</h4><p>0、1、1、2、3、5……</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib(n<span class="number">-1</span>)+fib(n<span class="number">-2</span>)</span><br></pre></td></tr></table></figure><h4 id="问题3、斐波那契数列递归算法的时间空间复杂度，以及如何优化"><a href="#问题3、斐波那契数列递归算法的时间空间复杂度，以及如何优化" class="headerlink" title="问题3、斐波那契数列递归算法的时间空间复杂度，以及如何优化"></a>问题3、斐波那契数列递归算法的时间空间复杂度，以及如何优化</h4><p>时间复杂度O（n）</p><p>空间复杂度O（n）</p><p>优化采用自底向下的动态规划算法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    res = [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">        res.append(res[<span class="number">-1</span>]+res[<span class="number">-2</span>])</span><br><span class="line">    <span class="keyword">return</span> res[n]</span><br></pre></td></tr></table></figure><p>这种算法需要空间空间复杂度为O(n),可以再优化为常数级别。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    num1 = <span class="number">0</span></span><br><span class="line">    num2 = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> num1</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">        num1,num2 = num2,num1+num2</span><br><span class="line">    <span class="keyword">return</span> num2</span><br></pre></td></tr></table></figure><p>说起来惭愧，这是《剑指offer》上的原题，面试之前作者并没有读过，当时又非常紧张，没有写出来这道题。面完试感觉这道题是easy的。</p><h4 id="问题4-操作系统什么时候会从用户态进入到内核态"><a href="#问题4-操作系统什么时候会从用户态进入到内核态" class="headerlink" title="问题4.操作系统什么时候会从用户态进入到内核态"></a>问题4.操作系统什么时候会从用户态进入到内核态</h4><p>内核态主要涉及到一些特权指令的操作。发生系统调用时会从用户态转移到内核态。</p><p><strong>系统调用：</strong></p><ul><li>设备管理</li><li>文件管理</li><li>进程控制</li><li>进程通信</li><li>内存管理</li></ul><h4 id="问题5-Tcp拥塞控制"><a href="#问题5-Tcp拥塞控制" class="headerlink" title="问题5.Tcp拥塞控制"></a>问题5.Tcp拥塞控制</h4><ul><li>慢开始</li><li>拥塞避免</li><li>快重传</li><li>快恢复</li></ul><p><strong>慢开始：</strong>指数增长就是将拥塞窗口cwnd设置为1，没经过一个RTT，cwnd加倍，指数增长。知道到达满开始门限阈值采用拥塞避免算法。</p><p><strong>拥塞避免：</strong>线性zeng’zhang每经过一个RTT就增加一个MSS大小。知道出现第一次超时（网络拥塞），就将慢开始门限设置为此时拥塞窗口值的一半。然后把cwnd重置为1。执行慢开始算法。</p><p><strong>快重传：</strong>当发送方接收到3个冗余ACK时，就认为确认的报文后面的报文段丢失了。并立即对缺失的报文段重传。</p><p><strong>快恢复：</strong>就是发生冗余ACK时间时候，将慢开始门限设置为当前的一半，然后将cwnd设置慢开始门限值，开始拥塞避免算法。</p><h4 id="问题6-进程通信方式"><a href="#问题6-进程通信方式" class="headerlink" title="问题6.进程通信方式"></a>问题6.进程通信方式</h4><ol><li>管道pipe：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。</li><li>命名管道FIFO：有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。</li><li>消息队列MessageQueue：消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。</li><li>共享存储SharedMemory：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号量，配合使用，来实现进程间的同步和通信。</li><li>信号量Semaphore：信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。</li><li>套接字Socket：套解口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同及其间的进程通信。</li><li>信号 ( sinal ) ： 信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。</li></ol><h4 id="问题7-Tcp连接三次握手，为什么不是两次"><a href="#问题7-Tcp连接三次握手，为什么不是两次" class="headerlink" title="问题7.Tcp连接三次握手，为什么不是两次"></a>问题7.Tcp连接三次握手，为什么不是两次</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/10/01/OhW32KMb1nt6F5P.png" alt="tcp三次握手" title="">                </div>                <div class="image-caption">tcp三次握手</div>            </figure><p><strong>第一次握手：</strong>客户机向服务器发送<strong>连接请求报文</strong>。</p><p><strong>第二次握手：</strong>服务器的TCP收到连接请求报文之后，同意链接，向客户机发回确认，为TCP连接分配TCP缓存和变量。</p><p><strong>第三次握手：</strong>客户机收到确认报文，向服务器发送确认报文为连接分配缓存和变量。</p><p><strong>为什么不是两次？</strong></p><p>​    <strong>防止客户端失效的连接请求报文段突然又传到服务器</strong></p><p>例如以下情况如果使用两次握手：</p><ul><li>如果客户端向服务器发送第一次连接请求在网络节点上滞留了，没有收到服务器的确认，于是又重新发送了一次连接请求</li><li>服务器收到客户端的第二次请求发送确认，则连接建立完成</li><li>服务器客户端进行数据传输，传输完成断开连接。</li><li>此时，在网络上滞留的客户端第一次连接请求到达服务器，服务器发送确认连接但是客户端实际上并没有发送请求，因此不会理睬服务器发送的请求。但是服务器认为连接已完成，并等待客户端进行数据传输。这样会造成资源的浪费</li></ul><p>如果采用三次握手的话：</p><ul><li>滞留在网络上的客户端第一次请求到达服务器之后，服务器发送确认，但实际上服务器并没有发送请求，因此不会理睬服务器的确认，故不会发送确认，服务器等不到客户端的确认则连接建立失败。这样就防止了客户端失效的连接请求报文段突然又传到服务器</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这是作者本人的第一次面试，面试的时候很紧张。面试官出了编程题马上就上手去写，没有思考的过程，也没有去问具体的一些要求。导致越写越慌，到最后连斐波那契数列这样的基础题，也没有写出来。基础知识也很不牢靠，一些简单的问题，也没有答上来。</p><p>在面试后在网上找了一些《剑指offer》的资料，发现前几章很有帮助，其中比较重要的一点就是，拿到面试题先思考，不理解需求的问，想清楚了之后再具体的写代码。</p><p><strong>一些面试题答案的参考文献：</strong></p><p><a href="https://www.jianshu.com/p/7a9ea6ece2af" target="_blank" rel="noopener">https://www.jianshu.com/p/7a9ea6ece2af</a></p><p><a href="https://blog.csdn.net/zhaohong_bo/article/details/89552188" target="_blank" rel="noopener">https://blog.csdn.net/zhaohong_bo/article/details/89552188</a></p><p><a href="https://blog.csdn.net/qq_41727218/article/details/87881235" target="_blank" rel="noopener">https://blog.csdn.net/qq_41727218/article/details/87881235</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;找了学长内推了字节跳动懂车帝的后端岗位，这也是作者本人的第一次面试，有纪念意义，所以记录一下过程。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="面经" scheme="http://yoursite.com/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
      <category term="字节跳动" scheme="http://yoursite.com/tags/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/"/>
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>python集合的一些基本操作</title>
    <link href="http://yoursite.com/2020/07/12/python%E9%9B%86%E5%90%88%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2020/07/12/python%E9%9B%86%E5%90%88%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</id>
    <published>2020-07-12T13:03:11.494Z</published>
    <updated>2020-09-05T12:38:24.191Z</updated>
    
    <content type="html"><![CDATA[<hr /><blockquote><p>刷题过程中有时需要用到集合相关的数据结构，主要是list、set和dict。记录一下如何在刷题过程中应用这些结构。</p></blockquote><a id="more"></a><h3 id="一、list"><a href="#一、list" class="headerlink" title="一、list"></a>一、list</h3><h4 id="1、列表的创建"><a href="#1、列表的创建" class="headerlink" title="1、列表的创建"></a>1、列表的创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nums = []</span><br><span class="line"><span class="comment">#快速创建队列并赋值</span></span><br><span class="line">nums = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line"><span class="comment">#快速创建二维数组，并赋值</span></span><br><span class="line">nums = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(m)]</span><br></pre></td></tr></table></figure><h4 id="2、列表的压入"><a href="#2、列表的压入" class="headerlink" title="2、列表的压入"></a>2、列表的压入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nums.append(x)</span><br><span class="line">nums.insert(index,x)<span class="comment">#在index插入x</span></span><br></pre></td></tr></table></figure><h4 id="3、列表的删除"><a href="#3、列表的删除" class="headerlink" title="3、列表的删除"></a>3、列表的删除</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = nums.pop(<span class="number">1</span>)<span class="comment">#删除index为1的元素</span></span><br><span class="line">list.remove(<span class="number">2</span>)<span class="comment">#删除元素2的第一个匹配项</span></span><br></pre></td></tr></table></figure><h4 id="4、列表排序"><a href="#4、列表排序" class="headerlink" title="4、列表排序"></a>4、列表排序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nums.sort()</span><br><span class="line">nums.sort(key=<span class="literal">None</span>,reverse=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h4 id="5、反转列表"><a href="#5、反转列表" class="headerlink" title="5、反转列表"></a>5、反转列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums.reverse()</span><br></pre></td></tr></table></figure><h4 id="6、复制列表"><a href="#6、复制列表" class="headerlink" title="6、复制列表"></a>6、复制列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums.copy()</span><br></pre></td></tr></table></figure><h4 id="7、列表中某个元素出现的个数"><a href="#7、列表中某个元素出现的个数" class="headerlink" title="7、列表中某个元素出现的个数"></a>7、列表中某个元素出现的个数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums.count(x)<span class="comment">#x出现的次数</span></span><br></pre></td></tr></table></figure><h4 id="8、某个值的第一个匹配项的index"><a href="#8、某个值的第一个匹配项的index" class="headerlink" title="8、某个值的第一个匹配项的index"></a>8、某个值的第一个匹配项的index</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums.index(x)</span><br></pre></td></tr></table></figure><h3 id="二、set"><a href="#二、set" class="headerlink" title="二、set"></a>二、set</h3><h4 id="1、集合的创建"><a href="#1、集合的创建" class="headerlink" title="1、集合的创建"></a>1、集合的创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums = &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="2、集合的压入"><a href="#2、集合的压入" class="headerlink" title="2、集合的压入"></a>2、集合的压入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nums.add(x)</span><br><span class="line"><span class="comment">#高级方法</span></span><br><span class="line">nums.update(x)<span class="comment">#x可以是列表、元组、字典，且x可以又多个，用逗号隔开</span></span><br><span class="line">nums.update([<span class="number">1</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line"><span class="comment">#&#123;1, 3, 4, 5, 6&#125;</span></span><br></pre></td></tr></table></figure><h4 id="3、集合的删除"><a href="#3、集合的删除" class="headerlink" title="3、集合的删除"></a>3、集合的删除</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nums.remove(x)<span class="comment">#如果元素不存在会发生错误</span></span><br><span class="line">nums.discard(x)<span class="comment">#如果元素不存在不会发生错误</span></span><br></pre></td></tr></table></figure><h3 id="三、dict"><a href="#三、dict" class="headerlink" title="三、dict"></a>三、dict</h3><h4 id="1、字典的创建"><a href="#1、字典的创建" class="headerlink" title="1、字典的创建"></a>1、字典的创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums = &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="2、字典的压入"><a href="#2、字典的压入" class="headerlink" title="2、字典的压入"></a>2、字典的压入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums[x] = y</span><br></pre></td></tr></table></figure><h4 id="3、字典的删除"><a href="#3、字典的删除" class="headerlink" title="3、字典的删除"></a>3、字典的删除</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> nums[x]</span><br></pre></td></tr></table></figure><h4 id="4、字典的遍历"><a href="#4、字典的遍历" class="headerlink" title="4、字典的遍历"></a>4、字典的遍历</h4><h5 id="4-1、遍历键"><a href="#4-1、遍历键" class="headerlink" title="4.1、遍历键"></a>4.1、遍历键</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> nums:</span><br><span class="line">    print(nums[key])</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> nums.keys():</span><br></pre></td></tr></table></figure><h5 id="4-2、遍历值"><a href="#4-2、遍历值" class="headerlink" title="4.2、遍历值"></a>4.2、遍历值</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> nums.values():</span><br><span class="line">    print(value)</span><br></pre></td></tr></table></figure><h5 id="4-3、遍历键和值"><a href="#4-3、遍历键和值" class="headerlink" title="4.3、遍历键和值"></a>4.3、遍历键和值</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> nums.items():</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;刷题过程中有时需要用到集合相关的数据结构，主要是list、set和dict。记录一下如何在刷题过程中应用这些结构。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>python刷题过程中的栈、队列和堆的实现</title>
    <link href="http://yoursite.com/2020/07/12/python%E5%88%B7%E9%A2%98%E7%9A%84%E6%A0%88%E9%98%9F%E5%88%97%E5%92%8C%E5%A0%86%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2020/07/12/python%E5%88%B7%E9%A2%98%E7%9A%84%E6%A0%88%E9%98%9F%E5%88%97%E5%92%8C%E5%A0%86%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-07-12T12:49:55.263Z</published>
    <updated>2020-09-05T12:38:38.999Z</updated>
    
    <content type="html"><![CDATA[<hr /><blockquote><p>刷题过程中有时需要用到栈、队列和堆的数据结构，记录一下如何在刷题过程中快速应用</p></blockquote><a id="more"></a><h3 id="一、栈"><a href="#一、栈" class="headerlink" title="一、栈"></a>一、栈</h3><h4 id="1、栈的创建"><a href="#1、栈的创建" class="headerlink" title="1、栈的创建"></a>1、栈的创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stack = []</span><br></pre></td></tr></table></figure><h4 id="2、栈的压入"><a href="#2、栈的压入" class="headerlink" title="2、栈的压入"></a>2、栈的压入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stack.append(x)</span><br></pre></td></tr></table></figure><h4 id="3、栈的弹出"><a href="#3、栈的弹出" class="headerlink" title="3、栈的弹出"></a>3、栈的弹出</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = stack.pop()</span><br></pre></td></tr></table></figure><h3 id="二、队列"><a href="#二、队列" class="headerlink" title="二、队列"></a>二、队列</h3><h4 id="1、队列的创建"><a href="#1、队列的创建" class="headerlink" title="1、队列的创建"></a>1、队列的创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">queue = deque()</span><br></pre></td></tr></table></figure><h4 id="2、队列的压入"><a href="#2、队列的压入" class="headerlink" title="2、队列的压入"></a>2、队列的压入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queue.append(x)</span><br></pre></td></tr></table></figure><h4 id="3、队列的弹出"><a href="#3、队列的弹出" class="headerlink" title="3、队列的弹出"></a>3、队列的弹出</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = stack.popleft()</span><br></pre></td></tr></table></figure><h3 id="三、堆（最小堆）"><a href="#三、堆（最小堆）" class="headerlink" title="三、堆（最小堆）"></a>三、堆（最小堆）</h3><p><strong>注意：</strong>heapq默认是创建的最小堆，如果需要最大堆，就将<code>-x</code>存入堆中。</p><h4 id="1、栈的创建-1"><a href="#1、栈的创建-1" class="headerlink" title="1、栈的创建"></a>1、栈的创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line">heap = []<span class="comment">#新建</span></span><br><span class="line"><span class="comment">#或者将列表变成小顶堆</span></span><br><span class="line">nums = [......]</span><br><span class="line">heapq.heapify(nums)</span><br></pre></td></tr></table></figure><h4 id="2、堆的压入"><a href="#2、堆的压入" class="headerlink" title="2、堆的压入"></a>2、堆的压入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heapq.heappush(heap,x)</span><br></pre></td></tr></table></figure><h4 id="3、堆的弹出"><a href="#3、堆的弹出" class="headerlink" title="3、堆的弹出"></a>3、堆的弹出</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heapq.heappop(heaq)</span><br></pre></td></tr></table></figure><h4 id="4、寻找序列中最大或最小的N个元素"><a href="#4、寻找序列中最大或最小的N个元素" class="headerlink" title="4、寻找序列中最大或最小的N个元素"></a>4、寻找序列中最大或最小的N个元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lista = [<span class="number">64</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">83</span>, <span class="number">85</span>, <span class="number">50</span>, <span class="number">10</span>, <span class="number">49</span>, <span class="number">28</span>, <span class="number">60</span>]</span><br><span class="line">print(heapq.nlargest(<span class="number">3</span>, lista)) <span class="comment"># [93, 92, 85]</span></span><br><span class="line">print(heapq.nsmallest(<span class="number">3</span>, lista)) <span class="comment"># [10, 28, 49]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;刷题过程中有时需要用到栈、队列和堆的数据结构，记录一下如何在刷题过程中快速应用&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>win10下运行hadoop的wordcount程序报错</title>
    <link href="http://yoursite.com/2020/06/27/WordCount%E7%A8%8B%E5%BA%8F%E6%8A%A5%E9%94%99/"/>
    <id>http://yoursite.com/2020/06/27/WordCount%E7%A8%8B%E5%BA%8F%E6%8A%A5%E9%94%99/</id>
    <published>2020-06-27T12:15:08.039Z</published>
    <updated>2020-09-05T12:38:18.071Z</updated>
    
    <content type="html"><![CDATA[<hr /><blockquote><p>学习hadoop的过程中遇到了一个bug，记录一下过程</p></blockquote><a id="more"></a><h2 id="Exception-in-thread“main”java-lang-UnsatisfiedLinkError-org-apache-hadoop-io-nativeio-NativeIO-Windows-access0-Ljava-lang-String-I-Z"><a href="#Exception-in-thread“main”java-lang-UnsatisfiedLinkError-org-apache-hadoop-io-nativeio-NativeIO-Windows-access0-Ljava-lang-String-I-Z" class="headerlink" title="Exception in thread“main”java.lang.UnsatisfiedLinkError: org.apache.hadoop.io.nativeio.NativeIO$Windows.access0(Ljava/lang/String;I)Z"></a>Exception in thread“main”java.lang.UnsatisfiedLinkError: org.apache.hadoop.io.nativeio.NativeIO$Windows.access0(Ljava/lang/String;I)Z</h2><h3 id="第一步、检查系统环境变量"><a href="#第一步、检查系统环境变量" class="headerlink" title="第一步、检查系统环境变量"></a>第一步、检查系统环境变量</h3><h4 id="1、检查HADOOP-HOME"><a href="#1、检查HADOOP-HOME" class="headerlink" title="1、检查HADOOP_HOME"></a>1、检查HADOOP_HOME</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/27/lYMTFLXqh4tjRH5.png" alt="image-20200627202154495" title="">                </div>                <div class="image-caption">image-20200627202154495</div>            </figure><h4 id="2、检查PATH"><a href="#2、检查PATH" class="headerlink" title="2、检查PATH"></a>2、检查PATH</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/27/vYaiKe8wSRZIodT.png" alt="image-20200627202320374" title="">                </div>                <div class="image-caption">image-20200627202320374</div>            </figure><h3 id="第二步、检查hadoop-bin文件夹"><a href="#第二步、检查hadoop-bin文件夹" class="headerlink" title="第二步、检查hadoop/bin文件夹"></a>第二步、检查hadoop/bin文件夹</h3><p>主要检查是否有<code>winutils.exe</code>和<code>hadoop.dll</code>两个文件。</p><p>如果没有的话请从网上下载，要下载对应版本的文件。</p><h3 id="第三步、检查C-Windows-System32文件夹"><a href="#第三步、检查C-Windows-System32文件夹" class="headerlink" title="第三步、检查C:\Windows\System32文件夹"></a>第三步、检查C:\Windows\System32文件夹</h3><p>检查是否有<code>hadoop.dll</code>文件，如果没有的话，从hadoop/bin文件夹下复制过去。</p><p>文章来源：<a href="https://sparkbyexamples.com/spark/spark-hadoop-exception-in-thread-main-java-lang-unsatisfiedlinkerror-org-apache-hadoop-io-nativeio-nativeiowindows-access0ljava-lang-stringiz/" target="_blank" rel="noopener">https://sparkbyexamples.com/spark/spark-hadoop-exception-in-thread-main-java-lang-unsatisfiedlinkerror-org-apache-hadoop-io-nativeio-nativeiowindows-access0ljava-lang-stringiz/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;学习hadoop的过程中遇到了一个bug，记录一下过程&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="hadoop" scheme="http://yoursite.com/categories/hadoop/"/>
    
    
      <category term="hadoop" scheme="http://yoursite.com/tags/hadoop/"/>
    
      <category term="wordcount" scheme="http://yoursite.com/tags/wordcount/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7设置防火墙</title>
    <link href="http://yoursite.com/2020/06/26/CentOS7%E9%98%B2%E7%81%AB%E5%A2%99%E8%AE%BE%E7%BD%AE/"/>
    <id>http://yoursite.com/2020/06/26/CentOS7%E9%98%B2%E7%81%AB%E5%A2%99%E8%AE%BE%E7%BD%AE/</id>
    <published>2020-06-26T04:22:20.489Z</published>
    <updated>2020-10-08T16:26:01.160Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>CentOS7设置防火墙，记录一下过程</p></blockquote><a id="more"></a><h4 id="1、防火墙设置"><a href="#1、防火墙设置" class="headerlink" title="1、防火墙设置"></a>1、防火墙设置</h4><ul><li><strong>启动防火墙</strong>：<code>systemctl start firewalld.service</code></li><li><strong>关闭防火墙</strong>：<code>systemctl stop firewalld.service</code></li><li><strong>重启防火墙</strong>：<code>systemctl restart firewalld.service</code></li><li><strong>显示防火墙状态</strong>：<code>systemctl status firewalld.service</code></li><li><strong>开机自动开启防火墙</strong>：<code>systemctl enable firewalld.service</code></li><li><strong>开机禁用防火墙</strong>：<code>systemctl disable firewalld.service</code></li><li><strong>查看防火墙是否开机启动</strong>：<code>systemctl is-enabled firewalld.service</code></li><li>查看已启动的服务列表：<code>systemctl list-unit-files|grep enabled</code></li><li>查看启动失败的服务列表：<code>systemctl --failed</code></li></ul><h4 id="2、防火墙配置"><a href="#2、防火墙配置" class="headerlink" title="2、防火墙配置"></a>2、防火墙配置</h4><ul><li>查看版本： <code>firewall-cmd --version</code></li><li>查看帮助： <code>firewall-cmd --help</code></li><li>显示状态： <code>firewall-cmd --state</code></li><li><strong>查看所有打开的端口</strong>： <code>firewall-cmd --zone=public --list-ports</code></li><li><strong>更新防火墙规则</strong>：<code>firewall-cmd --reload</code></li><li>查看区域信息:  <code>firewall-cmd --get-active-zones</code></li><li>查看指定接口所属区域：<code>firewall-cmd --get-zone-of-interface=eth0</code></li><li>拒绝所有包：<code>firewall-cmd --panic-on</code></li><li>取消拒绝状态： <code>firewall-cmd --panic-off</code></li><li>查看是否拒绝： <code>firewall-cmd --query-panic</code></li><li><strong>添加开放端口</strong>：<code>firewall-cmd --zone=public --add-port=80/tcp --permanent</code>  （–permanent永久生效，没有此参数重启后失效）</li><li><strong>删除开放端口</strong>：<code>firewall-cmd --zone=public --remove-port=80/tcp --permanent</code></li><li>查看开放端口：<code>firewall-cmd --zone=public --query-port=80/tcp</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;CentOS7设置防火墙，记录一下过程&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CentOS" scheme="http://yoursite.com/categories/CentOS/"/>
    
    
      <category term="CentOS" scheme="http://yoursite.com/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>scrapy爬虫</title>
    <link href="http://yoursite.com/2020/06/16/scrapy%E7%88%AC%E8%99%AB/"/>
    <id>http://yoursite.com/2020/06/16/scrapy%E7%88%AC%E8%99%AB/</id>
    <published>2020-06-15T16:01:06.077Z</published>
    <updated>2020-09-05T12:38:11.187Z</updated>
    
    <content type="html"><![CDATA[<hr /><blockquote><p>学习了一下scrapy爬虫，记录一下过程。</p></blockquote><a id="more"></a><h3 id="一、新建工程"><a href="#一、新建工程" class="headerlink" title="一、新建工程"></a>一、新建工程</h3><h4 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h4><p>powershell下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject 工程名称</span><br></pre></td></tr></table></figure><h4 id="2-创建爬虫程序"><a href="#2-创建爬虫程序" class="headerlink" title="2. 创建爬虫程序"></a>2. 创建爬虫程序</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> 工程名称</span><br><span class="line">scrapy genspider 程序名称 爬取的网站地址</span><br></pre></td></tr></table></figure><p>注意：==网站地址前面不要有http://之类的==</p><h4 id="3-启动spider"><a href="#3-启动spider" class="headerlink" title="3. 启动spider"></a>3. 启动spider</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawel 程序名称</span><br></pre></td></tr></table></figure><h3 id="二、文件说明"><a href="#二、文件说明" class="headerlink" title="二、文件说明"></a>二、文件说明</h3><ul><li><strong>scrapy.cfg</strong>：项目的配置信息，主要为Scrapy命令行工具提供一个基础的配置信息。（真正爬虫相关的配置信息在settings.py文件中）</li><li><strong>items.py</strong>：设置数据存储模板，用于结构化数据，如：Django的Model</li><li><strong>pipelines</strong>：数据处理行为，如：一般结构化的数据持久化</li><li><strong>settings.py</strong>：配置文件，如：递归的层数、并发数，延迟下载等</li><li><strong>spiders</strong>：爬虫目录，如：创建文件，编写爬虫规则</li></ul><p>以上命名都是固定的</p><hr><h4 id="1-items-py："><a href="#1-items-py：" class="headerlink" title="1. items.py："></a>1. items.py：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThirdItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    name = scrapy.Field()</span><br><span class="line">    age = scrapy.Field()</span><br></pre></td></tr></table></figure><h4 id="2-example-py"><a href="#2-example-py" class="headerlink" title="2. example.py"></a>2. example.py</h4><p>example.py是scrapy genspider命令中spider名称</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> Request</span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> Item<span class="comment">#导入自定义的item结构化数据类</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'example'</span></span><br><span class="line">    allowed_domains = [<span class="string">'example.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://example.com'</span>]<span class="comment">#要爬取的网页</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        print(response.body)<span class="comment">#打印获取到的网页源码</span></span><br><span class="line">        <span class="comment">#获取页面数据的两种方式</span></span><br><span class="line">        <span class="comment">#url = response.css(' ').extract()</span></span><br><span class="line">        url = response.xpath(<span class="string">' '</span>).extract()</span><br><span class="line">        <span class="keyword">for</span> next_url <span class="keyword">in</span> url:</span><br><span class="line">            <span class="keyword">yield</span> Request(url=parse.urljoin(response.url, next_url), callback=self.parse_detail)<span class="comment">#parse_detail为自定义函数</span></span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_detail</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        print(<span class="string">"================进入parse_detail================="</span>)</span><br><span class="line">        print(response.body)<span class="comment">#打印url的源码</span></span><br><span class="line">        items = Item()</span><br><span class="line">        items[<span class="string">'name'</span>] = response.xpath(<span class="string">' '</span>).extract_first(<span class="string">""</span>)</span><br><span class="line">        items[<span class="string">'name'</span>] = items[<span class="string">'name'</span>].replace(<span class="string">'\n'</span>, <span class="string">''</span>).replace(<span class="string">' '</span>, <span class="string">''</span>)</span><br><span class="line">        </span><br><span class="line">        items[<span class="string">'age'</span>] = response.xpath(<span class="string">' '</span>).extract_first(<span class="string">""</span>)</span><br><span class="line">        items[<span class="string">'age'</span>] = items[<span class="string">'age'</span>].replace(<span class="string">'\n'</span>, <span class="string">''</span>).replace(<span class="string">' '</span>, <span class="string">''</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">yield</span> items</span><br></pre></td></tr></table></figure><h4 id="4-main-py"><a href="#4-main-py" class="headerlink" title="4. main.py"></a>4. main.py</h4><p>在pycharm里，可以将指令写入main.py中，简化操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> cmdline</span><br><span class="line"></span><br><span class="line"><span class="comment">#cmdline.execute("scrapy","crawl","example")</span></span><br><span class="line">cmdline.execute(<span class="string">"scrapy crawl example"</span>.split())</span><br></pre></td></tr></table></figure><p><strong>如果没有出现运行标志，表示需要配置：</strong></p><ol><li><p>配置</p><p><img src="https://i.loli.net/2020/06/16/JXgyRfLoSO1V2EW.png" alt="QQ截图20200323083706-1584923944607.png"></p></li><li><p>添加新配置</p><p><img src="https://i.loli.net/2020/06/16/GzmRhMltLfBPE1w.png" alt="QQ截图20200323083807"></p></li><li><p>配置信息</p><p><img src="https://i.loli.net/2020/06/16/GBnOXsPCAM9U1Wt.png" alt="QQ截图20200323084005"></p></li></ol><p>==工作目录需要选择py文件的父文件夹==</p><h3 id="三、延迟获取"><a href="#三、延迟获取" class="headerlink" title="三、延迟获取"></a>三、延迟获取</h3><p>对于浏览器看到的和实际打印的response.body不同的解决方法有两种，两种都可以进行尝试。</p><h4 id="1-DOWNLOAD-DELAY"><a href="#1-DOWNLOAD-DELAY" class="headerlink" title="1. DOWNLOAD_DELAY"></a>1. DOWNLOAD_DELAY</h4><p>在setting.py中找到<code>DOWNLOAD_DELAY</code>取消注释设置值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DOWNLOAD_DELAY = <span class="number">5</span> <span class="comment">#数值越大，延迟越大</span></span><br></pre></td></tr></table></figure><h4 id="2-middleware"><a href="#2-middleware" class="headerlink" title="2. middleware"></a>2. middleware</h4><h5 id="2-1-安装selenium"><a href="#2-1-安装selenium" class="headerlink" title="2.1 安装selenium"></a>2.1 安装selenium</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure><h5 id="2-2-安装chromedriver"><a href="#2-2-安装chromedriver" class="headerlink" title="2.2 安装chromedriver"></a>2.2 安装chromedriver</h5><p>注意：==chromedriver的版本一定要与Chrome的版本一致，不然就不起作用。==</p><p>查看chrome版本方法：在浏览器地址栏输入chrome://version/</p><p>两个下载地址：</p><ol><li><em><a href="http://chromedriver.storage.googleapis.com/index.html" target="_blank" rel="noopener">http://chromedriver.storage.googleapis.com/index.html</a></em></li><li><em><a href="https://npm.taobao.org/mirrors/chromedriver/" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/chromedriver/</a></em></li></ol><p>解压压缩包，找到chromedriver.exe复制到chrome的安装目录（其实也可以随便放一个文件夹）。复制chromedriver.exe文件的路径并加入到电脑的环境变量中去（不添加也行，得记住路径）。具体的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/16/GyaXmnPUofhQADH.png" alt="image-20200407175944138" title="">                </div>                <div class="image-caption">image-20200407175944138</div>            </figure><p>进入环境变量编辑界面，添加到用户变量即可，双击PATH，将你的文件位置（C:\Program Files (x86)\Google\Chrome\Application）添加到后面。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/16/lu5rDegSPIMab7z.png" alt="image-20200407180622270" title="">                </div>                <div class="image-caption">image-20200407180622270</div>            </figure><p>打开cmd，输入<code>chromedriver</code>监测是否安装成功。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/16/DTX7oHsF2xLNVR1.png" alt="image-20200407180356103" title="">                </div>                <div class="image-caption">image-20200407180356103</div>            </figure><h5 id="2-3-配置"><a href="#2-3-配置" class="headerlink" title="2.3 配置"></a>2.3 配置</h5><ol><li><p>将settings.py中的<code>DOWNLOADER_MIDDLEWARES</code>解除注释。</p><p><img src="https://i.loli.net/2020/06/16/3LgwAxkH9WmCSqZ.png" alt="image-20200407233740811"></p></li><li><p>在middlewares.py导入将需要的包并且设置变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> HtmlResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line">driver = webdriver.Chrome(<span class="string">"C:\Program Files (x86)\Google\Chrome\Application\chromedriver.exe"</span>,chrome_options=chrome_options)</span><br></pre></td></tr></table></figure></li><li><p>在middlewares.py找到相应的middleware的类中的<code>process_request</code>函数，函数中添加以下代码，代码块如图。其中起关键作用的是<code>time.sleep(10)</code>，意思是延迟多长时间。延迟后再返回current.url和body。<em>本例中类名为<code>MyCrowlersDownloaderMiddleware</code>，具体类名会根据项目名变化。</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    driver.get(request.url)</span><br><span class="line"><span class="keyword">except</span> TimeoutException:</span><br><span class="line">    print(<span class="string">'超时，丢弃本页'</span>, request.url)</span><br><span class="line">    driver.execute_script(<span class="string">'window.stop()'</span>)</span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">return</span> HtmlResponse(url=driver.current_url, body=driver.page_source, encoding=<span class="string">"utf-8"</span>,request=request)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/06/16/TbJoWKl4Mye1PjI.png" alt="image-20200407235207035"></p></li></ol><h5 id="2-4-滚动加载配置（这部分好像有问题）"><a href="#2-4-滚动加载配置（这部分好像有问题）" class="headerlink" title="2.4 滚动加载配置（这部分好像有问题）"></a>2.4 滚动加载配置（这部分好像有问题）</h5><ol><li><p>在middlewares.py新导入一个包。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException</span><br></pre></td></tr></table></figure></li><li><p>在<code>process_request</code>函数中添加以下代码，代码块如图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    spider.browser.get(request.url)</span><br><span class="line">    spider.browser.execute_script(<span class="string">'window.scrollTo(0, document.body.scrollHeight)'</span>)</span><br><span class="line"><span class="keyword">except</span> TimeoutException <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'超时'</span>)</span><br><span class="line">    spider.browser.execute_script(<span class="string">'window.stop()'</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span> HtmlResponse(url=spider.browser.current_url, body=spider.browser.page_source, encoding=<span class="string">"utf-8"</span>,request=request)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/06/16/z1SwWC2ctujKXY5.png" alt="image-20200407235904011.png"></p></li></ol><h3 id="四、保存数据"><a href="#四、保存数据" class="headerlink" title="四、保存数据"></a>四、保存数据</h3><p>共使用三种保存方法，一种是保存为json文件，一种是直接保存到es中。</p><h4 id="1-保存至json"><a href="#1-保存至json" class="headerlink" title="1. 保存至json"></a>1. 保存至json</h4><ol><li><p>在piplines.py中添加如下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScrapyCodePipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        <span class="comment"># print('pipeline got item:',item)</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scrapy.exporters <span class="keyword">import</span> JsonItemExporter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsonExporterPipleline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 调用scrapy提供的json export导出json文件</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.file = open(<span class="string">'export.json'</span>, <span class="string">'wb'</span>)</span><br><span class="line">        self.exporter = JsonItemExporter(self.file, encoding=<span class="string">"utf-8"</span>, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">        self.exporter.start_exporting()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.exporter.finish_exporting()</span><br><span class="line">        self.file.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        self.exporter.export_item(item)</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure></li><li><p>在settings.py中找到<code>ITEM_PIPELINES</code>，改成如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;<span class="comment"># item处理方式</span></span><br><span class="line">   <span class="comment"># 'scrapy_code.pipelines.ScrapyCodePipeline': 300,</span></span><br><span class="line">   <span class="string">'scrapy_code.pipelines.JsonExporterPipleline'</span>: <span class="number">300</span>,</span><br><span class="line">   <span class="comment"># 'scrapy_code.pipelines.MysqlTwistedPipline': 300,</span></span><br><span class="line">   <span class="comment"># 'scrapy_code.pipelines.ElasticsearchPipeline': 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-保存至es中"><a href="#2-保存至es中" class="headerlink" title="2. 保存至es中"></a>2. 保存至es中</h4><ol><li><p>在piplines.py的同级文件夹下建立Python Package，取名为models，在models下建立es_types.py。目录结构如下：</p><ul><li>models:<ul><li>_<em>init_</em>.py</li><li>es_types.py</li></ul></li><li>piplines.py</li></ul></li><li><p>在es_types.py中写入如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># elasticsearch_dsl：https://elasticsearch-dsl.readthedocs.io/en/latest/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> elasticsearch_dsl <span class="keyword">import</span> DocType, Date, Completion, Keyword, Text, Integer</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> elasticsearch_dsl.analysis <span class="keyword">import</span> CustomAnalyzer</span><br><span class="line"></span><br><span class="line"><span class="comment">#需要在es中安装ik分词器</span></span><br><span class="line">ik_analyzer = CustomAnalyzer(<span class="string">"ik_max_word"</span>, filter=[<span class="string">"lowercase"</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> elasticsearch_dsl.connections <span class="keyword">import</span> connections</span><br><span class="line"></span><br><span class="line">es=connections.create_connection(host=<span class="string">"127.0.0.1"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">jobType</span><span class="params">(DocType)</span>:</span></span><br><span class="line">    <span class="comment"># 设置index名称和document名称</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Index</span>:</span></span><br><span class="line">        name = <span class="string">"51job"</span></span><br><span class="line">        doc_type = <span class="string">"_doc"</span></span><br><span class="line">        <span class="comment"># settings = &#123;</span></span><br><span class="line">        <span class="comment">#   "number_of_shards": 2,</span></span><br><span class="line">        <span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span>fileds定义</span></span><br><span class="line">    url = Keyword()  <span class="comment"># 不分词，默认保留256个字符</span></span><br><span class="line">    job_name = Text(</span><br><span class="line">        analyzer=<span class="string">"ik_max_word"</span>)  <span class="comment"># “中华人民共和国国歌”拆分为“中华人民共和国,中华人民,中华,华人,人民共和国,人民,人,民,共和国,共和,和,国国,国歌”，会穷尽各种可能的组合；</span></span><br><span class="line">    salary = Text(analyzer=<span class="string">"ik_smart"</span>)  <span class="comment"># 将“中华人民共和国国歌”拆分为“中华人民共和国,国歌”将“中华人民共和国国歌”拆分为“中华人民共和国,国歌”</span></span><br><span class="line">    company = Text(analyzer=<span class="string">"ik_max_word"</span>)</span><br><span class="line">    job_position = Text(analyzer=<span class="string">"ik_max_word"</span>)</span><br><span class="line">    experience = Text(analyzer=<span class="string">"ik_max_word"</span>)</span><br><span class="line">    education = Text(analyzer=<span class="string">"ik_max_word"</span>)</span><br><span class="line">    number_of_people = Integer()</span><br><span class="line">    published_time = Date()</span><br><span class="line">    position_detail = Text(analyzer=<span class="string">"ik_smart"</span>)</span><br><span class="line">    position_type = Text(analyzer=<span class="string">"ik_max_word"</span>)</span><br><span class="line">    location = Text(analyzer=<span class="string">"ik_max_word"</span>)</span><br><span class="line">    company_detail = Text(analyzer=<span class="string">"ik_max_word"</span>)</span><br><span class="line"></span><br><span class="line">    suggest = Completion(analyzer=ik_analyzer)  <span class="comment"># 搜索建议</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,item)</span>:</span></span><br><span class="line">        super(jobType, self).__init__()<span class="comment">#调一下父类的init，避免init重写导致一些init操作没执行</span></span><br><span class="line">        self.assignment(item)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span>将item转换为es的数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">assignment</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="comment"># TODO：给没爬到的字段赋默认值：空串</span></span><br><span class="line">        keys = [<span class="string">'url'</span>, <span class="string">'job_name'</span>, <span class="string">'salary'</span>, <span class="string">'company'</span>, <span class="string">'job_position'</span>, <span class="string">'experience'</span>, <span class="string">'education'</span>, <span class="string">'number_of_people'</span>,</span><br><span class="line">                <span class="string">'published_time'</span>, <span class="string">'position_detail'</span>, <span class="string">'position_type'</span>, <span class="string">'location'</span>, <span class="string">'company_detail'</span>]</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> keys:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                item[key]</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                item[key] = <span class="string">''</span></span><br><span class="line">        <span class="comment"># TODO：将字段值转换为es的数据</span></span><br><span class="line">        <span class="comment"># 虽然只是将原来的item值赋给了成员变量，但这个过程中会执行数据格式转换操作，比如url本来在item是python的字符串类型，转换后变为es的keyword类型</span></span><br><span class="line">        self.url = item[<span class="string">'url'</span>]</span><br><span class="line">        self.job_name = item[<span class="string">'job_name'</span>]</span><br><span class="line">        self.salary = item[<span class="string">'salary'</span>]</span><br><span class="line">        self.company = item[<span class="string">'company'</span>]</span><br><span class="line">        self.job_position = item[<span class="string">'job_position'</span>]</span><br><span class="line">        self.experience = item[<span class="string">'experience'</span>]</span><br><span class="line">        self.education = item[<span class="string">'education'</span>]</span><br><span class="line">        self.number_of_people = item[<span class="string">'number_of_people'</span>]</span><br><span class="line">        self.published_time = item[<span class="string">'published_time'</span>]</span><br><span class="line">        self.position_detail = item[<span class="string">'position_detail'</span>]</span><br><span class="line">        self.position_type = item[<span class="string">'position_type'</span>]</span><br><span class="line">        self.location = item[<span class="string">'location'</span>]</span><br><span class="line">        self.company_detail = item[<span class="string">'company_detail'</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># # 或者简化代码为</span></span><br><span class="line">        <span class="comment"># for key in keys:</span></span><br><span class="line">        <span class="comment">#     vars(self)[key]=item[key]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># TODO：生成搜索建议词</span></span><br><span class="line">        self.suggest = self.gen_suggests(((self.job_name, <span class="number">10</span>), (self.company, <span class="number">3</span>), (self.position_type, <span class="number">7</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_suggests</span><span class="params">(self, info_tuple)</span>:</span></span><br><span class="line">        <span class="comment"># 根据字符串生成搜索建议数组</span></span><br><span class="line">        used_words = set()  <span class="comment"># set为去重功能</span></span><br><span class="line">        suggests = []</span><br><span class="line">        <span class="keyword">for</span> text, weight <span class="keyword">in</span> info_tuple:</span><br><span class="line">            <span class="keyword">if</span> text:</span><br><span class="line">                <span class="comment"># 字符串不为空时，调用elasticsearch的analyze接口分析字符串（分词、大小写转换）</span></span><br><span class="line">                words = es.indices.analyze(body=&#123;<span class="string">'text'</span>: text, <span class="string">'analyzer'</span>: <span class="string">"ik_max_word"</span>&#125;)</span><br><span class="line">                <span class="comment"># anylyzed_words = set([r["token"] for r in words["tokens"] if len(r["token"]) &gt; 1])</span></span><br><span class="line">                analyzed_words = []</span><br><span class="line">                <span class="keyword">for</span> r <span class="keyword">in</span> words[<span class="string">"tokens"</span>]:</span><br><span class="line">                    <span class="keyword">if</span> len(r[<span class="string">"tokens"</span>]) &gt; <span class="number">1</span>:</span><br><span class="line">                        analyzed_words.append(r[<span class="string">"tokens"</span>])</span><br><span class="line">                anylyzed_words = set(analyzed_words)</span><br><span class="line"></span><br><span class="line">                new_words = anylyzed_words - used_words</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                new_words = set()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> new_words:</span><br><span class="line">                suggests.append(&#123;<span class="string">'input'</span>: list(new_words), <span class="string">'weight'</span>: weight&#125;)</span><br><span class="line">        <span class="keyword">return</span> suggests</span><br></pre></td></tr></table></figure></li><li><p>在piplines.py中添加如下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .models.es_types <span class="keyword">import</span> jobType</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElasticsearchPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        job = jobType(item)<span class="comment"># 将item转换为es所需格式</span></span><br><span class="line">        <span class="comment"># 将数据传入es</span></span><br><span class="line">        <span class="comment"># jobType继承自DocType，所以DocType有的函数，它都有。</span></span><br><span class="line">        <span class="comment"># save就是DocType定义的将类中的各成员变量打包成数据插入操作，进行数据插入的函数</span></span><br><span class="line">        job.save()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#仍返回item，使得运行窗口能看到爬到的数据</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure></li><li><p>在settings.py中找到<code>ITEM_PIPELINES</code>，改成如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;<span class="comment"># item处理方式</span></span><br><span class="line">   <span class="comment"># 'scrapy_code.pipelines.ScrapyCodePipeline': 300,</span></span><br><span class="line">   <span class="comment"># 'scrapy_code.pipelines.JsonExporterPipleline': 300,</span></span><br><span class="line">   <span class="comment"># 'scrapy_code.pipelines.MysqlTwistedPipline': 300,</span></span><br><span class="line">    <span class="string">'scrapy_code.pipelines.ElasticsearchPipeline'</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;学习了一下scrapy爬虫，记录一下过程。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="scrapy" scheme="http://yoursite.com/categories/scrapy/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="scrapy" scheme="http://yoursite.com/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>jar包部署</title>
    <link href="http://yoursite.com/2020/06/15/jar%E5%8C%85%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2020/06/15/jar%E5%8C%85%E9%83%A8%E7%BD%B2/</id>
    <published>2020-06-15T15:56:51.079Z</published>
    <updated>2020-10-08T14:59:38.534Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>将项目部署到CentOS上，简单记忆一下部署的方法。</p></blockquote><a id="more"></a><h3 id="前台运行项目（不能关掉shell）"><a href="#前台运行项目（不能关掉shell）" class="headerlink" title="前台运行项目（不能关掉shell）"></a>前台运行项目（不能关掉shell）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Java -jar xxxxx.jar</span><br></pre></td></tr></table></figure><h3 id="后台运行项目（可以关掉shell）"><a href="#后台运行项目（可以关掉shell）" class="headerlink" title="后台运行项目（可以关掉shell）"></a>后台运行项目（可以关掉shell）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar xxxxx.jar &amp;</span><br></pre></td></tr></table></figure><h3 id="后台运行项目不输出-out文件"><a href="#后台运行项目不输出-out文件" class="headerlink" title="后台运行项目不输出.out文件"></a>后台运行项目不输出.out文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar xxxxx.jar &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h3 id="后台运行项目只输出错误信息到文件"><a href="#后台运行项目只输出错误信息到文件" class="headerlink" title="后台运行项目只输出错误信息到文件"></a>后台运行项目只输出错误信息到文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar xxxxx.jar &gt;/dev/null 2&gt;error &amp;</span><br></pre></td></tr></table></figure><h3 id="停止项目"><a href="#停止项目" class="headerlink" title="停止项目"></a>停止项目</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp | grep 8080</span><br><span class="line">kill sid xxxx</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;将项目部署到CentOS上，简单记忆一下部署的方法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CentOS" scheme="http://yoursite.com/categories/CentOS/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7设置网络</title>
    <link href="http://yoursite.com/2020/05/20/CentOS7%E8%AE%BE%E7%BD%AE%E7%BD%91%E7%BB%9C/"/>
    <id>http://yoursite.com/2020/05/20/CentOS7%E8%AE%BE%E7%BD%AE%E7%BD%91%E7%BB%9C/</id>
    <published>2020-05-20T12:50:09.968Z</published>
    <updated>2020-10-16T01:53:03.906Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>CentOS7设置固定IP，记录一下过程</p></blockquote><a id="more"></a><p>本文设置的网络是<strong>NAT模式+固定IP</strong>。</p><h3 id="一、VM设置"><a href="#一、VM设置" class="headerlink" title="一、VM设置"></a>一、VM设置</h3><p>本文使用的虚拟机时VMware Workstation Pro。</p><h4 id="1、设置虚拟机的连接方式"><a href="#1、设置虚拟机的连接方式" class="headerlink" title="1、设置虚拟机的连接方式"></a>1、设置虚拟机的连接方式</h4><p>选择自己要设置的虚拟机，选择虚拟机(M)-&gt;设置，选择网咯适配器，选择为NAT模式。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/05/eUwPrtSz9C8gX5d.png" alt="image-20200520194124851" title="">                </div>                <div class="image-caption">image-20200520194124851</div>            </figure><h4 id="2、配置虚拟机的NAT模式具体地址参数"><a href="#2、配置虚拟机的NAT模式具体地址参数" class="headerlink" title="2、配置虚拟机的NAT模式具体地址参数"></a>2、配置虚拟机的NAT模式具体地址参数</h4><p>选择编辑(E)-&gt;虚拟机网络编辑器，点击更改设置。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/08/18/q5Co3VW1O6D9bBU.png" alt="image-20200818165231769" title="">                </div>                <div class="image-caption">image-20200818165231769</div>            </figure><p>选择VMnet8-&gt;取消勾选使用本地DHCP-&gt;设置自己的子网ip（最好设置和自己的主机在同一个域内）-&gt;选择NAT设置。记住NAT设置中的三个地址。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/08/18/dbp8e2uzNgZvcnJ.png" alt="image-20200818174649942" title="">                </div>                <div class="image-caption">image-20200818174649942</div>            </figure><p>找到计算机控制面板-&gt;网络和Internet-&gt;网络和共享中心-&gt;左侧的更改适配器设置。</p><p>先择VMnet8右键属性-&gt;选择IPv4属性-&gt;设置自定ip地址。<strong>这里ip地址设置为子网内的ip就可，注意不要和想设置的虚拟机固定IP相同。</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/08/29/Z5lXcBLrQV4tDMS.png" alt="image-20200818175557387" title="">                </div>                <div class="image-caption">image-20200818175557387</div>            </figure><h3 id="二、CentOS7设置"><a href="#二、CentOS7设置" class="headerlink" title="二、CentOS7设置"></a>二、CentOS7设置</h3><p>本文使用的虚拟机时VMware Workstation Pro。</p><h4 id="1、查看网络名和ip"><a href="#1、查看网络名和ip" class="headerlink" title="1、查看网络名和ip"></a>1、查看网络名和ip</h4><p>首先查看自己需要配置的<strong>网络名称</strong>和<strong>目前的ip地址</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/05/f9mvPKqQbAGILgy.png" alt="image-20200520202702641" title="">                </div>                <div class="image-caption">image-20200520202702641</div>            </figure><h4 id="2、修改ip地址文件-需要root权限"><a href="#2、修改ip地址文件-需要root权限" class="headerlink" title="2、修改ip地址文件(需要root权限)"></a>2、修改ip地址文件(需要root权限)</h4><p>查看文件夹下文件，找到和自己网络名相同的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/sysconfig/network-scripts/</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/05/mvdpBJWC5MePY4O.png" alt="image-20200520203141320" title="">                </div>                <div class="image-caption">image-20200520203141320</div>            </figure><p>编辑：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ifcfg-ens33</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/08/18/ZvXwiNpkzrY3lM2.png" alt="image-20200818180048862" title="">                </div>                <div class="image-caption">image-20200818180048862</div>            </figure><ul><li>BOOTPROTO：设置为静态ip</li><li>ONBOOT：开机启动</li><li>DNS1：这里直接设置为114.114.114.114</li><li>IPADDR：想设置的虚拟机的固定IP地址</li><li>NETMASK：掩码</li><li>GATEWAY：网关地址</li></ul><p>重启网络服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network.service</span><br></pre></td></tr></table></figure><p>验证：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ip addr#查看自己的ip地址</span><br><span class="line">ping 主机地址#windows通过ipconfig获得</span><br><span class="line">ping www.baidu.com#查看自己是否能连接到网络</span><br></pre></td></tr></table></figure><p>再从主机<code>ping 虚拟机固定ip</code>。</p><h4 id="3、添加hosts"><a href="#3、添加hosts" class="headerlink" title="3、添加hosts"></a>3、添加hosts</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure><p>在文件中添加映射即可。例如我是要配置hadoop集群，分别有<code>192.168.2.132</code>、<code>192.168.2.133</code>、<code>192.168.2.134</code>三台机子。可以在hosts中添加如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.2.132 hadoop132</span><br><span class="line">192.168.2.133 hadoop133</span><br><span class="line">192.168.2.134 hadoop134</span><br></pre></td></tr></table></figure><p>这时候就可以尝试ping各个主机了：</p><ul><li>从本机ping虚拟机：<code>ping 192.168.2.132</code></li><li>从虚拟机ping主机：<code>ping 主机ip</code></li><li>从虚拟机ping虚拟机：<code>ping hadoop133</code></li></ul><h4 id="4、修改hostname"><a href="#4、修改hostname" class="headerlink" title="4、修改hostname"></a>4、修改hostname</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname xxx</span><br></pre></td></tr></table></figure><p>如本机是<code>192.168.40.132</code>，则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname hadoop132</span><br></pre></td></tr></table></figure><p>然后可以输入如下命令检查hostname：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostname</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;CentOS7设置固定IP，记录一下过程&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CentOS" scheme="http://yoursite.com/categories/CentOS/"/>
    
    
      <category term="CentOS" scheme="http://yoursite.com/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7安装JDK1.8</title>
    <link href="http://yoursite.com/2020/05/17/CentOS7%E5%AE%89%E8%A3%85Jdk1.8/"/>
    <id>http://yoursite.com/2020/05/17/CentOS7%E5%AE%89%E8%A3%85Jdk1.8/</id>
    <published>2020-05-17T06:31:20.727Z</published>
    <updated>2020-10-08T14:48:10.462Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>为公司服务器安JDK，记录一下过程</p></blockquote><a id="more"></a><h3 id="第一步、卸载系统自带的OpenJDK及相关的java文件"><a href="#第一步、卸载系统自带的OpenJDK及相关的java文件" class="headerlink" title="第一步、卸载系统自带的OpenJDK及相关的java文件"></a>第一步、卸载系统自带的OpenJDK及相关的java文件</h3><h4 id="1、查看系统自带OpenJDK版本"><a href="#1、查看系统自带OpenJDK版本" class="headerlink" title="1、查看系统自带OpenJDK版本"></a>1、查看系统自带OpenJDK版本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><h4 id="2、查找需要删除的相关文件"><a href="#2、查找需要删除的相关文件" class="headerlink" title="2、查找需要删除的相关文件"></a>2、查找需要删除的相关文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep java</span><br></pre></td></tr></table></figure><p><strong>命令说明：</strong></p><ul><li>rpm：管理套件</li><li>-qa：使用询问模式，查询所有套件</li><li>grep：查找文件里符合条件的字符串</li><li>java：查找包含java字符串的文件</li></ul><h4 id="3、删除文件"><a href="#3、删除文件" class="headerlink" title="3、删除文件"></a>3、删除文件</h4><p>这里删除带OpenJDK字样的文件即可，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e --nodeps java-1.7.0-openjdk-1.7.0.111-2.6.7.8.el7.x86_64</span><br></pre></td></tr></table></figure><p><strong>命令介绍：</strong></p><ul><li>rpm：管理套件  </li><li>-e：删除指定的套件</li><li>–nodeps：不验证套件档的相互关联性</li></ul><h4 id="4、检查是否删除成功"><a href="#4、检查是否删除成功" class="headerlink" title="4、检查是否删除成功"></a>4、检查是否删除成功</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>出现<code>未找到命令...</code>则表示删除成功。</p><h3 id="第二步、下载JDK1-8"><a href="#第二步、下载JDK1-8" class="headerlink" title="第二步、下载JDK1.8"></a>第二步、下载JDK1.8</h3><h4 id="1、下载JDK"><a href="#1、下载JDK" class="headerlink" title="1、下载JDK"></a>1、下载JDK</h4><p>下载地址：<a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</a></p><p>这里下载对应的tar.gz文件即可CentOS7对应下载：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/05/Ys5ilj7qRezJS31.png" alt="QQ截图20200517133840" title="">                </div>                <div class="image-caption">QQ截图20200517133840</div>            </figure><p><strong>注意：</strong>现在下载低于1.8版本的jdk需要登录，从网上找到了一个账号，亲测可用。</p><p><strong>账号：</strong><a href="mailto:2696671285@qq.com">2696671285@qq.com</a></p><p><strong>密码：</strong>Oracle123</p><h4 id="2、上传JDK至服务器"><a href="#2、上传JDK至服务器" class="headerlink" title="2、上传JDK至服务器"></a>2、上传JDK至服务器</h4><p><strong>注意：</strong>如果上一步是直接在CentOS7中下载的这一步可以跳过。笔者是在win10系统中下载的JDK压缩包。</p><p>简单说一下，连接你的服务器，通过sftp服务将压缩包上传至服务器。这里好用推荐一个软件：<strong>Bitvise SSH Client</strong></p><p>登录服务器后，它会自动打开，shell窗口和Sftp窗口。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/05/vxmFlXpWOIwnS8q.png" alt="QQ截图20200517135255" title="">                </div>                <div class="image-caption">QQ截图20200517135255</div>            </figure><p>直接上传你的压缩包即可。</p><h3 id="第三步、安装JDK"><a href="#第三步、安装JDK" class="headerlink" title="第三步、安装JDK"></a>第三步、安装JDK</h3><h4 id="1、解压"><a href="#1、解压" class="headerlink" title="1、解压"></a>1、解压</h4><p>首先需要将压缩包移动到<code>/usr/java</code>文件夹下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp jdk-8u251-linux-x64.tar.gz /usr/java</span><br></pre></td></tr></table></figure><p>随后到<code>/usr/java</code>下解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/java</span><br><span class="line">tar -zxvf jdk-8u251-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><h4 id="2、配置环境变量"><a href="#2、配置环境变量" class="headerlink" title="2、配置环境变量"></a>2、配置环境变量</h4><p>修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>进入文本编辑状态下，光标走到文件最后一行，键盘按下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i</span><br></pre></td></tr></table></figure><p>进入插入状态：</p><p>在文本的最后一行粘贴如下：</p><p><strong>注意：</strong><code>JAVA_HOME=/usr/java/jdk1.8.0_251</code>就是你自己的目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\#java environment</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_251</span><br><span class="line">export CLASSPATH&#x3D;.:$&#123;JAVA_HOME&#125;&#x2F;jre&#x2F;lib&#x2F;rt.jar:$&#123;JAVA_HOME&#125;&#x2F;lib&#x2F;dt.jar:$&#123;JAVA_HOME&#125;&#x2F;lib&#x2F;tools.jar</span><br><span class="line">export PATH&#x3D;$PATH:$&#123;JAVA_HOME&#125;&#x2F;bin</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/05/1gUVSH2xoQmDleX.png" alt="image-20200517141720911" title="">                </div>                <div class="image-caption">image-20200517141720911</div>            </figure><p>点击<code>esc</code>进入命令模式，输入<code>：wq!</code>保存修改信息</p><p>然后键入以下命令使配置文件生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h4 id="3、检查是否配置成功"><a href="#3、检查是否配置成功" class="headerlink" title="3、检查是否配置成功"></a>3、检查是否配置成功</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/05/L2TdBOlJaFeIDGx.png" alt="image-20200517142140209" title="">                </div>                <div class="image-caption">image-20200517142140209</div>            </figure><p>至此JDK1.8就安装好了。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;为公司服务器安JDK，记录一下过程&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CentOS" scheme="http://yoursite.com/categories/CentOS/"/>
    
    
      <category term="CentOS" scheme="http://yoursite.com/tags/CentOS/"/>
    
      <category term="JDK" scheme="http://yoursite.com/tags/JDK/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7安装MySQL5.7</title>
    <link href="http://yoursite.com/2020/05/16/CentOS7%E5%AE%89%E8%A3%85MySQL/"/>
    <id>http://yoursite.com/2020/05/16/CentOS7%E5%AE%89%E8%A3%85MySQL/</id>
    <published>2020-05-16T12:20:45.876Z</published>
    <updated>2020-10-08T14:52:27.607Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>为公司服务器安装MySQL，记录一下过程</p></blockquote><a id="more"></a><p><strong>注意：</strong>在CentOS中默认是装有MariaDB的，但为了需要，还是要在系统中安装MySQL，而且安装完成之后可以直接覆盖掉MariaDB。</p><h3 id="第一步：-下载并安装MySQL官方的Yum-Repository"><a href="#第一步：-下载并安装MySQL官方的Yum-Repository" class="headerlink" title="第一步： 下载并安装MySQL官方的Yum Repository"></a>第一步： 下载并安装MySQL官方的Yum Repository</h3><h4 id="1、下载安装文件"><a href="#1、下载安装文件" class="headerlink" title="1、下载安装文件"></a>1、下载安装文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure><p>使用上面的命令就直接下载了安装用的Yum Repository，大概25KB的样子，然后就可以直接yum安装了。</p><h4 id="2、执行安装"><a href="#2、执行安装" class="headerlink" title="2、执行安装"></a>2、执行安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure><p>之后就开始安装MySQL服务器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure><p>安装完成，会出现<code>Complete!</code>的提示。</p><h3 id="第二步：-MySQL数据库设置"><a href="#第二步：-MySQL数据库设置" class="headerlink" title="第二步： MySQL数据库设置"></a>第二步： MySQL数据库设置</h3><h4 id="1、启动MySQL"><a href="#1、启动MySQL" class="headerlink" title="1、启动MySQL"></a>1、启动MySQL</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld.service</span><br></pre></td></tr></table></figure><p>查看MySQL运行状态，运行状态如图：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysqld.service</span><br></pre></td></tr></table></figure><h4 id="2、查找临时密码"><a href="#2、查找临时密码" class="headerlink" title="2、查找临时密码"></a>2、查找临时密码</h4><p>通过如下命令可以在日志文件中找出密码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep "password" /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>如果这里在日志文件中查找不到密码，很可能是之前安装过MySQL没有卸载干净。</p><p><strong>处理方法：</strong></p><ol><li><p>删除原来安装过的mysql残留的数据（这一步非常重要，问题就出在这）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /var/lib/mysql</span><br></pre></td></tr></table></figure></li><li><p>重启mysqld服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure></li><li><p>这时候再去找临时密码就能找到了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep 'temporary password' /var/log/mysqld.log</span><br></pre></td></tr></table></figure></li></ol><h4 id="3、进入数据库并修改密码"><a href="#3、进入数据库并修改密码" class="headerlink" title="3、进入数据库并修改密码"></a>3、进入数据库并修改密码</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><p>输入查找到的临时密码，此时不能做任何事情，因为MySQL默认必须修改密码之后才能操作数据库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER 'root'@'localhost' IDENTIFIED BY 'new password';</span><br></pre></td></tr></table></figure><p>其中‘new password’替换成你要设置的密码，注意:密码设置必须要大小写字母数字和特殊符号（,/‘;:等）,不然不能配置成功</p><p>如果要修改为root这样的弱密码，需要进行以下配置：</p><p>查看密码策略</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like '%password%';</span><br></pre></td></tr></table></figure><p>修改密码策略</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br></pre></td></tr></table></figure><p>在文件中添加一下配置。</p><p>选择0（LOW），1（MEDIUM），2（STRONG）其中一种，选择2需要提供密码字典文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">添加validate_password_policy配置</span></span><br><span class="line">validate_password_policy=0</span><br><span class="line"><span class="meta">#</span><span class="bash">关闭密码策略</span></span><br><span class="line">validate_password = off</span><br></pre></td></tr></table></figure><p>重启mysql服务使配置生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><p>然后就可以修改为弱密码了。</p><h3 id="第三步：-开启MySQL远程访问"><a href="#第三步：-开启MySQL远程访问" class="headerlink" title="第三步： 开启MySQL远程访问"></a>第三步： 开启MySQL远程访问</h3><h4 id="1、开启MySQL的远程访问"><a href="#1、开启MySQL的远程访问" class="headerlink" title="1、开启MySQL的远程访问"></a>1、开启MySQL的远程访问</h4><p>执行以下命令开启远程访问限制</p><p><strong>注意：</strong></p><p>1、下面命令开启的可访问数据库的IP： 192.168.0.1，如要开启所有的，用%代替IP</p><p>2、需要用自己的密码代替下面的<code>password</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to 'root'@'192.168.0.1' identified by 'password' with grant option;</span><br></pre></td></tr></table></figure><p>然后再输入下面两行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flush privileges; </span><br><span class="line">exit;</span><br></pre></td></tr></table></figure><h4 id="2、为firewall添加开放端口"><a href="#2、为firewall添加开放端口" class="headerlink" title="2、为firewall添加开放端口"></a>2、为firewall添加开放端口</h4><p>添加mysql端口3306</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br></pre></td></tr></table></figure><p>然后再重新载入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;为公司服务器安装MySQL，记录一下过程&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CentOS" scheme="http://yoursite.com/categories/CentOS/"/>
    
    
      <category term="CentOS" scheme="http://yoursite.com/tags/CentOS/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
</feed>

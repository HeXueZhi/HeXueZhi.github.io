<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>何小智の博客</title>
  
  <subtitle>好记性不如烂笔头</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-19T02:55:18.116Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>RenKe XZ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>近期面试经验总结</title>
    <link href="http://yoursite.com/2020/07/19/%E8%BF%91%E6%9C%9F%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/07/19/%E8%BF%91%E6%9C%9F%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/</id>
    <published>2020-07-19T02:22:17.131Z</published>
    <updated>2020-07-19T02:55:18.116Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>近期面试了几个后端岗位，记录一下面试得出的经验。</p></blockquote><a id="more"></a><h2 id="一、面试中的问题"><a href="#一、面试中的问题" class="headerlink" title="一、面试中的问题"></a>一、面试中的问题</h2><h4 id="1-问简历上的项目"><a href="#1-问简历上的项目" class="headerlink" title="1.问简历上的项目"></a>1.问简历上的项目</h4><p>大体来说就是会照着简历上写的项目来进行提问。<br>首先，就是项目的总体框架，涉及到的技术栈。会对涉及到的知识进行提问。</p><p>其次，在项目中的具体工作，就是你负责了哪一部分。项目中遇到的困难，以及如何解决的。</p><p>最后，面试官问这些一个是测试你的技术掌握的深度，再一个就是看看你对技术的热情程度。所以需要在这个过程中体现出来自己对技术的热枕。</p><h4 id="2-操作系统相关"><a href="#2-操作系统相关" class="headerlink" title="2.操作系统相关"></a>2.操作系统相关</h4><ul><li>进程管理</li><li>内存管理</li><li>死锁相关</li></ul><h4 id="3-计算机网络相关"><a href="#3-计算机网络相关" class="headerlink" title="3.计算机网络相关"></a>3.计算机网络相关</h4><ul><li>http<ul><li>https</li><li>http2.0</li></ul></li><li>osi和tcp/ip网络模型</li><li>Tcp三次握手，四次挥手。这里不仅要知道怎么握手，还要知道为什么是三次和四次</li><li>cookie和session</li><li>从输入网址到显示页面，发生了什么</li></ul><h4 id="4-mysql相关"><a href="#4-mysql相关" class="headerlink" title="4.mysql相关"></a>4.mysql相关</h4><ul><li>事务<ul><li>定义及四个特征</li><li>隔离级别</li></ul></li><li>innodb和myisam存储引擎</li><li>脏读，不可重复度和幻读</li><li>索引<ul><li>索引的类型</li><li>匹配原则</li><li>底层数据结构：B+树</li></ul></li></ul><h4 id="5-java"><a href="#5-java" class="headerlink" title="5.java"></a>5.java</h4><h5 id="5-1-java集合"><a href="#5-1-java集合" class="headerlink" title="5.1 java集合"></a>5.1 java集合</h5><ul><li>hashmap</li><li>arrayList</li></ul><h5 id="5-2-JVM"><a href="#5-2-JVM" class="headerlink" title="5.2  JVM"></a>5.2  JVM</h5><ul><li>内存机构</li><li>垃圾回收机制</li></ul><h5 id="5-3-多线程"><a href="#5-3-多线程" class="headerlink" title="5.3 多线程"></a>5.3 多线程</h5><ul><li>hashmap、hashtable、CurrentHashMap</li><li>锁</li></ul><h2 id="二、面试经验"><a href="#二、面试经验" class="headerlink" title="二、面试经验"></a>二、面试经验</h2><h4 id="1-算法方面"><a href="#1-算法方面" class="headerlink" title="1.算法方面"></a>1.算法方面</h4><p>首先，要弄清楚面试官的需求。以及一些题目的要求。所以第一步是<strong>一定不要马上写代码</strong>！！！拿到题目要问清楚面试官的具体要求，然后把自己的具体思路讲述给面试官。<strong>思路得到面试官肯定后，再写代码。</strong></p><p>其次，在写代码的过程中，一定要注意程序的<strong>鲁棒性</strong>。特别要考虑一些空值和边界值的情况</p><p>最后，面试官出的题目可能是连环题，在你写完代码之后，会问你写的程序的<strong>时间复杂度和空间复杂度</strong>。然后再问你<strong>优化方案</strong>。</p><h4 id="2-项目经历方面"><a href="#2-项目经历方面" class="headerlink" title="2.项目经历方面"></a>2.项目经历方面</h4><p>首先一个明确你在项目中的工作，然后是技术难点和解决方案，也有可能是技术亮点。</p><p>这类问题回答过程中一定要体现自己对于技术的热情。</p><h4 id="3-基础知识方面"><a href="#3-基础知识方面" class="headerlink" title="3.基础知识方面"></a>3.基础知识方面</h4><p>第一种就是单纯问你的基础知识，这方面理解的基础上记忆就好了。</p><p>第二种就比较复杂。面试官会结合具体的实际业务场景来对基础知识进行提问。这一块要求对知识的掌握程度更加深刻。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;近期面试了几个后端岗位，记录一下面试得出的经验。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="面经" scheme="http://yoursite.com/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>字节跳动懂车帝后端面经</title>
    <link href="http://yoursite.com/2020/07/17/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E6%87%82%E8%BD%A6%E5%B8%9D%E5%90%8E%E7%AB%AF%E9%9D%A2%E7%BB%8F/"/>
    <id>http://yoursite.com/2020/07/17/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E6%87%82%E8%BD%A6%E5%B8%9D%E5%90%8E%E7%AB%AF%E9%9D%A2%E7%BB%8F/</id>
    <published>2020-07-17T12:45:07.499Z</published>
    <updated>2020-07-23T08:34:03.353Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>找了学长内推了字节跳动懂车帝的后端岗位，这也是作者本人的第一次面试，有纪念意义，所以记录一下过程。</p></blockquote><a id="more"></a><h2 id="字节跳动懂车帝面经"><a href="#字节跳动懂车帝面经" class="headerlink" title="字节跳动懂车帝面经"></a>字节跳动懂车帝面经</h2><p>懂车帝后端主要用Go和python语言，因此相对来说就会少问一些java方面的知识。</p><p>面试的平台是在牛客网上，上来先做了一个简短的自我介绍，然后就直接开始问问题了。</p><h4 id="问题1、从长度未知的链表中随机取出一个数。"><a href="#问题1、从长度未知的链表中随机取出一个数。" class="headerlink" title="问题1、从长度未知的链表中随机取出一个数。"></a>问题1、从长度未知的链表中随机取出一个数。</h4><p>首先，需要说明这是一个经典的问题，需要用蓄水池抽样算法。但是本人当时并不知道这个算法。因此想出了两个方案，但是面试官都说不对，因此最后在面试官的提示下需要回去看看蓄水池算法。</p><p>错误方法1：先获取链表的长度，然后取链表长度的随机数，再取相应随机数位置的数。</p><p>面试官说不能获取链表的长度。</p><p>错误方法2：先生成一个随机数，然后取随机数位置上的链表上的数。会出现两种情况，一种是数到相应的位置上有数，直接取。第二种情况，向后遍历链表直到链表尾，发现随机数大于链表长度，这时候用随机数对链表长度取余数。取余数位置上的数。</p><p>面试官说还是需要获取到链表的长度。WTF？向后遍历到链表的尾部的同时就能够记录到链表的长度的啊。</p><p>正确答案：<strong>蓄水池取水算法</strong></p><p><strong>前提：</strong>给定一个数据流，数据流长度N很大，且N直到处理完所有数据之前都不可知，请问如何在只遍历一遍数据（O(N)）的情况下，能够随机选取出m个不重复的数据。<code>（这里面试官没有说出来只能够遍历一次链表）</code>。本题面试官提出的是取一个数据，因此把m设置为1即可。</p><p><strong>算法思路大致如下：</strong></p><ol><li>如果接收的数据量小于m，则依次放入蓄水池。</li><li>当遍历到第i个数据时，i &gt;= m，在[0, i]范围内取以随机数d，若d的落在[0, m-1]范围内，则用这第i个数据替换蓄水池中的第d个数据。</li><li>重复步骤2。</li></ol><p><strong>算法随机性的证明：</strong></p><p><strong>第i个数据最后能够留在蓄水池中的概率=第i个数据进入过蓄水池的概率*第i个数据不被替换的概率</strong>（第i+1到第N次处理数据都不会被替换）。</p><ol><li>当<code>i&lt;=m</code>时，数据直接放进蓄水池，所以<strong>第i个数据进入过蓄水池的概率=1</strong>。</li><li>当<code>i&gt;m</code>时，在[1,i]内选取随机数d，如果<code>d&lt;=m</code>，则使用第i个数据替换蓄水池中第d个数据，因此<strong>第i个数据进入蓄水池的概率=m/i</strong>。</li><li>当<code>i&lt;=m</code>时，程序从接收到第<code>m+1</code>个数据时开始执行替换操作，第<code>m+1</code>次处理会替换池中数据的为<code>m/(m+1)</code>，会替换掉第<code>i</code>个数据的概率为<code>1/m</code>，则第<code>m+1</code>次处理替换掉第<code>i</code>个数据的概率为<code>(m/(m+1))*(1/m)=1/(m+1)</code>，不被替换的概率为<code>1-1/(m+1)=m/(m+1)</code>。依次，第<code>m+2</code>次处理不替换掉第i个数据概率为<code>(m+1)/(m+2)</code>…第<code>N</code>次处理不替换掉第i个数据的概率为<code>(N-1)/N</code>。所以，之后第<code>i</code>个数据不被替换的概率=<code>m/(m+1)*(m+1)/(m+2)*...*(N-1)/N=m/N</code>。（<strong>这里如果m==1，表示只取一个数据，因此概率为1/N</strong>）</li><li>当<code>i&gt;m</code>时，程序从接收到第<code>i+1</code>个数据时开始有可能替换第i个数据。则参考上述第3点，<strong>之后第i个数据不被替换的概率=i/N</strong>。</li><li>结合第1点和第3点可知，当<code>i&lt;=m</code>时，第i个接收到的数据最后留在蓄水池中的概率=<code>1*m/N=m/N</code>。结合第2点和第4点可知，当<code>i&gt;m</code>时，第i个接收到的数据留在蓄水池中的概率=<code>m/i*i/N=m/N</code>。综上可知，<strong>每个数据最后被选中留在蓄水池中的概率为m/N</strong>。</li></ol><p>这个算法建立在统计学基础上，很巧妙地获得了<code>&quot;m/N&quot;</code>这个概率。</p><h4 id="问题2、写一个斐波那契数列。给n求n位置上的值"><a href="#问题2、写一个斐波那契数列。给n求n位置上的值" class="headerlink" title="问题2、写一个斐波那契数列。给n求n位置上的值"></a>问题2、写一个斐波那契数列。给n求n位置上的值</h4><p>0、1、1、2、3、5……</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib(n<span class="number">-1</span>)+fib(n<span class="number">-2</span>)</span><br></pre></td></tr></table></figure><h4 id="问题3、斐波那契数列递归算法的时间空间复杂度，以及如何优化"><a href="#问题3、斐波那契数列递归算法的时间空间复杂度，以及如何优化" class="headerlink" title="问题3、斐波那契数列递归算法的时间空间复杂度，以及如何优化"></a>问题3、斐波那契数列递归算法的时间空间复杂度，以及如何优化</h4><p>时间复杂度O（n）</p><p>空间复杂度O（n）</p><p>优化采用自底向下的动态规划算法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    res = [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">        res.append(res[<span class="number">-1</span>]+res[<span class="number">-2</span>])</span><br><span class="line">    <span class="keyword">return</span> res[n]</span><br></pre></td></tr></table></figure><p>这种算法需要空间空间复杂度为O(n),可以再优化为常数级别。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    num1 = <span class="number">0</span></span><br><span class="line">    num2 = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> num1</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,n+<span class="number">1</span>):</span><br><span class="line">        num1,num2 = num2,num1+num2</span><br><span class="line">    <span class="keyword">return</span> num2</span><br></pre></td></tr></table></figure><p>说起来惭愧，这是《剑指offer》上的原题，面试之前作者并没有读过，当时又非常紧张，没有写出来这道题。面完试感觉这道题是easy的。</p><h4 id="问题4-操作系统什么时候会从用户态进入到内核态"><a href="#问题4-操作系统什么时候会从用户态进入到内核态" class="headerlink" title="问题4.操作系统什么时候会从用户态进入到内核态"></a>问题4.操作系统什么时候会从用户态进入到内核态</h4><p>内核态主要涉及到一些特权指令的操作。发生系统调用时会从用户态转移到内核态。</p><p><strong>系统调用：</strong></p><ul><li>设备管理</li><li>文件管理</li><li>进程控制</li><li>进程通信</li><li>内存管理</li></ul><h4 id="问题5-Tcp拥塞控制"><a href="#问题5-Tcp拥塞控制" class="headerlink" title="问题5.Tcp拥塞控制"></a>问题5.Tcp拥塞控制</h4><ul><li>慢开始</li><li>拥塞避免</li><li>快重传</li><li>快恢复</li></ul><p><strong>慢开始：</strong>指数增长就是将拥塞窗口cwnd设置为1，没经过一个RTT，cwnd加倍，指数增长。知道到达满开始门限阈值采用拥塞避免算法。</p><p><strong>拥塞避免：</strong>线性zeng’zhang每经过一个RTT就增加一个MSS大小。知道出现第一次超时（网络拥塞），就将慢开始门限设置为此时拥塞窗口值的一半。然后把cwnd重置为1。执行慢开始算法。</p><p><strong>快重传：</strong>当发送方接收到3个冗余ACK时，就认为确认的报文后面的报文段丢失了。并立即对缺失的报文段重传。</p><p><strong>快恢复：</strong>就是发生冗余ACK时间时候，将慢开始门限设置为当前的一半，然后将cwnd设置慢开始门限值，开始拥塞避免算法。</p><h4 id="问题6-进程通信方式"><a href="#问题6-进程通信方式" class="headerlink" title="问题6.进程通信方式"></a>问题6.进程通信方式</h4><ol><li>管道pipe：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。</li><li>命名管道FIFO：有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。</li><li>消息队列MessageQueue：消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。</li><li>共享存储SharedMemory：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号量，配合使用，来实现进程间的同步和通信。</li><li>信号量Semaphore：信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。</li><li>套接字Socket：套解口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同及其间的进程通信。</li><li>信号 ( sinal ) ： 信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。</li></ol><h4 id="问题7-Tcp连接三次握手，为什么不是两次"><a href="#问题7-Tcp连接三次握手，为什么不是两次" class="headerlink" title="问题7.Tcp连接三次握手，为什么不是两次"></a>问题7.Tcp连接三次握手，为什么不是两次</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/07/17/TeGwm2hYEJRzcB4.jpg" alt="654b2aab47dbab75a9813b891790d60" title="">                </div>                <div class="image-caption">654b2aab47dbab75a9813b891790d60</div>            </figure><p><strong>第一次握手：</strong>客户机向服务器发送<strong>连接请求报文</strong>。</p><p><strong>第二次握手：</strong>服务器的TCP收到连接请求报文之后，同意链接，向客户机发回确认，为TCP连接分配TCP缓存和变量。</p><p><strong>第三次握手：</strong>客户机收到确认报文，向服务器发送确认报文为连接分配缓存和变量。</p><p><strong>为什么不是两次？</strong></p><p>​    <strong>防止客户端失效的连接请求报文段突然又传到服务器</strong></p><p>例如以下情况如果使用两次握手：</p><ul><li>如果客户端向服务器发送第一次连接请求在网络节点上滞留了，没有收到服务器的确认，于是又重新发送了一次连接请求</li><li>服务器收到客户端的第二次请求发送确认，则连接建立完成</li><li>服务器客户端进行数据传输，传输完成断开连接。</li><li>此时，在网络上滞留的客户端第一次连接请求到达服务器，服务器发送确认连接但是客户端实际上并没有发送请求，因此不会理睬服务器发送的请求。但是服务器认为连接已完成，并等待客户端进行数据传输。这样会造成资源的浪费</li></ul><p>如果采用三次握手的话：</p><ul><li>滞留在网络上的客户端第一次请求到达服务器之后，服务器发送确认，但实际上服务器并没有发送请求，因此不会理睬服务器的确认，故不会发送确认，服务器等不到客户端的确认则连接建立失败。这样就防止了客户端失效的连接请求报文段突然又传到服务器</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这是作者本人的第一次面试，面试的时候很紧张。面试官出了编程题马上就上手去写，没有思考的过程，也没有去问具体的一些要求。导致越写越慌，到最后连斐波那契数列这样的基础题，也没有写出来。基础知识也很不牢靠，一些简单的问题，也没有答上来。</p><p>在面试后在网上找了一些《剑指offer》的资料，发现前几章很有帮助，其中比较重要的一点就是，拿到面试题先思考，不理解需求的问，想清楚了之后再具体的写代码。</p><p><strong>一些面试题答案的参考文献：</strong></p><p><a href="https://www.jianshu.com/p/7a9ea6ece2af" target="_blank" rel="noopener">https://www.jianshu.com/p/7a9ea6ece2af</a></p><p><a href="https://blog.csdn.net/zhaohong_bo/article/details/89552188" target="_blank" rel="noopener">https://blog.csdn.net/zhaohong_bo/article/details/89552188</a></p><p><a href="https://blog.csdn.net/qq_41727218/article/details/87881235" target="_blank" rel="noopener">https://blog.csdn.net/qq_41727218/article/details/87881235</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;找了学长内推了字节跳动懂车帝的后端岗位，这也是作者本人的第一次面试，有纪念意义，所以记录一下过程。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="面经" scheme="http://yoursite.com/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
      <category term="字节跳动" scheme="http://yoursite.com/tags/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/"/>
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>python集合的一些基本操作</title>
    <link href="http://yoursite.com/2020/07/12/python%E9%9B%86%E5%90%88%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2020/07/12/python%E9%9B%86%E5%90%88%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</id>
    <published>2020-07-12T13:03:11.494Z</published>
    <updated>2020-07-12T13:36:16.864Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>刷题过程中有时需要用到集合相关的数据结构，主要是list、set和dict。记录一下如何在刷题过程中应用这些结构。</p></blockquote><a id="more"></a><h2 id="python集合的一些基本操作"><a href="#python集合的一些基本操作" class="headerlink" title="python集合的一些基本操作"></a>python集合的一些基本操作</h2><h3 id="一、list"><a href="#一、list" class="headerlink" title="一、list"></a>一、list</h3><h4 id="1、列表的创建"><a href="#1、列表的创建" class="headerlink" title="1、列表的创建"></a>1、列表的创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nums = []</span><br><span class="line"><span class="comment">#快速创建队列并赋值</span></span><br><span class="line">nums = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)]</span><br><span class="line"><span class="comment">#快速创建二维数组，并赋值</span></span><br><span class="line">nums = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(m)]</span><br></pre></td></tr></table></figure><h4 id="2、列表的压入"><a href="#2、列表的压入" class="headerlink" title="2、列表的压入"></a>2、列表的压入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nums.append(x)</span><br><span class="line">nums.insert(index,x)<span class="comment">#在index插入x</span></span><br></pre></td></tr></table></figure><h4 id="3、列表的删除"><a href="#3、列表的删除" class="headerlink" title="3、列表的删除"></a>3、列表的删除</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = nums.pop(<span class="number">1</span>)<span class="comment">#删除index为1的元素</span></span><br><span class="line">list.remove(<span class="number">2</span>)<span class="comment">#删除元素2的第一个匹配项</span></span><br></pre></td></tr></table></figure><h4 id="4、列表排序"><a href="#4、列表排序" class="headerlink" title="4、列表排序"></a>4、列表排序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nums.sort()</span><br><span class="line">nums.sort(key=<span class="literal">None</span>,reverse=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h4 id="5、反转列表"><a href="#5、反转列表" class="headerlink" title="5、反转列表"></a>5、反转列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums.reverse()</span><br></pre></td></tr></table></figure><h4 id="6、复制列表"><a href="#6、复制列表" class="headerlink" title="6、复制列表"></a>6、复制列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums.copy()</span><br></pre></td></tr></table></figure><h4 id="7、列表中某个元素出现的个数"><a href="#7、列表中某个元素出现的个数" class="headerlink" title="7、列表中某个元素出现的个数"></a>7、列表中某个元素出现的个数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums.count(x)<span class="comment">#x出现的次数</span></span><br></pre></td></tr></table></figure><h4 id="8、某个值的第一个匹配项的index"><a href="#8、某个值的第一个匹配项的index" class="headerlink" title="8、某个值的第一个匹配项的index"></a>8、某个值的第一个匹配项的index</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums.index(x)</span><br></pre></td></tr></table></figure><h3 id="二、set"><a href="#二、set" class="headerlink" title="二、set"></a>二、set</h3><h4 id="1、集合的创建"><a href="#1、集合的创建" class="headerlink" title="1、集合的创建"></a>1、集合的创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums = &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="2、集合的压入"><a href="#2、集合的压入" class="headerlink" title="2、集合的压入"></a>2、集合的压入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nums.add(x)</span><br><span class="line"><span class="comment">#高级方法</span></span><br><span class="line">nums.update(x)<span class="comment">#x可以是列表、元组、字典，且x可以又多个，用逗号隔开</span></span><br><span class="line">nums.update([<span class="number">1</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line"><span class="comment">#&#123;1, 3, 4, 5, 6&#125;</span></span><br></pre></td></tr></table></figure><h4 id="3、集合的删除"><a href="#3、集合的删除" class="headerlink" title="3、集合的删除"></a>3、集合的删除</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nums.remove(x)<span class="comment">#如果元素不存在会发生错误</span></span><br><span class="line">nums.discard(x)<span class="comment">#如果元素不存在不会发生错误</span></span><br></pre></td></tr></table></figure><h3 id="三、dict"><a href="#三、dict" class="headerlink" title="三、dict"></a>三、dict</h3><h4 id="1、字典的创建"><a href="#1、字典的创建" class="headerlink" title="1、字典的创建"></a>1、字典的创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums = &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="2、字典的压入"><a href="#2、字典的压入" class="headerlink" title="2、字典的压入"></a>2、字典的压入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums[x] = y</span><br></pre></td></tr></table></figure><h4 id="3、字典的删除"><a href="#3、字典的删除" class="headerlink" title="3、字典的删除"></a>3、字典的删除</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> nums[x]</span><br></pre></td></tr></table></figure><h4 id="4、字典的遍历"><a href="#4、字典的遍历" class="headerlink" title="4、字典的遍历"></a>4、字典的遍历</h4><h5 id="4-1、遍历键"><a href="#4-1、遍历键" class="headerlink" title="4.1、遍历键"></a>4.1、遍历键</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> nums:</span><br><span class="line">    print(nums[key])</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> nums.keys():</span><br></pre></td></tr></table></figure><h5 id="4-2、遍历值"><a href="#4-2、遍历值" class="headerlink" title="4.2、遍历值"></a>4.2、遍历值</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> nums.values():</span><br><span class="line">    print(value)</span><br></pre></td></tr></table></figure><h5 id="4-3、遍历键和值"><a href="#4-3、遍历键和值" class="headerlink" title="4.3、遍历键和值"></a>4.3、遍历键和值</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> nums.items():</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;刷题过程中有时需要用到集合相关的数据结构，主要是list、set和dict。记录一下如何在刷题过程中应用这些结构。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>python刷题过程中的栈、队列和堆的实现</title>
    <link href="http://yoursite.com/2020/07/12/python%E5%88%B7%E9%A2%98%E7%9A%84%E6%A0%88%E9%98%9F%E5%88%97%E5%92%8C%E5%A0%86%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2020/07/12/python%E5%88%B7%E9%A2%98%E7%9A%84%E6%A0%88%E9%98%9F%E5%88%97%E5%92%8C%E5%A0%86%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-07-12T12:49:55.263Z</published>
    <updated>2020-07-12T13:02:45.561Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>刷题过程中有时需要用到栈、队列和堆的数据结构，记录一下如何在刷题过程中快速应用</p></blockquote><a id="more"></a><h2 id="python刷题的栈、队列和堆的实现"><a href="#python刷题的栈、队列和堆的实现" class="headerlink" title="python刷题的栈、队列和堆的实现"></a>python刷题的栈、队列和堆的实现</h2><h3 id="一、栈"><a href="#一、栈" class="headerlink" title="一、栈"></a>一、栈</h3><h4 id="1、栈的创建"><a href="#1、栈的创建" class="headerlink" title="1、栈的创建"></a>1、栈的创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stack = []</span><br></pre></td></tr></table></figure><h4 id="2、栈的压入"><a href="#2、栈的压入" class="headerlink" title="2、栈的压入"></a>2、栈的压入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stack.append(x)</span><br></pre></td></tr></table></figure><h4 id="3、栈的弹出"><a href="#3、栈的弹出" class="headerlink" title="3、栈的弹出"></a>3、栈的弹出</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = stack.pop()</span><br></pre></td></tr></table></figure><h3 id="二、队列"><a href="#二、队列" class="headerlink" title="二、队列"></a>二、队列</h3><h4 id="1、队列的创建"><a href="#1、队列的创建" class="headerlink" title="1、队列的创建"></a>1、队列的创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line">queue = deque()</span><br></pre></td></tr></table></figure><h4 id="2、队列的压入"><a href="#2、队列的压入" class="headerlink" title="2、队列的压入"></a>2、队列的压入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queue.append(x)</span><br></pre></td></tr></table></figure><h4 id="3、队列的弹出"><a href="#3、队列的弹出" class="headerlink" title="3、队列的弹出"></a>3、队列的弹出</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = stack.popleft()</span><br></pre></td></tr></table></figure><h3 id="三、堆（最小堆）"><a href="#三、堆（最小堆）" class="headerlink" title="三、堆（最小堆）"></a>三、堆（最小堆）</h3><p><strong>注意：</strong>heapq默认是创建的最小堆，如果需要最大堆，就将<code>-x</code>存入堆中。</p><h4 id="1、栈的创建-1"><a href="#1、栈的创建-1" class="headerlink" title="1、栈的创建"></a>1、栈的创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line">heap = []<span class="comment">#新建</span></span><br><span class="line"><span class="comment">#或者将列表变成小顶堆</span></span><br><span class="line">nums = [......]</span><br><span class="line">heapq.heapify(nums)</span><br></pre></td></tr></table></figure><h4 id="2、堆的压入"><a href="#2、堆的压入" class="headerlink" title="2、堆的压入"></a>2、堆的压入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heapq.heappush(heap,x)</span><br></pre></td></tr></table></figure><h4 id="3、堆的弹出"><a href="#3、堆的弹出" class="headerlink" title="3、堆的弹出"></a>3、堆的弹出</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heapq.heappop(heaq)</span><br></pre></td></tr></table></figure><h4 id="4、寻找序列中最大或最小的N个元素"><a href="#4、寻找序列中最大或最小的N个元素" class="headerlink" title="4、寻找序列中最大或最小的N个元素"></a>4、寻找序列中最大或最小的N个元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lista = [<span class="number">64</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">83</span>, <span class="number">85</span>, <span class="number">50</span>, <span class="number">10</span>, <span class="number">49</span>, <span class="number">28</span>, <span class="number">60</span>]</span><br><span class="line">print(heapq.nlargest(<span class="number">3</span>, lista)) <span class="comment"># [93, 92, 85]</span></span><br><span class="line">print(heapq.nsmallest(<span class="number">3</span>, lista)) <span class="comment"># [10, 28, 49]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;刷题过程中有时需要用到栈、队列和堆的数据结构，记录一下如何在刷题过程中快速应用&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>win10下运行hadoop的wordcount程序报错</title>
    <link href="http://yoursite.com/2020/06/27/WordCount%E7%A8%8B%E5%BA%8F%E6%8A%A5%E9%94%99/"/>
    <id>http://yoursite.com/2020/06/27/WordCount%E7%A8%8B%E5%BA%8F%E6%8A%A5%E9%94%99/</id>
    <published>2020-06-27T12:15:08.039Z</published>
    <updated>2020-06-27T12:29:58.709Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>学习hadoop的过程中遇到了一个bug，记录一下过程</p></blockquote><a id="more"></a><h2 id="Exception-in-thread“main”java-lang-UnsatisfiedLinkError-org-apache-hadoop-io-nativeio-NativeIO-Windows-access0-Ljava-lang-String-I-Z"><a href="#Exception-in-thread“main”java-lang-UnsatisfiedLinkError-org-apache-hadoop-io-nativeio-NativeIO-Windows-access0-Ljava-lang-String-I-Z" class="headerlink" title="Exception in thread“main”java.lang.UnsatisfiedLinkError: org.apache.hadoop.io.nativeio.NativeIO$Windows.access0(Ljava/lang/String;I)Z"></a>Exception in thread“main”java.lang.UnsatisfiedLinkError: org.apache.hadoop.io.nativeio.NativeIO$Windows.access0(Ljava/lang/String;I)Z</h2><h3 id="第一步、检查系统环境变量"><a href="#第一步、检查系统环境变量" class="headerlink" title="第一步、检查系统环境变量"></a>第一步、检查系统环境变量</h3><h4 id="1、检查HADOOP-HOME"><a href="#1、检查HADOOP-HOME" class="headerlink" title="1、检查HADOOP_HOME"></a>1、检查HADOOP_HOME</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/27/lYMTFLXqh4tjRH5.png" alt="image-20200627202154495" title="">                </div>                <div class="image-caption">image-20200627202154495</div>            </figure><h4 id="2、检查PATH"><a href="#2、检查PATH" class="headerlink" title="2、检查PATH"></a>2、检查PATH</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/27/vYaiKe8wSRZIodT.png" alt="image-20200627202320374" title="">                </div>                <div class="image-caption">image-20200627202320374</div>            </figure><h3 id="第二步、检查hadoop-bin文件夹"><a href="#第二步、检查hadoop-bin文件夹" class="headerlink" title="第二步、检查hadoop/bin文件夹"></a>第二步、检查hadoop/bin文件夹</h3><p>主要检查是否有<code>winutils.exe</code>和<code>hadoop.dll</code>两个文件。</p><p>如果没有的话请从网上下载，要下载对应版本的文件。</p><h3 id="第三步、检查C-Windows-System32文件夹"><a href="#第三步、检查C-Windows-System32文件夹" class="headerlink" title="第三步、检查C:\Windows\System32文件夹"></a>第三步、检查C:\Windows\System32文件夹</h3><p>检查是否有<code>hadoop.dll</code>文件，如果没有的话，从hadoop/bin文件夹下复制过去。</p><p>文章来源：<a href="https://sparkbyexamples.com/spark/spark-hadoop-exception-in-thread-main-java-lang-unsatisfiedlinkerror-org-apache-hadoop-io-nativeio-nativeiowindows-access0ljava-lang-stringiz/" target="_blank" rel="noopener">https://sparkbyexamples.com/spark/spark-hadoop-exception-in-thread-main-java-lang-unsatisfiedlinkerror-org-apache-hadoop-io-nativeio-nativeiowindows-access0ljava-lang-stringiz/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;学习hadoop的过程中遇到了一个bug，记录一下过程&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="hadoop" scheme="http://yoursite.com/categories/hadoop/"/>
    
    
      <category term="hadoop" scheme="http://yoursite.com/tags/hadoop/"/>
    
      <category term="wordcount" scheme="http://yoursite.com/tags/wordcount/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7设置防火墙</title>
    <link href="http://yoursite.com/2020/06/26/CentOS7%E9%98%B2%E7%81%AB%E5%A2%99%E8%AE%BE%E7%BD%AE/"/>
    <id>http://yoursite.com/2020/06/26/CentOS7%E9%98%B2%E7%81%AB%E5%A2%99%E8%AE%BE%E7%BD%AE/</id>
    <published>2020-06-26T04:22:20.489Z</published>
    <updated>2020-07-18T10:35:27.636Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>CentOS7设置防火墙，记录一下过程</p></blockquote><a id="more"></a><h2 id="CentOS7设置防火墙"><a href="#CentOS7设置防火墙" class="headerlink" title="CentOS7设置防火墙"></a>CentOS7设置防火墙</h2><h4 id="1、防火墙设置"><a href="#1、防火墙设置" class="headerlink" title="1、防火墙设置"></a>1、防火墙设置</h4><ul><li><strong>启动防火墙</strong>：<code>systemctl start firewalld.service</code></li><li><strong>关闭防火墙</strong>：<code>systemctl stop firewalld.service</code></li><li><strong>重启防火墙</strong>：<code>systemctl restart firewalld.service</code></li><li><strong>显示防火墙状态</strong>：<code>systemctl status firewalld.service</code></li><li><strong>开机自动开启防火墙</strong>：<code>systemctl enable firewalld.service</code></li><li><strong>开机禁用防火墙</strong>：<code>systemctl disable firewalld.service</code></li><li><strong>查看防火墙是否开机启动</strong>：<code>systemctl is-enabled firewalld.service</code></li><li>查看已启动的服务列表：<code>systemctl list-unit-files|grep enabled</code></li><li>查看启动失败的服务列表：<code>systemctl --failed</code></li></ul><h4 id="2、防火墙配置"><a href="#2、防火墙配置" class="headerlink" title="2、防火墙配置"></a>2、防火墙配置</h4><ul><li>查看版本： <code>firewall-cmd --version</code></li><li>查看帮助： <code>firewall-cmd --help</code></li><li>显示状态： <code>firewall-cmd --state</code></li><li><strong>查看所有打开的端口</strong>： <code>firewall-cmd --zone=public --list-ports</code></li><li><strong>更新防火墙规则</strong>：<code>firewall-cmd --reload</code></li><li>查看区域信息:  <code>firewall-cmd --get-active-zones</code></li><li>查看指定接口所属区域：<code>firewall-cmd --get-zone-of-interface=eth0</code></li><li>拒绝所有包：<code>firewall-cmd --panic-on</code></li><li>取消拒绝状态： <code>firewall-cmd --panic-off</code></li><li>查看是否拒绝： <code>firewall-cmd --query-panic</code></li><li><strong>添加开放端口</strong>：<code>firewall-cmd --zone=public --add-port=80/tcp --permanent</code>  （–permanent永久生效，没有此参数重启后失效）</li><li><strong>删除开放端口</strong>：<code>firewall-cmd --zone=public --remove-port=80/tcp --permanent</code></li><li>查看开放端口：<code>firewall-cmd --zone=public --query-port=80/tcp</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;CentOS7设置防火墙，记录一下过程&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CentOS" scheme="http://yoursite.com/categories/CentOS/"/>
    
    
      <category term="CentOS" scheme="http://yoursite.com/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>scrapy爬虫</title>
    <link href="http://yoursite.com/2020/06/16/scrapy%E7%88%AC%E8%99%AB/"/>
    <id>http://yoursite.com/2020/06/16/scrapy%E7%88%AC%E8%99%AB/</id>
    <published>2020-06-15T16:01:06.077Z</published>
    <updated>2020-06-15T16:26:20.829Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>学习了一下scrapy爬虫，记录一下过程。</p></blockquote><a id="more"></a><h2 id="scrapy爬虫"><a href="#scrapy爬虫" class="headerlink" title="scrapy爬虫"></a>scrapy爬虫</h2><h3 id="一、新建工程"><a href="#一、新建工程" class="headerlink" title="一、新建工程"></a>一、新建工程</h3><h4 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h4><p>powershell下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject 工程名称</span><br></pre></td></tr></table></figure><h4 id="2-创建爬虫程序"><a href="#2-创建爬虫程序" class="headerlink" title="2. 创建爬虫程序"></a>2. 创建爬虫程序</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> 工程名称</span><br><span class="line">scrapy genspider 程序名称 爬取的网站地址</span><br></pre></td></tr></table></figure><p>注意：==网站地址前面不要有http://之类的==</p><h4 id="3-启动spider"><a href="#3-启动spider" class="headerlink" title="3. 启动spider"></a>3. 启动spider</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawel 程序名称</span><br></pre></td></tr></table></figure><h3 id="二、文件说明"><a href="#二、文件说明" class="headerlink" title="二、文件说明"></a>二、文件说明</h3><ul><li><strong>scrapy.cfg</strong>：项目的配置信息，主要为Scrapy命令行工具提供一个基础的配置信息。（真正爬虫相关的配置信息在settings.py文件中）</li><li><strong>items.py</strong>：设置数据存储模板，用于结构化数据，如：Django的Model</li><li><strong>pipelines</strong>：数据处理行为，如：一般结构化的数据持久化</li><li><strong>settings.py</strong>：配置文件，如：递归的层数、并发数，延迟下载等</li><li><strong>spiders</strong>：爬虫目录，如：创建文件，编写爬虫规则</li></ul><p>以上命名都是固定的</p><hr><h4 id="1-items-py："><a href="#1-items-py：" class="headerlink" title="1. items.py："></a>1. items.py：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThirdItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    name = scrapy.Field()</span><br><span class="line">    age = scrapy.Field()</span><br></pre></td></tr></table></figure><h4 id="2-example-py"><a href="#2-example-py" class="headerlink" title="2. example.py"></a>2. example.py</h4><p>example.py是scrapy genspider命令中spider名称</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> Request</span><br><span class="line"><span class="keyword">from</span> ..items <span class="keyword">import</span> Item<span class="comment">#导入自定义的item结构化数据类</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'example'</span></span><br><span class="line">    allowed_domains = [<span class="string">'example.com'</span>]</span><br><span class="line">    start_urls = [<span class="string">'http://example.com'</span>]<span class="comment">#要爬取的网页</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        print(response.body)<span class="comment">#打印获取到的网页源码</span></span><br><span class="line">        <span class="comment">#获取页面数据的两种方式</span></span><br><span class="line">        <span class="comment">#url = response.css(' ').extract()</span></span><br><span class="line">        url = response.xpath(<span class="string">' '</span>).extract()</span><br><span class="line">        <span class="keyword">for</span> next_url <span class="keyword">in</span> url:</span><br><span class="line">            <span class="keyword">yield</span> Request(url=parse.urljoin(response.url, next_url), callback=self.parse_detail)<span class="comment">#parse_detail为自定义函数</span></span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_detail</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        print(<span class="string">"================进入parse_detail================="</span>)</span><br><span class="line">        print(response.body)<span class="comment">#打印url的源码</span></span><br><span class="line">        items = Item()</span><br><span class="line">        items[<span class="string">'name'</span>] = response.xpath(<span class="string">' '</span>).extract_first(<span class="string">""</span>)</span><br><span class="line">        items[<span class="string">'name'</span>] = items[<span class="string">'name'</span>].replace(<span class="string">'\n'</span>, <span class="string">''</span>).replace(<span class="string">' '</span>, <span class="string">''</span>)</span><br><span class="line">        </span><br><span class="line">        items[<span class="string">'age'</span>] = response.xpath(<span class="string">' '</span>).extract_first(<span class="string">""</span>)</span><br><span class="line">        items[<span class="string">'age'</span>] = items[<span class="string">'age'</span>].replace(<span class="string">'\n'</span>, <span class="string">''</span>).replace(<span class="string">' '</span>, <span class="string">''</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">yield</span> items</span><br></pre></td></tr></table></figure><h4 id="4-main-py"><a href="#4-main-py" class="headerlink" title="4. main.py"></a>4. main.py</h4><p>在pycharm里，可以将指令写入main.py中，简化操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> cmdline</span><br><span class="line"></span><br><span class="line"><span class="comment">#cmdline.execute("scrapy","crawl","example")</span></span><br><span class="line">cmdline.execute(<span class="string">"scrapy crawl example"</span>.split())</span><br></pre></td></tr></table></figure><p><strong>如果没有出现运行标志，表示需要配置：</strong></p><ol><li><p>配置</p><p><img src="https://i.loli.net/2020/06/16/JXgyRfLoSO1V2EW.png" alt="QQ截图20200323083706-1584923944607.png"></p></li><li><p>添加新配置</p><p><img src="https://i.loli.net/2020/06/16/GzmRhMltLfBPE1w.png" alt="QQ截图20200323083807"></p></li><li><p>配置信息</p><p><img src="https://i.loli.net/2020/06/16/GBnOXsPCAM9U1Wt.png" alt="QQ截图20200323084005"></p></li></ol><p>==工作目录需要选择py文件的父文件夹==</p><h3 id="三、延迟获取"><a href="#三、延迟获取" class="headerlink" title="三、延迟获取"></a>三、延迟获取</h3><p>对于浏览器看到的和实际打印的response.body不同的解决方法有两种，两种都可以进行尝试。</p><h4 id="1-DOWNLOAD-DELAY"><a href="#1-DOWNLOAD-DELAY" class="headerlink" title="1. DOWNLOAD_DELAY"></a>1. DOWNLOAD_DELAY</h4><p>在setting.py中找到<code>DOWNLOAD_DELAY</code>取消注释设置值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DOWNLOAD_DELAY = <span class="number">5</span> <span class="comment">#数值越大，延迟越大</span></span><br></pre></td></tr></table></figure><h4 id="2-middleware"><a href="#2-middleware" class="headerlink" title="2. middleware"></a>2. middleware</h4><h5 id="2-1-安装selenium"><a href="#2-1-安装selenium" class="headerlink" title="2.1 安装selenium"></a>2.1 安装selenium</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure><h5 id="2-2-安装chromedriver"><a href="#2-2-安装chromedriver" class="headerlink" title="2.2 安装chromedriver"></a>2.2 安装chromedriver</h5><p>注意：==chromedriver的版本一定要与Chrome的版本一致，不然就不起作用。==</p><p>查看chrome版本方法：在浏览器地址栏输入chrome://version/</p><p>两个下载地址：</p><ol><li><em><a href="http://chromedriver.storage.googleapis.com/index.html" target="_blank" rel="noopener">http://chromedriver.storage.googleapis.com/index.html</a></em></li><li><em><a href="https://npm.taobao.org/mirrors/chromedriver/" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/chromedriver/</a></em></li></ol><p>解压压缩包，找到chromedriver.exe复制到chrome的安装目录（其实也可以随便放一个文件夹）。复制chromedriver.exe文件的路径并加入到电脑的环境变量中去（不添加也行，得记住路径）。具体的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/16/GyaXmnPUofhQADH.png" alt="image-20200407175944138" title="">                </div>                <div class="image-caption">image-20200407175944138</div>            </figure><p>进入环境变量编辑界面，添加到用户变量即可，双击PATH，将你的文件位置（C:\Program Files (x86)\Google\Chrome\Application）添加到后面。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/16/lu5rDegSPIMab7z.png" alt="image-20200407180622270" title="">                </div>                <div class="image-caption">image-20200407180622270</div>            </figure><p>打开cmd，输入<code>chromedriver</code>监测是否安装成功。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/16/DTX7oHsF2xLNVR1.png" alt="image-20200407180356103" title="">                </div>                <div class="image-caption">image-20200407180356103</div>            </figure><h5 id="2-3-配置"><a href="#2-3-配置" class="headerlink" title="2.3 配置"></a>2.3 配置</h5><ol><li><p>将settings.py中的<code>DOWNLOADER_MIDDLEWARES</code>解除注释。</p><p><img src="https://i.loli.net/2020/06/16/3LgwAxkH9WmCSqZ.png" alt="image-20200407233740811"></p></li><li><p>在middlewares.py导入将需要的包并且设置变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> HtmlResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line">driver = webdriver.Chrome(<span class="string">"C:\Program Files (x86)\Google\Chrome\Application\chromedriver.exe"</span>,chrome_options=chrome_options)</span><br></pre></td></tr></table></figure></li><li><p>在middlewares.py找到相应的middleware的类中的<code>process_request</code>函数，函数中添加以下代码，代码块如图。其中起关键作用的是<code>time.sleep(10)</code>，意思是延迟多长时间。延迟后再返回current.url和body。<em>本例中类名为<code>MyCrowlersDownloaderMiddleware</code>，具体类名会根据项目名变化。</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    driver.get(request.url)</span><br><span class="line"><span class="keyword">except</span> TimeoutException:</span><br><span class="line">    print(<span class="string">'超时，丢弃本页'</span>, request.url)</span><br><span class="line">    driver.execute_script(<span class="string">'window.stop()'</span>)</span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">return</span> HtmlResponse(url=driver.current_url, body=driver.page_source, encoding=<span class="string">"utf-8"</span>,request=request)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/06/16/TbJoWKl4Mye1PjI.png" alt="image-20200407235207035"></p></li></ol><h5 id="2-4-滚动加载配置（这部分好像有问题）"><a href="#2-4-滚动加载配置（这部分好像有问题）" class="headerlink" title="2.4 滚动加载配置（这部分好像有问题）"></a>2.4 滚动加载配置（这部分好像有问题）</h5><ol><li><p>在middlewares.py新导入一个包。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException</span><br></pre></td></tr></table></figure></li><li><p>在<code>process_request</code>函数中添加以下代码，代码块如图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    spider.browser.get(request.url)</span><br><span class="line">    spider.browser.execute_script(<span class="string">'window.scrollTo(0, document.body.scrollHeight)'</span>)</span><br><span class="line"><span class="keyword">except</span> TimeoutException <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'超时'</span>)</span><br><span class="line">    spider.browser.execute_script(<span class="string">'window.stop()'</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span> HtmlResponse(url=spider.browser.current_url, body=spider.browser.page_source, encoding=<span class="string">"utf-8"</span>,request=request)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/06/16/z1SwWC2ctujKXY5.png" alt="image-20200407235904011.png"></p></li></ol><h3 id="四、保存数据"><a href="#四、保存数据" class="headerlink" title="四、保存数据"></a>四、保存数据</h3><p>共使用三种保存方法，一种是保存为json文件，一种是直接保存到es中。</p><h4 id="1-保存至json"><a href="#1-保存至json" class="headerlink" title="1. 保存至json"></a>1. 保存至json</h4><ol><li><p>在piplines.py中添加如下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScrapyCodePipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        <span class="comment"># print('pipeline got item:',item)</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scrapy.exporters <span class="keyword">import</span> JsonItemExporter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsonExporterPipleline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 调用scrapy提供的json export导出json文件</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.file = open(<span class="string">'export.json'</span>, <span class="string">'wb'</span>)</span><br><span class="line">        self.exporter = JsonItemExporter(self.file, encoding=<span class="string">"utf-8"</span>, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">        self.exporter.start_exporting()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.exporter.finish_exporting()</span><br><span class="line">        self.file.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        self.exporter.export_item(item)</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure></li><li><p>在settings.py中找到<code>ITEM_PIPELINES</code>，改成如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;<span class="comment"># item处理方式</span></span><br><span class="line">   <span class="comment"># 'scrapy_code.pipelines.ScrapyCodePipeline': 300,</span></span><br><span class="line">   <span class="string">'scrapy_code.pipelines.JsonExporterPipleline'</span>: <span class="number">300</span>,</span><br><span class="line">   <span class="comment"># 'scrapy_code.pipelines.MysqlTwistedPipline': 300,</span></span><br><span class="line">   <span class="comment"># 'scrapy_code.pipelines.ElasticsearchPipeline': 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-保存至es中"><a href="#2-保存至es中" class="headerlink" title="2. 保存至es中"></a>2. 保存至es中</h4><ol><li><p>在piplines.py的同级文件夹下建立Python Package，取名为models，在models下建立es_types.py。目录结构如下：</p><ul><li>models:<ul><li>_<em>init_</em>.py</li><li>es_types.py</li></ul></li><li>piplines.py</li></ul></li><li><p>在es_types.py中写入如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># elasticsearch_dsl：https://elasticsearch-dsl.readthedocs.io/en/latest/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> elasticsearch_dsl <span class="keyword">import</span> DocType, Date, Completion, Keyword, Text, Integer</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> elasticsearch_dsl.analysis <span class="keyword">import</span> CustomAnalyzer</span><br><span class="line"></span><br><span class="line"><span class="comment">#需要在es中安装ik分词器</span></span><br><span class="line">ik_analyzer = CustomAnalyzer(<span class="string">"ik_max_word"</span>, filter=[<span class="string">"lowercase"</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> elasticsearch_dsl.connections <span class="keyword">import</span> connections</span><br><span class="line"></span><br><span class="line">es=connections.create_connection(host=<span class="string">"127.0.0.1"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">jobType</span><span class="params">(DocType)</span>:</span></span><br><span class="line">    <span class="comment"># 设置index名称和document名称</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Index</span>:</span></span><br><span class="line">        name = <span class="string">"51job"</span></span><br><span class="line">        doc_type = <span class="string">"_doc"</span></span><br><span class="line">        <span class="comment"># settings = &#123;</span></span><br><span class="line">        <span class="comment">#   "number_of_shards": 2,</span></span><br><span class="line">        <span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span>fileds定义</span></span><br><span class="line">    url = Keyword()  <span class="comment"># 不分词，默认保留256个字符</span></span><br><span class="line">    job_name = Text(</span><br><span class="line">        analyzer=<span class="string">"ik_max_word"</span>)  <span class="comment"># “中华人民共和国国歌”拆分为“中华人民共和国,中华人民,中华,华人,人民共和国,人民,人,民,共和国,共和,和,国国,国歌”，会穷尽各种可能的组合；</span></span><br><span class="line">    salary = Text(analyzer=<span class="string">"ik_smart"</span>)  <span class="comment"># 将“中华人民共和国国歌”拆分为“中华人民共和国,国歌”将“中华人民共和国国歌”拆分为“中华人民共和国,国歌”</span></span><br><span class="line">    company = Text(analyzer=<span class="string">"ik_max_word"</span>)</span><br><span class="line">    job_position = Text(analyzer=<span class="string">"ik_max_word"</span>)</span><br><span class="line">    experience = Text(analyzer=<span class="string">"ik_max_word"</span>)</span><br><span class="line">    education = Text(analyzer=<span class="string">"ik_max_word"</span>)</span><br><span class="line">    number_of_people = Integer()</span><br><span class="line">    published_time = Date()</span><br><span class="line">    position_detail = Text(analyzer=<span class="string">"ik_smart"</span>)</span><br><span class="line">    position_type = Text(analyzer=<span class="string">"ik_max_word"</span>)</span><br><span class="line">    location = Text(analyzer=<span class="string">"ik_max_word"</span>)</span><br><span class="line">    company_detail = Text(analyzer=<span class="string">"ik_max_word"</span>)</span><br><span class="line"></span><br><span class="line">    suggest = Completion(analyzer=ik_analyzer)  <span class="comment"># 搜索建议</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,item)</span>:</span></span><br><span class="line">        super(jobType, self).__init__()<span class="comment">#调一下父类的init，避免init重写导致一些init操作没执行</span></span><br><span class="line">        self.assignment(item)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># <span class="doctag">TODO:</span>将item转换为es的数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">assignment</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="comment"># TODO：给没爬到的字段赋默认值：空串</span></span><br><span class="line">        keys = [<span class="string">'url'</span>, <span class="string">'job_name'</span>, <span class="string">'salary'</span>, <span class="string">'company'</span>, <span class="string">'job_position'</span>, <span class="string">'experience'</span>, <span class="string">'education'</span>, <span class="string">'number_of_people'</span>,</span><br><span class="line">                <span class="string">'published_time'</span>, <span class="string">'position_detail'</span>, <span class="string">'position_type'</span>, <span class="string">'location'</span>, <span class="string">'company_detail'</span>]</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> keys:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                item[key]</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                item[key] = <span class="string">''</span></span><br><span class="line">        <span class="comment"># TODO：将字段值转换为es的数据</span></span><br><span class="line">        <span class="comment"># 虽然只是将原来的item值赋给了成员变量，但这个过程中会执行数据格式转换操作，比如url本来在item是python的字符串类型，转换后变为es的keyword类型</span></span><br><span class="line">        self.url = item[<span class="string">'url'</span>]</span><br><span class="line">        self.job_name = item[<span class="string">'job_name'</span>]</span><br><span class="line">        self.salary = item[<span class="string">'salary'</span>]</span><br><span class="line">        self.company = item[<span class="string">'company'</span>]</span><br><span class="line">        self.job_position = item[<span class="string">'job_position'</span>]</span><br><span class="line">        self.experience = item[<span class="string">'experience'</span>]</span><br><span class="line">        self.education = item[<span class="string">'education'</span>]</span><br><span class="line">        self.number_of_people = item[<span class="string">'number_of_people'</span>]</span><br><span class="line">        self.published_time = item[<span class="string">'published_time'</span>]</span><br><span class="line">        self.position_detail = item[<span class="string">'position_detail'</span>]</span><br><span class="line">        self.position_type = item[<span class="string">'position_type'</span>]</span><br><span class="line">        self.location = item[<span class="string">'location'</span>]</span><br><span class="line">        self.company_detail = item[<span class="string">'company_detail'</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># # 或者简化代码为</span></span><br><span class="line">        <span class="comment"># for key in keys:</span></span><br><span class="line">        <span class="comment">#     vars(self)[key]=item[key]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># TODO：生成搜索建议词</span></span><br><span class="line">        self.suggest = self.gen_suggests(((self.job_name, <span class="number">10</span>), (self.company, <span class="number">3</span>), (self.position_type, <span class="number">7</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gen_suggests</span><span class="params">(self, info_tuple)</span>:</span></span><br><span class="line">        <span class="comment"># 根据字符串生成搜索建议数组</span></span><br><span class="line">        used_words = set()  <span class="comment"># set为去重功能</span></span><br><span class="line">        suggests = []</span><br><span class="line">        <span class="keyword">for</span> text, weight <span class="keyword">in</span> info_tuple:</span><br><span class="line">            <span class="keyword">if</span> text:</span><br><span class="line">                <span class="comment"># 字符串不为空时，调用elasticsearch的analyze接口分析字符串（分词、大小写转换）</span></span><br><span class="line">                words = es.indices.analyze(body=&#123;<span class="string">'text'</span>: text, <span class="string">'analyzer'</span>: <span class="string">"ik_max_word"</span>&#125;)</span><br><span class="line">                <span class="comment"># anylyzed_words = set([r["token"] for r in words["tokens"] if len(r["token"]) &gt; 1])</span></span><br><span class="line">                analyzed_words = []</span><br><span class="line">                <span class="keyword">for</span> r <span class="keyword">in</span> words[<span class="string">"tokens"</span>]:</span><br><span class="line">                    <span class="keyword">if</span> len(r[<span class="string">"tokens"</span>]) &gt; <span class="number">1</span>:</span><br><span class="line">                        analyzed_words.append(r[<span class="string">"tokens"</span>])</span><br><span class="line">                anylyzed_words = set(analyzed_words)</span><br><span class="line"></span><br><span class="line">                new_words = anylyzed_words - used_words</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                new_words = set()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> new_words:</span><br><span class="line">                suggests.append(&#123;<span class="string">'input'</span>: list(new_words), <span class="string">'weight'</span>: weight&#125;)</span><br><span class="line">        <span class="keyword">return</span> suggests</span><br></pre></td></tr></table></figure></li><li><p>在piplines.py中添加如下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .models.es_types <span class="keyword">import</span> jobType</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElasticsearchPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        job = jobType(item)<span class="comment"># 将item转换为es所需格式</span></span><br><span class="line">        <span class="comment"># 将数据传入es</span></span><br><span class="line">        <span class="comment"># jobType继承自DocType，所以DocType有的函数，它都有。</span></span><br><span class="line">        <span class="comment"># save就是DocType定义的将类中的各成员变量打包成数据插入操作，进行数据插入的函数</span></span><br><span class="line">        job.save()</span><br><span class="line"></span><br><span class="line">        <span class="comment">#仍返回item，使得运行窗口能看到爬到的数据</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure></li><li><p>在settings.py中找到<code>ITEM_PIPELINES</code>，改成如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;<span class="comment"># item处理方式</span></span><br><span class="line">   <span class="comment"># 'scrapy_code.pipelines.ScrapyCodePipeline': 300,</span></span><br><span class="line">   <span class="comment"># 'scrapy_code.pipelines.JsonExporterPipleline': 300,</span></span><br><span class="line">   <span class="comment"># 'scrapy_code.pipelines.MysqlTwistedPipline': 300,</span></span><br><span class="line">    <span class="string">'scrapy_code.pipelines.ElasticsearchPipeline'</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;学习了一下scrapy爬虫，记录一下过程。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="scrapy" scheme="http://yoursite.com/categories/scrapy/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="scrapy" scheme="http://yoursite.com/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>jar包部署</title>
    <link href="http://yoursite.com/2020/06/15/jar%E5%8C%85%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2020/06/15/jar%E5%8C%85%E9%83%A8%E7%BD%B2/</id>
    <published>2020-06-15T15:56:51.079Z</published>
    <updated>2020-06-15T16:00:37.693Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>将项目部署到CentOS上，简单记忆一下部署的方法。</p></blockquote><a id="more"></a><h3 id="前台运行项目（不能关掉shell）"><a href="#前台运行项目（不能关掉shell）" class="headerlink" title="前台运行项目（不能关掉shell）"></a>前台运行项目（不能关掉shell）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Java -jar xxxxx.jar</span><br></pre></td></tr></table></figure><h3 id="后台运行项目（可以关掉shell）"><a href="#后台运行项目（可以关掉shell）" class="headerlink" title="后台运行项目（可以关掉shell）"></a>后台运行项目（可以关掉shell）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar xxxxx.jar &amp;</span><br></pre></td></tr></table></figure><h3 id="后台运行项目不输出-out文件"><a href="#后台运行项目不输出-out文件" class="headerlink" title="后台运行项目不输出.out文件"></a>后台运行项目不输出.out文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar xxxxx.jar &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h3 id="后台运行项目只输出错误信息到文件"><a href="#后台运行项目只输出错误信息到文件" class="headerlink" title="后台运行项目只输出错误信息到文件"></a>后台运行项目只输出错误信息到文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar xxxxx.jar &gt;/dev/null 2&gt;error &amp;</span><br></pre></td></tr></table></figure><h3 id="停止项目"><a href="#停止项目" class="headerlink" title="停止项目"></a>停止项目</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netstat -anp | grep 8080</span><br><span class="line">kill sid xxxx</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;将项目部署到CentOS上，简单记忆一下部署的方法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CentOS" scheme="http://yoursite.com/categories/CentOS/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7设置网络</title>
    <link href="http://yoursite.com/2020/05/20/CentOS7%E8%AE%BE%E7%BD%AE%E7%BD%91%E7%BB%9C/"/>
    <id>http://yoursite.com/2020/05/20/CentOS7%E8%AE%BE%E7%BD%AE%E7%BD%91%E7%BB%9C/</id>
    <published>2020-05-20T12:50:09.968Z</published>
    <updated>2020-06-26T04:22:02.621Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>CentOS7设置固定IP，记录一下过程</p></blockquote><a id="more"></a><h2 id="CentOS7设置网络"><a href="#CentOS7设置网络" class="headerlink" title="CentOS7设置网络"></a>CentOS7设置网络</h2><p>本文设置的网络是<strong>NAT模式+固定IP</strong>。</p><h3 id="一、VM设置"><a href="#一、VM设置" class="headerlink" title="一、VM设置"></a>一、VM设置</h3><p>本文使用的虚拟机时VMware Workstation Pro。</p><h4 id="1、设置虚拟机的连接方式"><a href="#1、设置虚拟机的连接方式" class="headerlink" title="1、设置虚拟机的连接方式"></a>1、设置虚拟机的连接方式</h4><p>选择自己要设置的虚拟机，选择虚拟机(M)-&gt;设置，选择网咯适配器，选择为NAT模式。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/05/eUwPrtSz9C8gX5d.png" alt="image-20200520194124851" title="">                </div>                <div class="image-caption">image-20200520194124851</div>            </figure><h4 id="2、配置虚拟机的NAT模式具体地址参数"><a href="#2、配置虚拟机的NAT模式具体地址参数" class="headerlink" title="2、配置虚拟机的NAT模式具体地址参数"></a>2、配置虚拟机的NAT模式具体地址参数</h4><p>选择编辑(E)-&gt;虚拟机网络编辑器。</p><p>选择VMnet8-&gt;取消勾选使用本地DHCP-&gt;选择NAT设置。记住NAT设置中的三个地址。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/05/vnfpGXlgdb7PjaM.png" alt="image-20200520201055049" title="">                </div>                <div class="image-caption">image-20200520201055049</div>            </figure><p>找到计算机中的网络设置中的网络连接，先择VMnet8右键属性-&gt;选择IPv4属性-&gt;设置自定ip地址。<strong>这里ip地址设置为子网内的ip就可，注意不要和想设置的虚拟机固定IP相同。</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/05/kuMzP9s2JW5RAGw.png" alt="image-20200520201814024" title="">                </div>                <div class="image-caption">image-20200520201814024</div>            </figure><h3 id="二、CentOS7设置"><a href="#二、CentOS7设置" class="headerlink" title="二、CentOS7设置"></a>二、CentOS7设置</h3><p>本文使用的虚拟机时VMware Workstation Pro。</p><h4 id="1、查看网络名和ip"><a href="#1、查看网络名和ip" class="headerlink" title="1、查看网络名和ip"></a>1、查看网络名和ip</h4><p>首先查看自己需要配置的<strong>网络名称</strong>和<strong>目前的ip地址</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/05/f9mvPKqQbAGILgy.png" alt="image-20200520202702641" title="">                </div>                <div class="image-caption">image-20200520202702641</div>            </figure><h4 id="2、修改ip地址文件-需要root权限"><a href="#2、修改ip地址文件-需要root权限" class="headerlink" title="2、修改ip地址文件(需要root权限)"></a>2、修改ip地址文件(需要root权限)</h4><p>查看文件夹下文件，找到和自己网络名相同的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/sysconfig/network-scripts/</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/05/mvdpBJWC5MePY4O.png" alt="image-20200520203141320" title="">                </div>                <div class="image-caption">image-20200520203141320</div>            </figure><p>编辑：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ifcfg-ens33</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/05/TaDGH7mkXucQvRg.png" alt="image-20200520203707035" title="">                </div>                <div class="image-caption">image-20200520203707035</div>            </figure><ul><li>BOOTPROTO：设置为静态ip</li><li>ONBOOT：开机启动</li><li>DNS1：这里直接设置为和网关地址相同</li><li>IPADDR：想设置的虚拟机的固定IP地址</li><li>NETMASK：掩码</li><li>GATEWAY：网关地址</li></ul><p>重启网络服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network.service</span><br></pre></td></tr></table></figure><p>验证：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ip addr#查看自己的ip地址</span><br><span class="line">ping 主机地址#windows通过ipconfig获得</span><br><span class="line">ping www.baidu.com#查看自己是否能连接到网络</span><br></pre></td></tr></table></figure><p>再从主机<code>ping 虚拟机固定ip</code>。</p><h4 id="3、添加hosts"><a href="#3、添加hosts" class="headerlink" title="3、添加hosts"></a>3、添加hosts</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure><p>在文件中添加映射即可。例如我是要配置hadoop集群，分别有<code>192.168.40.132</code>、<code>192.168.40.133</code>、<code>192.168.40.134</code>三台机子。可以在hosts中添加如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.40.132 hadoop132</span><br><span class="line">192.168.40.133 hadoop133</span><br><span class="line">192.168.40.134 hadoop134</span><br></pre></td></tr></table></figure><p>这时候就可以尝试ping各个主机了：</p><ul><li>从本机ping虚拟机：<code>ping 192.168.40.132</code></li><li>从虚拟机ping主机：<code>ping 主机ip</code></li><li>从虚拟机ping虚拟机：<code>ping hadoop133</code></li></ul><h4 id="4、修改hostname"><a href="#4、修改hostname" class="headerlink" title="4、修改hostname"></a>4、修改hostname</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname xxx</span><br></pre></td></tr></table></figure><p>如本机是<code>192.168.40.132</code>，则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname hadoop132</span><br></pre></td></tr></table></figure><p>然后可以输入如下命令检查hostname：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostname</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;CentOS7设置固定IP，记录一下过程&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CentOS" scheme="http://yoursite.com/categories/CentOS/"/>
    
    
      <category term="CentOS" scheme="http://yoursite.com/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7安装JDK1.8</title>
    <link href="http://yoursite.com/2020/05/17/CentOS7%E5%AE%89%E8%A3%85Jdk1.8/"/>
    <id>http://yoursite.com/2020/05/17/CentOS7%E5%AE%89%E8%A3%85Jdk1.8/</id>
    <published>2020-05-17T06:31:20.727Z</published>
    <updated>2020-06-05T11:10:59.035Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>为公司服务器安JDK，记录一下过程</p></blockquote><a id="more"></a><h2 id="CentOS7安装Jdk1-8"><a href="#CentOS7安装Jdk1-8" class="headerlink" title="CentOS7安装Jdk1.8"></a>CentOS7安装Jdk1.8</h2><h3 id="第一步、卸载系统自带的OpenJDK及相关的java文件"><a href="#第一步、卸载系统自带的OpenJDK及相关的java文件" class="headerlink" title="第一步、卸载系统自带的OpenJDK及相关的java文件"></a>第一步、卸载系统自带的OpenJDK及相关的java文件</h3><h4 id="1、查看系统自带OpenJDK版本"><a href="#1、查看系统自带OpenJDK版本" class="headerlink" title="1、查看系统自带OpenJDK版本"></a>1、查看系统自带OpenJDK版本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><h4 id="2、查找需要删除的相关文件"><a href="#2、查找需要删除的相关文件" class="headerlink" title="2、查找需要删除的相关文件"></a>2、查找需要删除的相关文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep java</span><br></pre></td></tr></table></figure><p><strong>命令说明：</strong></p><ul><li>rpm：管理套件</li><li>-qa：使用询问模式，查询所有套件</li><li>grep：查找文件里符合条件的字符串</li><li>java：查找包含java字符串的文件</li></ul><h4 id="3、删除文件"><a href="#3、删除文件" class="headerlink" title="3、删除文件"></a>3、删除文件</h4><p>这里删除带OpenJDK字样的文件即可，例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e --nodeps java-1.7.0-openjdk-1.7.0.111-2.6.7.8.el7.x86_64</span><br></pre></td></tr></table></figure><p><strong>命令介绍：</strong></p><ul><li>rpm：管理套件  </li><li>-e：删除指定的套件</li><li>–nodeps：不验证套件档的相互关联性</li></ul><h4 id="4、检查是否删除成功"><a href="#4、检查是否删除成功" class="headerlink" title="4、检查是否删除成功"></a>4、检查是否删除成功</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>出现<code>未找到命令...</code>则表示删除成功。</p><h3 id="第二步、下载JDK1-8"><a href="#第二步、下载JDK1-8" class="headerlink" title="第二步、下载JDK1.8"></a>第二步、下载JDK1.8</h3><h4 id="1、下载JDK"><a href="#1、下载JDK" class="headerlink" title="1、下载JDK"></a>1、下载JDK</h4><p>下载地址：<a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</a></p><p>这里下载对应的tar.gz文件即可CentOS7对应下载：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/05/Ys5ilj7qRezJS31.png" alt="QQ截图20200517133840" title="">                </div>                <div class="image-caption">QQ截图20200517133840</div>            </figure><p><strong>注意：</strong>现在下载低于1.8版本的jdk需要登录，从网上找到了一个账号，亲测可用。</p><p><strong>账号：</strong><a href="mailto:2696671285@qq.com">2696671285@qq.com</a></p><p><strong>密码：</strong>Oracle123</p><h4 id="2、上传JDK至服务器"><a href="#2、上传JDK至服务器" class="headerlink" title="2、上传JDK至服务器"></a>2、上传JDK至服务器</h4><p><strong>注意：</strong>如果上一步是直接在CentOS7中下载的这一步可以跳过。笔者是在win10系统中下载的JDK压缩包。</p><p>简单说一下，连接你的服务器，通过sftp服务将压缩包上传至服务器。这里好用推荐一个软件：<strong>Bitvise SSH Client</strong></p><p>登录服务器后，它会自动打开，shell窗口和Sftp窗口。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/05/vxmFlXpWOIwnS8q.png" alt="QQ截图20200517135255" title="">                </div>                <div class="image-caption">QQ截图20200517135255</div>            </figure><p>直接上传你的压缩包即可。</p><h3 id="第三步、安装JDK"><a href="#第三步、安装JDK" class="headerlink" title="第三步、安装JDK"></a>第三步、安装JDK</h3><h4 id="1、解压"><a href="#1、解压" class="headerlink" title="1、解压"></a>1、解压</h4><p>首先需要将压缩包移动到<code>/usr/java</code>文件夹下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp jdk-8u251-linux-x64.tar.gz /usr/java</span><br></pre></td></tr></table></figure><p>随后到<code>/usr/java</code>下解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/java</span><br><span class="line">tar -zxvf jdk-8u251-linux-x64.tar.gz</span><br></pre></td></tr></table></figure><h4 id="2、配置环境变量"><a href="#2、配置环境变量" class="headerlink" title="2、配置环境变量"></a>2、配置环境变量</h4><p>修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>进入文本编辑状态下，光标走到文件最后一行，键盘按下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i</span><br></pre></td></tr></table></figure><p>进入插入状态：</p><p>在文本的最后一行粘贴如下：</p><p><strong>注意：</strong><code>JAVA_HOME=/usr/java/jdk1.8.0_251</code>就是你自己的目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\#java environment</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_251</span><br><span class="line">export CLASSPATH&#x3D;.:$&#123;JAVA_HOME&#125;&#x2F;jre&#x2F;lib&#x2F;rt.jar:$&#123;JAVA_HOME&#125;&#x2F;lib&#x2F;dt.jar:$&#123;JAVA_HOME&#125;&#x2F;lib&#x2F;tools.jar</span><br><span class="line">export PATH&#x3D;$PATH:$&#123;JAVA_HOME&#125;&#x2F;bin</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/05/1gUVSH2xoQmDleX.png" alt="image-20200517141720911" title="">                </div>                <div class="image-caption">image-20200517141720911</div>            </figure><p>点击<code>esc</code>进入命令模式，输入<code>：wq!</code>保存修改信息</p><p>然后键入以下命令使配置文件生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h4 id="3、检查是否配置成功"><a href="#3、检查是否配置成功" class="headerlink" title="3、检查是否配置成功"></a>3、检查是否配置成功</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/05/L2TdBOlJaFeIDGx.png" alt="image-20200517142140209" title="">                </div>                <div class="image-caption">image-20200517142140209</div>            </figure><p>至此JDK1.8就安装好了。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;为公司服务器安JDK，记录一下过程&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CentOS" scheme="http://yoursite.com/categories/CentOS/"/>
    
    
      <category term="CentOS" scheme="http://yoursite.com/tags/CentOS/"/>
    
      <category term="JDK" scheme="http://yoursite.com/tags/JDK/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7安装MySQL5.7</title>
    <link href="http://yoursite.com/2020/05/16/CentOS7%E5%AE%89%E8%A3%85MySQL/"/>
    <id>http://yoursite.com/2020/05/16/CentOS7%E5%AE%89%E8%A3%85MySQL/</id>
    <published>2020-05-16T12:20:45.876Z</published>
    <updated>2020-05-16T12:22:59.138Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>为公司服务器安装MySQL，记录一下过程</p></blockquote><a id="more"></a><h2 id="CentOS7安装MySQL5-7"><a href="#CentOS7安装MySQL5-7" class="headerlink" title="CentOS7安装MySQL5.7"></a>CentOS7安装MySQL5.7</h2><p><strong>注意：</strong>在CentOS中默认是装有MariaDB的，但为了需要，还是要在系统中安装MySQL，而且安装完成之后可以直接覆盖掉MariaDB。</p><h3 id="第一步：-下载并安装MySQL官方的Yum-Repository"><a href="#第一步：-下载并安装MySQL官方的Yum-Repository" class="headerlink" title="第一步： 下载并安装MySQL官方的Yum Repository"></a>第一步： 下载并安装MySQL官方的Yum Repository</h3><h4 id="1、下载安装文件"><a href="#1、下载安装文件" class="headerlink" title="1、下载安装文件"></a>1、下载安装文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure><p>使用上面的命令就直接下载了安装用的Yum Repository，大概25KB的样子，然后就可以直接yum安装了。</p><h4 id="2、执行安装"><a href="#2、执行安装" class="headerlink" title="2、执行安装"></a>2、执行安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br></pre></td></tr></table></figure><p>之后就开始安装MySQL服务器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install mysql-community-server</span><br></pre></td></tr></table></figure><p>安装完成，会出现<code>Complete!</code>的提示。</p><h3 id="第二步：-MySQL数据库设置"><a href="#第二步：-MySQL数据库设置" class="headerlink" title="第二步： MySQL数据库设置"></a>第二步： MySQL数据库设置</h3><h4 id="1、启动MySQL"><a href="#1、启动MySQL" class="headerlink" title="1、启动MySQL"></a>1、启动MySQL</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld.service</span><br></pre></td></tr></table></figure><p>查看MySQL运行状态，运行状态如图：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysqld.service</span><br></pre></td></tr></table></figure><h4 id="2、查找临时密码"><a href="#2、查找临时密码" class="headerlink" title="2、查找临时密码"></a>2、查找临时密码</h4><p>通过如下命令可以在日志文件中找出密码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep "password" /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>如果这里在日志文件中查找不到密码，很可能是之前安装过MySQL没有卸载干净。</p><p><strong>处理方法：</strong></p><ol><li><p>删除原来安装过的mysql残留的数据（这一步非常重要，问题就出在这）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /var/lib/mysql</span><br></pre></td></tr></table></figure></li><li><p>重启mysqld服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure></li><li><p>这时候再去找临时密码就能找到了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep 'temporary password' /var/log/mysqld.log</span><br></pre></td></tr></table></figure></li></ol><h4 id="3、进入数据库并修改密码"><a href="#3、进入数据库并修改密码" class="headerlink" title="3、进入数据库并修改密码"></a>3、进入数据库并修改密码</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><p>输入查找到的临时密码，此时不能做任何事情，因为MySQL默认必须修改密码之后才能操作数据库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER 'root'@'localhost' IDENTIFIED BY 'new password';</span><br></pre></td></tr></table></figure><p>其中‘new password’替换成你要设置的密码，注意:密码设置必须要大小写字母数字和特殊符号（,/‘;:等）,不然不能配置成功</p><p>如果要修改为root这样的弱密码，需要进行以下配置：</p><p>查看密码策略</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like '%password%';</span><br></pre></td></tr></table></figure><p>修改密码策略</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/my.cnf</span><br></pre></td></tr></table></figure><p>在文件中添加一下配置。</p><p>选择0（LOW），1（MEDIUM），2（STRONG）其中一种，选择2需要提供密码字典文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">添加validate_password_policy配置</span></span><br><span class="line">validate_password_policy=0</span><br><span class="line"><span class="meta">#</span><span class="bash">关闭密码策略</span></span><br><span class="line">validate_password = off</span><br></pre></td></tr></table></figure><p>重启mysql服务使配置生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><p>然后就可以修改为弱密码了。</p><h3 id="第三步：-开启MySQL远程访问"><a href="#第三步：-开启MySQL远程访问" class="headerlink" title="第三步： 开启MySQL远程访问"></a>第三步： 开启MySQL远程访问</h3><h4 id="1、开启MySQL的远程访问"><a href="#1、开启MySQL的远程访问" class="headerlink" title="1、开启MySQL的远程访问"></a>1、开启MySQL的远程访问</h4><p>执行以下命令开启远程访问限制</p><p><strong>注意：</strong></p><p>1、下面命令开启的可访问数据库的IP： 192.168.0.1，如要开启所有的，用%代替IP</p><p>2、需要用自己的密码代替下面的<code>password</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to 'root'@'192.168.0.1' identified by 'password' with grant option;</span><br></pre></td></tr></table></figure><p>然后再输入下面两行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flush privileges; </span><br><span class="line">exit;</span><br></pre></td></tr></table></figure><h4 id="2、为firewall添加开放端口"><a href="#2、为firewall添加开放端口" class="headerlink" title="2、为firewall添加开放端口"></a>2、为firewall添加开放端口</h4><p>添加mysql端口3306</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br></pre></td></tr></table></figure><p>然后再重新载入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;为公司服务器安装MySQL，记录一下过程&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CentOS" scheme="http://yoursite.com/categories/CentOS/"/>
    
    
      <category term="CentOS" scheme="http://yoursite.com/tags/CentOS/"/>
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>数学公式中的希腊字母读音</title>
    <link href="http://yoursite.com/2020/05/04/%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E4%B8%AD%E7%9A%84%E5%B8%8C%E8%85%8A%E5%AD%97%E6%AF%8D%E8%AF%BB%E9%9F%B3/"/>
    <id>http://yoursite.com/2020/05/04/%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E4%B8%AD%E7%9A%84%E5%B8%8C%E8%85%8A%E5%AD%97%E6%AF%8D%E8%AF%BB%E9%9F%B3/</id>
    <published>2020-05-04T04:02:58.247Z</published>
    <updated>2020-05-09T05:38:13.250Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>数学公式中的希腊字母读音。</p></blockquote><a id="more"></a><ul><li><strong>α：</strong>阿尔法</li><li><strong>β：</strong>背他</li><li><strong>γ：</strong>伽玛</li><li><strong>Δ：</strong>德尔塔</li><li><strong>ε：</strong>艾普西龙</li><li><strong>η：</strong>依他</li><li><strong>θ：</strong>西他</li><li><strong>λ：</strong>拦姆达</li><li><strong>μ：</strong>缪</li><li><strong>ξ：</strong>克赛（克西）</li><li><strong>π：</strong>派</li><li><strong>ρ：</strong>柔</li><li><strong>σ：</strong>西格玛</li><li><strong>φ：</strong>fai</li><li><strong>ω：</strong>殴米伽</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;数学公式中的希腊字母读音。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="公式" scheme="http://yoursite.com/tags/%E5%85%AC%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>以太坊搭建私链</title>
    <link href="http://yoursite.com/2020/04/30/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2020/04/30/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%93%8D%E4%BD%9C/</id>
    <published>2020-04-30T04:00:47.472Z</published>
    <updated>2020-06-05T11:32:21.893Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>主要涉及到搭建私链的操作。</p></blockquote><a id="more"></a><h3 id="一、安装GO"><a href="#一、安装GO" class="headerlink" title="一、安装GO"></a>一、安装GO</h3><h3 id="二、安装geth"><a href="#二、安装geth" class="headerlink" title="二、安装geth"></a>二、安装geth</h3><h3 id="三、geth操作"><a href="#三、geth操作" class="headerlink" title="三、geth操作"></a>三、geth操作</h3><h4 id="1、查看geth版本"><a href="#1、查看geth版本" class="headerlink" title="1、查看geth版本"></a>1、查看geth版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> project/go-ethereum</span><br><span class="line">./build/bin/geth version</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/05/7oD4xFIgHmJk5vU.png" alt="QQ截图20200304013644" title="">                </div>                <div class="image-caption">QQ截图20200304013644</div>            </figure><p>也可以将路径添加到PATH环境变量中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line">//先查看环境变量</span><br></pre></td></tr></table></figure><h4 id="2、启动节点同步"><a href="#2、启动节点同步" class="headerlink" title="2、启动节点同步"></a>2、启动节点同步</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">geth --datadir . --syncmode fast</span><br><span class="line">//一快速模式同步区块，只会下载每个区块同和区块体，不会执行验证所有的交易。</span><br><span class="line"></span><br><span class="line">geth --testnet --datadit . --syncmode fast</span><br></pre></td></tr></table></figure><h4 id="3、搭建私链"><a href="#3、搭建私链" class="headerlink" title="3、搭建私链"></a>3、搭建私链</h4><p>创建genesis.json</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"config"</span>: &#123;</span><br><span class="line">    <span class="attr">"chainId"</span>: <span class="number">666</span>,</span><br><span class="line">    <span class="attr">"homesteadBlock"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"eip150Block"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"eip150Hash"</span>: <span class="string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span>,</span><br><span class="line">    <span class="attr">"eip155Block"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"eip158Block"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"byzantiumBlock"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"constantinopleBlock"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"petersburgBlock"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"istanbulBlock"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"ethash"</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"nonce"</span>: <span class="string">"0x0"</span>,</span><br><span class="line">  <span class="attr">"timestamp"</span>: <span class="string">"0x5ddf8f3e"</span>,</span><br><span class="line">  <span class="attr">"extraData"</span>: <span class="string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span>,</span><br><span class="line">  <span class="attr">"gasLimit"</span>: <span class="string">"0x47b760"</span>,</span><br><span class="line">  <span class="attr">"difficulty"</span>: <span class="string">"0x00002"</span>,</span><br><span class="line">  <span class="attr">"mixHash"</span>: <span class="string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span>,</span><br><span class="line">  <span class="attr">"coinbase"</span>: <span class="string">"0x0000000000000000000000000000000000000000"</span>,</span><br><span class="line">  <span class="attr">"alloc"</span>: &#123; &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "number": "0x0",</span><br><span class="line">  "gasUsed": "0x0",</span><br><span class="line">  "parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在go-ethereum文件夹下，初始化链json</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./build/bin/geth --datadir data init genesis.json</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/05/YuL4eqF8fUQpiVc.png" alt="QQ截图20200304020234" title="">                </div>                <div class="image-caption">QQ截图20200304020234</div>            </figure><p>在myChain文件夹下，启动私链</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">geth --datadir data --nodiscover --networkid 123456 --rpc --rpccorsdomain <span class="string">"*"</span> console --allow-insecure-unlock</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/05/KCXyd2otkePlsFA.png" alt="启动私链" title="">                </div>                <div class="image-caption">启动私链</div>            </figure><h4 id="4、私链console"><a href="#4、私链console" class="headerlink" title="4、私链console"></a>4、私链console</h4><p>查看块数量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eth.blockNumber</span><br></pre></td></tr></table></figure><p>创建账户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">personal.newAccount(<span class="string">"password"</span>)</span><br></pre></td></tr></table></figure><p>获取账户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my=eth.accounts[0]</span><br><span class="line">another=eth.accounts[1]</span><br></pre></td></tr></table></figure><p>解锁账户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">personal.unlockAccount(my)</span><br><span class="line">//随后输入密码：1234</span><br></pre></td></tr></table></figure><p>查看余额：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eth.getBalance(other)</span><br></pre></td></tr></table></figure><p>发起转账：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eth.sendTransaction(&#123;from:my, to:other, value:10000&#125;)</span><br></pre></td></tr></table></figure><p>如果没有挖矿</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">txpool.status//查看本地交易池中有没有待确认的交易</span><br><span class="line">eth.getBlock(<span class="string">"pending"</span>,<span class="literal">true</span>).transactions//查看当前待确认的交易</span><br></pre></td></tr></table></figure><p>查看交易信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eth.getTransaction(<span class="string">"交易哈希"</span>)</span><br></pre></td></tr></table></figure><p>通过区块号查看区块信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eth.getBlock(0)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;主要涉及到搭建私链的操作。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="以太坊" scheme="http://yoursite.com/categories/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
    
      <category term="私链搭建" scheme="http://yoursite.com/tags/%E7%A7%81%E9%93%BE%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>水龙头合约创建发布</title>
    <link href="http://yoursite.com/2020/04/30/%E6%B0%B4%E9%BE%99%E5%A4%B4%E5%90%88%E7%BA%A6/"/>
    <id>http://yoursite.com/2020/04/30/%E6%B0%B4%E9%BE%99%E5%A4%B4%E5%90%88%E7%BA%A6/</id>
    <published>2020-04-30T03:59:14.175Z</published>
    <updated>2020-06-05T11:29:27.605Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>创建发布水龙头合约。</p></blockquote><a id="more"></a><h3 id="重要网站："><a href="#重要网站：" class="headerlink" title="重要网站："></a>重要网站：</h3><ul><li>以太坊链上查询：<a href="https://etherscan.io/" target="_blank" rel="noopener">etherscan.io</a></li><li>以太坊测试链上查询：<a href="https://ropsten.etherscan.io/" target="_blank" rel="noopener">ropsten.etherscan.io</a></li><li>线上IDE：<a href="http://remix.ethereum.org/" target="_blank" rel="noopener">remix.ethereum.org</a></li></ul><hr><h3 id="合约代码"><a href="#合约代码" class="headerlink" title="合约代码"></a>合约代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.4.17;</span><br><span class="line"></span><br><span class="line">contract Faucet&#123;</span><br><span class="line">    function withdraw(uint amount) public&#123;</span><br><span class="line">        require (amount &lt;&#x3D; 1000000000000000000);</span><br><span class="line">        msg.sender.transfer(1000000000000000000);</span><br><span class="line">    &#125;</span><br><span class="line">    function() public payable &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第一步：编译"><a href="#第一步：编译" class="headerlink" title="第一步：编译"></a>第一步：编译</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/05/oOEzmTCfaLGghMx.png" alt="QQ截图20200302090418" title="">                </div>                <div class="image-caption">QQ截图20200302090418</div>            </figure><h4 id="第二步：部署"><a href="#第二步：部署" class="headerlink" title="第二步：部署"></a>第二步：部署</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/05/YCjNtesKLHAcbSa.png" alt="QQ截图20200302090449" title="">                </div>                <div class="image-caption">QQ截图20200302090449</div>            </figure><h4 id="第三步：查看合约地址，并给地址转账"><a href="#第三步：查看合约地址，并给地址转账" class="headerlink" title="第三步：查看合约地址，并给地址转账"></a>第三步：查看合约地址，并给地址转账</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/05/36hCkfzZLYOVx2b.png" alt="QQ截图20200302091244" title="">                </div>                <div class="image-caption">QQ截图20200302091244</div>            </figure><h4 id="第四步：调用水龙头函数"><a href="#第四步：调用水龙头函数" class="headerlink" title="第四步：调用水龙头函数"></a>第四步：调用水龙头函数</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/05/PeNHv8smgY7QpV4.png" alt="QQ截图20200302090704" title="">                </div>                <div class="image-caption">QQ截图20200302090704</div>            </figure><h4 id="第五步：查看转账"><a href="#第五步：查看转账" class="headerlink" title="第五步：查看转账"></a>第五步：查看转账</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/05/wkX8QdR1KcB2uE9.png" alt="QQ截图20200302090743" title="">                </div>                <div class="image-caption">QQ截图20200302090743</div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;创建发布水龙头合约。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="以太坊" scheme="http://yoursite.com/categories/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
    
      <category term="水龙头合约" scheme="http://yoursite.com/tags/%E6%B0%B4%E9%BE%99%E5%A4%B4%E5%90%88%E7%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>Python MongoDB</title>
    <link href="http://yoursite.com/2020/04/30/pymongo%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/04/30/pymongo%E7%AC%94%E8%AE%B0/</id>
    <published>2020-04-30T03:48:31.229Z</published>
    <updated>2020-06-08T07:12:35.575Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>依靠<strong>pymongo</strong>包来对mongoDB数据库进行操作</p></blockquote><a id="more"></a><h2 id="一、pymongo安装"><a href="#一、pymongo安装" class="headerlink" title="一、pymongo安装"></a>一、pymongo安装</h2><p>首先通过pip list或者通过import pymongo，查看自己装没装pymongo。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pymongo</span><br></pre></td></tr></table></figure><p>出错提示版本匹配有问题。</p><p>通过Anaconda中安装pymongo环境，失败。</p><p>重新更新pip版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure><p>更新成功后，再pip install pymongo，成功！！</p><h2 id="二、pymongo基本操作"><a href="#二、pymongo基本操作" class="headerlink" title="二、pymongo基本操作"></a>二、pymongo基本操作</h2><h3 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1.创建数据库"></a>1.创建数据库</h3><p><strong><code>连接名[&quot;库名&quot;]</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo  </span><br><span class="line">myclient = pymongo.MongoClient(<span class="string">"mongodb://localhost:27017/"</span>) </span><br><span class="line"><span class="comment">#创建名字为runoob的数据库</span></span><br><span class="line">mydb = myclient[<span class="string">"runoob"</span>]</span><br></pre></td></tr></table></figure><h3 id="2-获取数据库列表"><a href="#2-获取数据库列表" class="headerlink" title="2.获取数据库列表"></a>2.获取数据库列表</h3><p><strong><code>连接名.list_database_names()</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line">myclient = pymongo.MongoClient(<span class="string">'mongodb://localhost:27017/'</span>)</span><br><span class="line"><span class="comment">#获取数据库列表</span></span><br><span class="line">dblist = myclient.list_database_names()</span><br><span class="line"><span class="keyword">if</span> <span class="string">"runoobdb"</span> <span class="keyword">in</span> dblist:</span><br><span class="line">  print(<span class="string">"数据库已存在！"</span>)</span><br></pre></td></tr></table></figure><h3 id="3-创建集合（表）"><a href="#3-创建集合（表）" class="headerlink" title="3.创建集合（表）"></a>3.创建集合（表）</h3><p><strong><code>库名[&quot;集合名&quot;]</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line">myclient = pymongo.MongoClient(<span class="string">'mongodb://localhost:27017/'</span>)</span><br><span class="line">mydb = myclient[<span class="string">"runoob"</span>]</span><br><span class="line"><span class="comment">#创建名字为sites的集合</span></span><br><span class="line">mycol = mydb[<span class="string">"sites"</span>]</span><br></pre></td></tr></table></figure><h3 id="4-获取集合列表"><a href="#4-获取集合列表" class="headerlink" title="4.获取集合列表"></a>4.获取集合列表</h3><p><strong><code>库名.list_collection_names()</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line">myclient = pymongo.MongoClient(<span class="string">'mongodb://localhost:27017/'</span>)</span><br><span class="line">mydb = myclient[<span class="string">'runoobdb'</span>]</span><br><span class="line"><span class="comment">#获取集合列表</span></span><br><span class="line">collist = mydb.list_collection_names()</span><br><span class="line"><span class="keyword">if</span> <span class="string">"sites"</span> <span class="keyword">in</span> collist:   <span class="comment"># 判断 sites 集合是否存在</span></span><br><span class="line">  print(<span class="string">"集合已存在！"</span>)</span><br></pre></td></tr></table></figure><h3 id="5-插入文档"><a href="#5-插入文档" class="headerlink" title="5.插入文档"></a>5.插入文档</h3><h4 id="5-1-插入单个文档"><a href="#5-1-插入单个文档" class="headerlink" title="5.1 插入单个文档"></a>5.1 插入单个文档</h4><p><strong><code>集合名.inset_one()</code></strong></p><p>该方法返回 <strong>InsertOneResult</strong> 对象，该对象包含 <strong>inserted_id</strong> 属性，它是插入文档的 <strong>id</strong> 值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line">myclient = pymongo.MongoClient(<span class="string">"mongodb://localhost:27017/"</span>)</span><br><span class="line">mydb = myclient[<span class="string">"runoobdb"</span>]</span><br><span class="line">mycol = mydb[<span class="string">"sites"</span>]</span><br><span class="line"></span><br><span class="line">mydict = &#123;<span class="string">"name"</span>:<span class="string">"RUNOOB"</span>,<span class="string">"alexa"</span>:<span class="string">"10000"</span>,<span class="string">"url"</span>:<span class="string">"https://www.runoob.com"</span>&#125;</span><br><span class="line">x = mycol.insert_one(mydict) </span><br><span class="line">print(x)</span><br><span class="line">print(x.inserted_id)</span><br></pre></td></tr></table></figure><h4 id="5-2-插入多个文档"><a href="#5-2-插入多个文档" class="headerlink" title="5.2 插入多个文档"></a>5.2 插入多个文档</h4><p><strong><code>集合名.inset_many()</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line">myclient = pymongo.MongoClient(<span class="string">"mongodb://localhost:27017/"</span>)</span><br><span class="line">mydb = myclient[<span class="string">"runoobdb"</span>]</span><br><span class="line">mycol = mydb[<span class="string">"sites"</span>]</span><br><span class="line"></span><br><span class="line">mylist = [</span><br><span class="line">  &#123; <span class="string">"name"</span>: <span class="string">"Taobao"</span>, <span class="string">"alexa"</span>: <span class="string">"100"</span>, <span class="string">"url"</span>: <span class="string">"https://www.taobao.com"</span> &#125;,</span><br><span class="line">  &#123; <span class="string">"name"</span>: <span class="string">"QQ"</span>, <span class="string">"alexa"</span>: <span class="string">"101"</span>, <span class="string">"url"</span>: <span class="string">"https://www.qq.com"</span> &#125;,</span><br><span class="line">  &#123; <span class="string">"name"</span>: <span class="string">"Facebook"</span>, <span class="string">"alexa"</span>: <span class="string">"10"</span>, <span class="string">"url"</span>: <span class="string">"https://www.facebook.com"</span> &#125;,</span><br><span class="line">  &#123; <span class="string">"name"</span>: <span class="string">"知乎"</span>, <span class="string">"alexa"</span>: <span class="string">"103"</span>, <span class="string">"url"</span>: <span class="string">"https://www.zhihu.com"</span> &#125;,</span><br><span class="line">  &#123; <span class="string">"name"</span>: <span class="string">"Github"</span>, <span class="string">"alexa"</span>: <span class="string">"109"</span>, <span class="string">"url"</span>: <span class="string">"https://www.github.com"</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">x = mycol.insert_many(mylist)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出插入的所有文档对应的 _id 值</span></span><br><span class="line">print(x.inserted_ids)</span><br></pre></td></tr></table></figure><h4 id="5-2-插入多个文档（指定-id）"><a href="#5-2-插入多个文档（指定-id）" class="headerlink" title="5.2 插入多个文档（指定_id）"></a>5.2 插入多个文档（指定_id）</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line">myclient = pymongo.MongoClient(<span class="string">"mongodb://localhost:27017/"</span>)</span><br><span class="line">mydb = myclient[<span class="string">"runoobdb"</span>]</span><br><span class="line">mycol = mydb[<span class="string">"site2"</span>]</span><br><span class="line"></span><br><span class="line">mylist = [</span><br><span class="line">  &#123; <span class="string">"_id"</span>: <span class="number">1</span>, <span class="string">"name"</span>: <span class="string">"RUNOOB"</span>, <span class="string">"cn_name"</span>: <span class="string">"菜鸟教程"</span>&#125;,</span><br><span class="line">  &#123; <span class="string">"_id"</span>: <span class="number">2</span>, <span class="string">"name"</span>: <span class="string">"Google"</span>, <span class="string">"address"</span>: <span class="string">"Google 搜索"</span>&#125;,</span><br><span class="line">  &#123; <span class="string">"_id"</span>: <span class="number">3</span>, <span class="string">"name"</span>: <span class="string">"Facebook"</span>, <span class="string">"address"</span>: <span class="string">"脸书"</span>&#125;,</span><br><span class="line">  &#123; <span class="string">"_id"</span>: <span class="number">4</span>, <span class="string">"name"</span>: <span class="string">"Taobao"</span>, <span class="string">"address"</span>: <span class="string">"淘宝"</span>&#125;,</span><br><span class="line">  &#123; <span class="string">"_id"</span>: <span class="number">5</span>, <span class="string">"name"</span>: <span class="string">"Zhihu"</span>, <span class="string">"address"</span>: <span class="string">"知乎"</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">x = mycol.insert_many(mylist)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出插入的所有文档对应的 _id 值</span></span><br><span class="line">print(x.inserted_ids)</span><br></pre></td></tr></table></figure><h3 id="6-查询文档"><a href="#6-查询文档" class="headerlink" title="6.查询文档"></a>6.查询文档</h3><h4 id="6-1-查询单个文档"><a href="#6-1-查询单个文档" class="headerlink" title="6.1 查询单个文档"></a>6.1 查询单个文档</h4><p><strong><code>集合名.find_one()</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">myclient = pymongo.MongoClient(<span class="string">"mongodb://localhost:27017/"</span>)</span><br><span class="line">mydb = myclient[<span class="string">"runoobdb"</span>]</span><br><span class="line">mycol = mydb[<span class="string">"sites"</span>]</span><br><span class="line"></span><br><span class="line">x = mycol.find_one()<span class="comment">#无条件，即为第一条数据</span></span><br><span class="line"></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><h4 id="6-2-查询所有文档"><a href="#6-2-查询所有文档" class="headerlink" title="6.2 查询所有文档"></a>6.2 查询所有文档</h4><p><strong><code>集合名.find()</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line">myclient = pymongo.MongoClient(<span class="string">"mongodb://localhost:27017"</span>)</span><br><span class="line">mydb = myclient[<span class="string">"runoob"</span>]</span><br><span class="line">mycol = mydb[<span class="string">"sites"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> mycol.find()</span><br><span class="line">print(x)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> mycol.find(&#123;&#125;,&#123;<span class="string">"_id"</span>:<span class="number">0</span>,<span class="string">"title"</span>:<span class="number">1</span>&#125;)</span><br><span class="line">print(y)</span><br></pre></td></tr></table></figure><p>==除了 _id ，你不能在一个对象中同时指定 0 和 1（如{ “name”: 1, “alexa”: 0 }），如果你设置了一个字段为 0，则其他都为 1，反之亦然。==</p><h4 id="6-3-查询指定条件文档"><a href="#6-3-查询指定条件文档" class="headerlink" title="6.3 查询指定条件文档"></a>6.3 查询指定条件文档</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">myclient = pymongo.MongoClient(<span class="string">"mongodb://localhost:27017/"</span>)</span><br><span class="line">mydb = myclient[<span class="string">"runoobdb"</span>]</span><br><span class="line">mycol = mydb[<span class="string">"sites"</span>]</span><br><span class="line"><span class="comment">#查询名字为RUNOOB的文档</span></span><br><span class="line">myquery = &#123; <span class="string">"name"</span>: <span class="string">"RUNOOB"</span> &#125; </span><br><span class="line">mydoc = mycol.find(myquery)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> mydoc:</span><br><span class="line">  print(x)</span><br></pre></td></tr></table></figure><h4 id="6-4-高级查询"><a href="#6-4-高级查询" class="headerlink" title="6.4 高级查询"></a>6.4 高级查询</h4><p>基本和mongoDB中写法相同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">myclient = pymongo.MongoClient(<span class="string">"mongodb://localhost:27017/"</span>)</span><br><span class="line">mydb = myclient[<span class="string">"runoobdb"</span>]</span><br><span class="line">mycol = mydb[<span class="string">"sites"</span>]</span><br><span class="line"></span><br><span class="line">myquery = &#123; <span class="string">"name"</span>: &#123; <span class="string">"$gt"</span>: <span class="string">"H"</span> &#125; &#125;</span><br><span class="line"> </span><br><span class="line">mydoc = mycol.find(myquery)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> mydoc:</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><h4 id="6-5-使用正则表达式匹配字符串"><a href="#6-5-使用正则表达式匹配字符串" class="headerlink" title="6.5 使用正则表达式匹配字符串"></a>6.5 使用正则表达式匹配字符串</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line">myclient = pymongo.MongoClient(<span class="string">"mongodb://localhost:27017/"</span>)</span><br><span class="line">mydb = myclient[<span class="string">"runoobdb"</span>]</span><br><span class="line">mycol = mydb[<span class="string">"sites"</span>]</span><br><span class="line"><span class="comment">#"$regex"表示使用正则表达式，"^R"表示首字母为R</span></span><br><span class="line">myquery = &#123; <span class="string">"name"</span>: &#123; <span class="string">"$regex"</span>: <span class="string">"^R"</span> &#125; &#125;</span><br><span class="line"></span><br><span class="line">mydoc = mycol.find(myquery)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> mydoc:</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><h4 id="6-6-返回指定记录数"><a href="#6-6-返回指定记录数" class="headerlink" title="6.6 返回指定记录数"></a>6.6 返回指定记录数</h4><p><strong><code>集合名.find().limit(num)</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"> </span><br><span class="line">myclient = pymongo.MongoClient(<span class="string">"mongodb://localhost:27017/"</span>)</span><br><span class="line">mydb = myclient[<span class="string">"runoobdb"</span>]</span><br><span class="line">mycol = mydb[<span class="string">"sites"</span>]</span><br><span class="line"></span><br><span class="line">myresult = mycol.find().limit(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> myresult:</span><br><span class="line">  print(x)</span><br></pre></td></tr></table></figure><h3 id="7-修改文档"><a href="#7-修改文档" class="headerlink" title="7.修改文档"></a>7.修改文档</h3><h4 id="7-1-修改单个文档"><a href="#7-1-修改单个文档" class="headerlink" title="7.1 修改单个文档"></a>7.1 修改单个文档</h4><p><strong><code>集合名.update_one()</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line">myclient = pymongo.MongoClient(<span class="string">"mongodb://localhost:27017/"</span>)</span><br><span class="line">mydb = myclient[<span class="string">"runoobdb"</span>]</span><br><span class="line">mycol = mydb[<span class="string">"sites"</span>]</span><br><span class="line"></span><br><span class="line">myquery = &#123; <span class="string">"alexa"</span>: <span class="string">"10000"</span> &#125;</span><br><span class="line">newvalues = &#123; <span class="string">"$set"</span>: &#123; <span class="string">"alexa"</span>: <span class="string">"12345"</span> &#125; &#125;</span><br><span class="line"></span><br><span class="line">mycol.update_one(myquery, newvalues)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出修改后的  "sites"  集合</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> mycol.find():</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><h4 id="7-1-修改多个文档"><a href="#7-1-修改多个文档" class="headerlink" title="7.1 修改多个文档"></a>7.1 修改多个文档</h4><p><strong><code>集合名.update_many()</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line">myclient = pymongo.MongoClient(<span class="string">"mongodb://localhost:27017/"</span>)</span><br><span class="line">mydb = myclient[<span class="string">"runoobdb"</span>]</span><br><span class="line">mycol = mydb[<span class="string">"sites"</span>]</span><br><span class="line"></span><br><span class="line">myquery = &#123; <span class="string">"alexa"</span>: &#123; <span class="string">"$reget"</span>:<span class="string">"^F"</span>&#125; &#125;</span><br><span class="line">newvalues = &#123; <span class="string">"$set"</span>: &#123; <span class="string">"alexa"</span>: <span class="string">"123"</span> &#125; &#125;</span><br><span class="line"></span><br><span class="line">x = mycol.update_many(myquery, newvalues)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出修改匹配的数量</span></span><br><span class="line">print(x.modified_count, <span class="string">"文档已修改"</span>)</span><br></pre></td></tr></table></figure><h3 id="8-排序文档"><a href="#8-排序文档" class="headerlink" title="8.排序文档"></a>8.排序文档</h3><p><strong><code>集合名.find().sort()</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line">myclient = pymongo.MongoClient(<span class="string">"mongodb://localhost:27017/"</span>)</span><br><span class="line">mydb = myclient[<span class="string">"runoobdb"</span>]</span><br><span class="line">mycol = mydb[<span class="string">"sites"</span>]</span><br><span class="line"><span class="comment">#"-1"为降序排列</span></span><br><span class="line">mydoc = mycol.find().sort(<span class="string">"alexa"</span>,<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> mydoc:</span><br><span class="line">  print(x)</span><br></pre></td></tr></table></figure><h3 id="9-删除数据"><a href="#9-删除数据" class="headerlink" title="9.删除数据"></a>9.删除数据</h3><h4 id="9-1-删除单个文档"><a href="#9-1-删除单个文档" class="headerlink" title="9.1 删除单个文档"></a>9.1 删除单个文档</h4><p><strong><code>集合名.delete_one()</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line">myclient = pymongo.MongoClient(<span class="string">"mongodb://localhost:27017/"</span>)</span><br><span class="line">mydb = myclient[<span class="string">"runoobdb"</span>]</span><br><span class="line">mycol = mydb[<span class="string">"sites"</span>] </span><br><span class="line">myquery = &#123; <span class="string">"name"</span>: <span class="string">"Taobao"</span> &#125;</span><br><span class="line"></span><br><span class="line">mycol.delete_one(myquery)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除后输出</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> mycol.find():</span><br><span class="line">  print(x)</span><br></pre></td></tr></table></figure><h4 id="9-2-删除多个文档"><a href="#9-2-删除多个文档" class="headerlink" title="9.2 删除多个文档"></a>9.2 删除多个文档</h4><p><strong><code>集合名.delete_many()</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line">myclient = pymongo.MongoClient(<span class="string">"mongodb://localhost:27017/"</span>)</span><br><span class="line">mydb = myclient[<span class="string">"runoobdb"</span>]</span><br><span class="line">mycol = mydb[<span class="string">"sites"</span>] </span><br><span class="line">myquery = &#123; <span class="string">"name"</span>: &#123;<span class="string">"$reget"</span>:<span class="string">"^F"</span>&#125; &#125;</span><br><span class="line"></span><br><span class="line">x = mycol.delete_many(myquery)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除后输出</span></span><br><span class="line">print(x.deleted_count, <span class="string">"个文档已删除"</span>)</span><br></pre></td></tr></table></figure><h4 id="9-3-删除所有文档"><a href="#9-3-删除所有文档" class="headerlink" title="9.3 删除所有文档"></a>9.3 删除所有文档</h4><p><strong><code>集合名.delete_many()</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line">myclient = pymongo.MongoClient(<span class="string">"mongodb://localhost:27017/"</span>)</span><br><span class="line">mydb = myclient[<span class="string">"runoobdb"</span>]</span><br><span class="line">mycol = mydb[<span class="string">"sites"</span>] </span><br><span class="line"><span class="comment">#传入空的查询对象</span></span><br><span class="line">x = mycol.delete_many(&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除后输出</span></span><br><span class="line">print(x.deleted_count, <span class="string">"个文档已删除"</span>)</span><br></pre></td></tr></table></figure><h4 id="9-4-删除集合"><a href="#9-4-删除集合" class="headerlink" title="9.4 删除集合"></a>9.4 删除集合</h4><p><strong><code>集合名.drop()</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line">myclient = pymongo.MongoClient(<span class="string">"mongodb://localhost:27017/"</span>)</span><br><span class="line">mydb = myclient[<span class="string">"runoobdb"</span>]</span><br><span class="line">mycol = mydb[<span class="string">"sites"</span>] </span><br><span class="line"></span><br><span class="line">mycol.drop()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;依靠&lt;strong&gt;pymongo&lt;/strong&gt;包来对mongoDB数据库进行操作&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="MongoDB" scheme="http://yoursite.com/categories/MongoDB/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="MongoDB" scheme="http://yoursite.com/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB学习笔记</title>
    <link href="http://yoursite.com/2020/04/30/mongdb/"/>
    <id>http://yoursite.com/2020/04/30/mongdb/</id>
    <published>2020-04-30T03:48:16.857Z</published>
    <updated>2020-06-08T07:12:11.876Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>在菜鸟教程中学了MongoDB，做此笔记以记录。</p></blockquote><a id="more"></a><h2 id="一、MongoDB安装"><a href="#一、MongoDB安装" class="headerlink" title="一、MongoDB安装"></a>一、MongoDB安装</h2><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h3><p>官方下载地址：<a href="https://www.mongodb.com/download-center/community" target="_blank" rel="noopener">https://www.mongodb.com/download-center/community</a></p><p>快速下载地址：<a href="http://dl.mongodb.org/dl/win32/x86_64" target="_blank" rel="noopener">http://dl.mongodb.org/dl/win32/x86_64</a></p><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h3><p>点击custom可以修改安装目录，另外取消勾选Install MongoDB Compass选项。此为图形界面管理工具。</p><h3 id="3-配置"><a href="#3-配置" class="headerlink" title="3.配置"></a>3.配置</h3><ol><li><p>将bin文件夹配置到PATH的环境变量中。</p></li><li><p>在data文件夹下手动创建db和log</p><p><img src="https://i.loli.net/2020/06/05/qIG2APUuL4HBJkm.png" alt="QQ截图20200605185547"></p></li><li><p>在log文件夹下创建mongodb.log</p><p><img src="https://i.loli.net/2020/06/05/eQxNYgwCMbKB2uJ.png" alt="QQ截图20200224182911"></p></li><li><p>在安装文件夹下新建mongo.config</p><p><img src="https://i.loli.net/2020/06/05/YMRybewGSlTI96k.png" alt="QQ截图20200224183514"></p></li><li><p>文件中写入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#数据文件，路径必须是你自己的电脑的对应路径</span><br><span class="line">dbpath&#x3D;D:\Program Files\MongoDB\Server\4.2\data\db</span><br><span class="line"></span><br><span class="line">#日志文件  </span><br><span class="line">logpath&#x3D;D:\Program Files\MongoDB\Server\4.2\data\log\mongodb.log</span><br><span class="line"></span><br><span class="line">#错误日志采用追加模式，配置这个选项后mongodb的日志会追加到现有的日志文件，而不是从新创建一个新文件</span><br><span class="line">logappend&#x3D;true </span><br><span class="line"></span><br><span class="line">#启用日志文件，默认启用</span><br><span class="line">journal&#x3D;true </span><br><span class="line"></span><br><span class="line">#这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false</span><br><span class="line"></span><br><span class="line">quiet&#x3D;true </span><br><span class="line"></span><br><span class="line">#端口号 默认为27017</span><br><span class="line"></span><br><span class="line">port&#x3D;27017</span><br></pre></td></tr></table></figure></li></ol><ol start="6"><li><p>点击mongod.exe，如果闪一下退出，说明安装正常。进入测试地址<a href="http://localhost:27017/" target="_blank" rel="noopener">localhost:27017</a>。</p><p><img src="https://i.loli.net/2020/06/05/Yg9rQFvnhuVO3Sd.png" alt="QQ截图20200224184752"></p></li><li><p>进入bin文件夹，使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --config D:\Program Files\MongoDB\Server\4.2\mongo.config --install --serviceName &quot;MongoDB&quot;</span><br></pre></td></tr></table></figure><p>右键我的电脑，管理查看mongoDB服务是否自动开启。</p></li><li><p>Warning:</p><p><img src="https://i.loli.net/2020/06/05/45k8NZX2qxKAm7v.png" alt="QQ截图20200226082930"></p></li></ol><p>原因：新版本的MongDB增加了安全性设计，推荐用户创建使用数据库时进行验证。如果用户想建立简单连接，则会提示警示信息。</p><p>解决方案：<br>创建管理员并设置密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;use admin</span><br><span class="line">&gt;db.createUser(</span><br><span class="line">  &#123;</span><br><span class="line">    user: &quot;admin&quot;, &#x2F;&#x2F;用户名</span><br><span class="line">    pwd: &quot;passwd&quot;, &#x2F;&#x2F;密码</span><br><span class="line">    roles: [ &#123; role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; &#125; ] &#x2F;&#x2F;设置权限</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="二、Robo-3T安装"><a href="#二、Robo-3T安装" class="headerlink" title="二、Robo 3T安装"></a>二、Robo 3T安装</h2><h3 id="1-下载-1"><a href="#1-下载-1" class="headerlink" title="1.下载"></a>1.下载</h3><p>官方下载地址：<a href="https://robomongo.org/download" target="_blank" rel="noopener">https://robomongo.org/download</a></p><h3 id="2-建立连接"><a href="#2-建立连接" class="headerlink" title="2.建立连接"></a>2.建立连接</h3><p>点击Create，</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/05/MvmSsP2EQZG3huK.png" alt="QQ截图20200224202820" title="">                </div>                <div class="image-caption">QQ截图20200224202820</div>            </figure><p>修改连接名，save</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/05/j5spKWLImNF6ic9.png" alt="QQ截图20200224202902" title="">                </div>                <div class="image-caption">QQ截图20200224202902</div>            </figure><h2 id="三、基本概念"><a href="#三、基本概念" class="headerlink" title="三、基本概念"></a>三、基本概念</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><ol><li>MongoDB有着与您熟知的‘数据库’（database，对于Oracle就是‘schema’）一样的概念。在一个MongoDB的实例中您有若干个数据库或者一个也没有，不过这里的每一个数据库都是高层次的容器，用来储存其他的所有数据。</li><li>一个数据库可以有若干‘集合’（collection），或者一个也没有。集合和传统概念中的‘表’有着足够多的共同点，所以您大可认为这两者是一样的东西。</li><li>集合由若干‘文档’（document）组成，也可以为空。类似的，可以认为这里的文档就是‘行’。</li><li>文档又由一个或者更多个‘域’（field）组成，您猜的没错，域就像是‘列’。</li><li>‘索引’（index）在MongoDB中的意义就如同索引在RDBMS中一样。</li><li>‘游标’（cursor）和以上5个概念不同，它很重要但是却常常被忽略，有鉴于此我认为应该进行专门讨论。关于游标有一点很重要，就是每当向MongoDB索要数据时，它总是返回一个游标。基于游标我们可以作诸如计数或是直接跳过之类的操作，而不需要真正去读数据。</li></ol><blockquote><p>小结一下，MongoDB由‘数据库’组成，数据库由‘集合’组成，集合由‘文档’组成。‘域’组成了文档，集合可以被‘索引’，从而提高了查找和排序的性能。最后，我们从MongoDB读取数据的时候是通过‘游标’进行的，除非需要，游标不会真正去作读的操作。</p></blockquote><h3 id="2-id生成规则"><a href="#2-id生成规则" class="headerlink" title="2._id生成规则"></a>2._id生成规则</h3><p>MongoDB的文档必须有一个_id键。</p><p>目的是为了确认在集合里的每个文档都能被唯一标识。</p><p>ObjectId 是 _id 的默认类型。</p><blockquote><p>ObjectId 采用12字节的存储空间，每个字节两位16进制数字，是一个24位的字符串。</p></blockquote><p>12位生成规则：</p><p>[0,1,2,3] [4,5,6] [7,8] [9,10,11]</p><p>时间戳 |机器码 |PID |计数器</p><ul><li>前四字节是时间戳，可以提供秒级别的唯一性。</li><li>接下来三字节是所在主机的唯一标识符，通常是机器主机名的散列值。</li><li>接下来两字节是产生ObjectId的PID，确保同一台机器上并发产生的ObjectId是唯一的。</li></ul><p>前九字节保证了同一秒钟不同机器的不同进程产生的ObjectId时唯一的。</p><ul><li>最后三字节是自增计数器，确保相同进程同一秒钟产生的ObjectId是唯一的。</li></ul><h2 id="四、语法格式"><a href="#四、语法格式" class="headerlink" title="四、语法格式"></a>四、语法格式</h2><h3 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1.创建数据库"></a>1.创建数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use DATABASE_NAME</span><br></pre></td></tr></table></figure><p>如果数据库不存在，则创建。否则切换到指定数据库</p><h3 id="2-查看所有数据库（无数据则不显示）"><a href="#2-查看所有数据库（无数据则不显示）" class="headerlink" title="2.查看所有数据库（无数据则不显示）"></a>2.查看所有数据库（无数据则不显示）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show dbs</span><br></pre></td></tr></table></figure><h3 id="3-删库（先use，再drop）"><a href="#3-删库（先use，再drop）" class="headerlink" title="3.删库（先use，再drop）"></a>3.删库（先use，再drop）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use runoob</span><br><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure><h3 id="4-创建集合（表）"><a href="#4-创建集合（表）" class="headerlink" title="4.创建集合（表）"></a>4.创建集合（表）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.createCollection(name, options)&#x2F;&#x2F;注意Colle“C”大写</span><br><span class="line">db.createCollection(&quot;mycol&quot;,&#123;capped:true,autoIndexId:true,size:6142800,max:10000&#125;)</span><br></pre></td></tr></table></figure><ul><li>name：要创建的集合名字</li><li>options：可选参数</li></ul><table><thead><tr><th align="left">字段</th><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">capped</td><td align="left">布尔</td><td align="left">（可选）如果为 true，则创建固定集合。固定集合是指有着固定大小的集合，当达到最大值时，它会自动覆盖最早的文档。 <strong>当该值为 true 时，必须指定 size 参数。</strong></td></tr><tr><td align="left">autoIndexId</td><td align="left">布尔</td><td align="left">（可选）如为 true，自动在 _id 字段创建索引。默认为 false。</td></tr><tr><td align="left">size</td><td align="left">数值</td><td align="left">（可选）为固定集合指定一个最大值，以千字节计（KB）。 <strong>如果 capped 为 true，也需要指定该字段。</strong></td></tr><tr><td align="left">max</td><td align="left">数值</td><td align="left">（可选）指定固定集合中包含文档的最大数量。</td></tr></tbody></table><p>在 MongoDB 中，你不需要创建集合。当你插入一些文档时，MongoDB 会自动创建集合。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-查看集合"><a href="#5-查看集合" class="headerlink" title="5.查看集合"></a>5.查看集合</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show collections</span><br></pre></td></tr></table></figure><h3 id="6-删除集合"><a href="#6-删除集合" class="headerlink" title="6.删除集合"></a>6.删除集合</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.drop()</span><br></pre></td></tr></table></figure><h3 id="7-插入文档（一条记录）"><a href="#7-插入文档（一条记录）" class="headerlink" title="7.插入文档（一条记录）"></a>7.插入文档（一条记录）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.insert(document)</span><br><span class="line">db.collection.insertOne(&#123;&quot;a&quot;: 3&#125;)</span><br><span class="line">db.collection.insertMany([&#123;&quot;b&quot;: 3&#125;, &#123;&#39;c&#39;: 4&#125;])</span><br><span class="line">&#x2F;&#x2F;例子，该集合不在该数据库中，MongoDB会自动创建该集合并插入文档。</span><br><span class="line">db.col.insert(&#123;title: &#39;MongoDB 教程&#39;, </span><br><span class="line">    description: &#39;MongoDB 是一个 Nosql 数据库&#39;,</span><br><span class="line">    by: &#39;菜鸟教程&#39;,</span><br><span class="line">    url: &#39;http:&#x2F;&#x2F;www.runoob.com&#39;,</span><br><span class="line">    tags: [&#39;mongodb&#39;, &#39;database&#39;, &#39;NoSQL&#39;],</span><br><span class="line">    likes: 100</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>也可以将数据定义为一个变量,然后插入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">document&#x3D;(&#123;title: &#39;MongoDB 教程&#39;, </span><br><span class="line">    description: &#39;MongoDB 是一个 Nosql 数据库&#39;,</span><br><span class="line">    by: &#39;菜鸟教程&#39;,</span><br><span class="line">    url: &#39;http:&#x2F;&#x2F;www.runoob.com&#39;,</span><br><span class="line">    tags: [&#39;mongodb&#39;, &#39;database&#39;, &#39;NoSQL&#39;],</span><br><span class="line">    likes: 100</span><br><span class="line">&#125;);</span><br><span class="line">db.col.insert(document)</span><br></pre></td></tr></table></figure><h3 id="8-查看已插入文档"><a href="#8-查看已插入文档" class="headerlink" title="8.查看已插入文档"></a>8.查看已插入文档</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.find()</span><br><span class="line">db.COLLECTION_NAME.find().pretty()&#x2F;&#x2F;格式优化</span><br></pre></td></tr></table></figure><h3 id="9-更新文档"><a href="#9-更新文档" class="headerlink" title="9.更新文档"></a>9.更新文档</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.collection.update(</span><br><span class="line">   &lt;query&gt;,</span><br><span class="line">   &lt;update&gt;,</span><br><span class="line">   &#123;</span><br><span class="line">     upsert: &lt;boolean&gt;,</span><br><span class="line">     multi: &lt;boolean&gt;,</span><br><span class="line">     writeConcern: &lt;document&gt;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br><span class="line">db.col.update(&#123;&#39;title&#39;:&#39;MongoDB 教程&#39;&#125;,&#123;$set:&#123;&#39;title&#39;:&#39;MongoDB&#39;&#125;&#125;,&#123;multi:true&#125;)</span><br></pre></td></tr></table></figure><ul><li><strong>query</strong> : update的查询条件，类似sql update查询内where后面的。</li><li><strong>update</strong> : update的对象和一些更新的操作符（如$,$inc…）等，也可以理解为sql update查询内set后面的</li><li><strong>upsert</strong> : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。</li><li><strong>multi</strong> : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。</li><li><strong>writeConcern</strong> :可选，抛出异常的级别。</li></ul><p>save() 方法通过传入的文档来替换已有文档。语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.collection.save(</span><br><span class="line">   &lt;document&gt;,</span><br><span class="line">   &#123;</span><br><span class="line">     writeConcern: &lt;document&gt;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li><strong>document</strong> : 文档数据。</li><li><strong>writeConcern</strong> :可选，抛出异常的级别。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">db.col.save(&#123;</span><br><span class="line">    &quot;_id&quot; : ObjectId(&quot;56064f89ade2f21f36b03136&quot;),</span><br><span class="line">    &quot;title&quot; : &quot;MongoDB&quot;,</span><br><span class="line">    &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,</span><br><span class="line">    &quot;by&quot; : &quot;Runoob&quot;,</span><br><span class="line">    &quot;url&quot; : &quot;http:&#x2F;&#x2F;www.runoob.com&quot;,</span><br><span class="line">    &quot;tags&quot; : [</span><br><span class="line">            &quot;mongodb&quot;,</span><br><span class="line">            &quot;NoSQL&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;likes&quot; : 110</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="10-删除文档"><a href="#10-删除文档" class="headerlink" title="10.删除文档"></a>10.删除文档</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.collection.remove(</span><br><span class="line">   &lt;query&gt;,</span><br><span class="line">   &#123;</span><br><span class="line">     justOne: &lt;boolean&gt;,</span><br><span class="line">     writeConcern: &lt;document&gt;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br><span class="line">db.col.remove(&#123;&#39;title&#39;:&#39;MongoDB 教程&#39;&#125;)</span><br></pre></td></tr></table></figure><ul><li><strong>query</strong> :（可选）删除的文档的条件。</li><li><strong>justOne</strong> : （可选）如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档。</li><li><strong>writeConcern</strong> :（可选）抛出异常的级别。</li></ul><h3 id="11-查询文档"><a href="#11-查询文档" class="headerlink" title="11.查询文档"></a>11.查询文档</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collection.find(query, projection)</span><br></pre></td></tr></table></figure><ul><li><strong>query</strong> ：可选，使用查询操作符指定查询条件</li><li><strong>projection</strong> ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）</li></ul><p>如果你需要以易读的方式来读取数据，可以使用 pretty() 方法，语法格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.find().pretty()</span><br></pre></td></tr></table></figure><h4 id="11-1-比较操作符"><a href="#11-1-比较操作符" class="headerlink" title="11.1 ==比较操作符=="></a>11.1 ==比较操作符==</h4><table><thead><tr><th align="left">操作</th><th align="left">格式</th><th align="left">范例</th><th align="left">RDBMS中的类似语句</th></tr></thead><tbody><tr><td align="left">等于</td><td align="left">{:}</td><td align="left"><code>db.col.find({&quot;by&quot;:&quot;菜鸟教程&quot;}).pretty()</code></td><td align="left"><code>where by = &#39;菜鸟教程&#39;</code></td></tr><tr><td align="left">小于</td><td align="left">{:{$lt:}}</td><td align="left"><code>db.col.find({&quot;likes&quot;:{$lt:50}}).pretty()</code></td><td align="left"><code>where likes &lt; 50</code></td></tr><tr><td align="left">小于等于</td><td align="left">{:{$lte:}}</td><td align="left"><code>db.col.find({&quot;likes&quot;:{$lte:50}}).pretty()</code></td><td align="left"><code>where likes &lt;= 50</code></td></tr><tr><td align="left">大于</td><td align="left">{:{$gt:}}</td><td align="left"><code>db.col.find({&quot;likes&quot;:{$gt:50}}).pretty()</code></td><td align="left"><code>where likes &gt; 50</code></td></tr><tr><td align="left">大于等于</td><td align="left">{:{$gte:}}</td><td align="left"><code>db.col.find({&quot;likes&quot;:{$gte:50}}).pretty()</code></td><td align="left"><code>where likes &gt;= 50</code></td></tr><tr><td align="left">不等于</td><td align="left">{:{$ne:}}</td><td align="left"><code>db.col.find({&quot;likes&quot;:{$ne:50}}).pretty()</code></td><td align="left"><code>where likes != 50</code></td></tr></tbody></table><h4 id="11-2-AND比较条件"><a href="#11-2-AND比较条件" class="headerlink" title="11.2 AND比较条件"></a>11.2 AND比较条件</h4><p>多条件间以逗号隔开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.find(&#123;key1:value1, key2:value2&#125;).pretty()</span><br></pre></td></tr></table></figure><h4 id="11-3-OR比较条件"><a href="#11-3-OR比较条件" class="headerlink" title="11.3 OR比较条件"></a>11.3 OR比较条件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.col.find(</span><br><span class="line">   &#123;</span><br><span class="line">      $or: [</span><br><span class="line">         &#123;key1: value1&#125;, &#123;key2:value2&#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">).pretty()</span><br><span class="line">&#x2F;&#x2F;举例子</span><br><span class="line">db.col.find(&#123;$or:[&#123;&quot;by&quot;:&quot;菜鸟教程&quot;&#125;,&#123;&quot;title&quot;: &quot;MongoDB 教程&quot;&#125;]&#125;).pretty()</span><br></pre></td></tr></table></figure><h4 id="11-4-AND-和-OR-联合使用"><a href="#11-4-AND-和-OR-联合使用" class="headerlink" title="11.4 AND 和 OR 联合使用"></a>11.4 AND 和 OR 联合使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.find(&#123;&quot;likes&quot;: &#123;$gt:50&#125;, $or: [&#123;&quot;by&quot;: &quot;菜鸟教程&quot;&#125;,&#123;&quot;title&quot;: &quot;MongoDB 教程&quot;&#125;]&#125;).pretty()</span><br></pre></td></tr></table></figure><h4 id="11-5-使用-lt-和-gt-查询"><a href="#11-5-使用-lt-和-gt-查询" class="headerlink" title="11.5 使用 (&lt;) 和 (&gt;) 查询"></a>11.5 使用 (&lt;) 和 (&gt;) 查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.find(&#123;likes : &#123;$lt :200, $gt : 100&#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="11-6-type操作符"><a href="#11-6-type操作符" class="headerlink" title="11.6 $type操作符"></a>11.6 $type操作符</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.col.find(&#123;&quot;title&quot; : &#123;$type : &#39;string&#39;&#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="12-Limit与Skip方法"><a href="#12-Limit与Skip方法" class="headerlink" title="12.Limit与Skip方法"></a>12.Limit与Skip方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.find().limit(NUMBER)</span><br></pre></td></tr></table></figure><p>==db.col.find({},{“title”:1,_id:0}).limit(2)==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER)</span><br></pre></td></tr></table></figure><h3 id="13-排序"><a href="#13-排序" class="headerlink" title="13.排序"></a>13.排序</h3><p>sort() 方法可以通过参数指定排序的字段，并使用 1 和 -1 来指定排序的方式，其中 1 为升序排列，而 -1 是用于降序排列。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.find().sort(&#123;KEY:1&#125;)</span><br></pre></td></tr></table></figure><h3 id="14-创建索引"><a href="#14-创建索引" class="headerlink" title="14.创建索引"></a>14.创建索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.collection.createIndex(keys, options)</span><br><span class="line">db.values.createIndex(&#123;open: 1, close: 1&#125;, &#123;background: true&#125;)</span><br></pre></td></tr></table></figure><p>Key 值为你要创建的索引字段，1 为指定按升序创建索引，如果你想按降序来创建索引指定为 -1 即可。</p><p>createIndex() 接收可选参数，可选参数列表如下：</p><table><thead><tr><th align="left">Parameter</th><th align="left">Type</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">background</td><td align="left">Boolean</td><td align="left">建索引过程会阻塞其它数据库操作，background可指定以后台方式创建索引，即增加 “background” 可选参数。 “background” 默认值为<strong>false</strong>。</td></tr><tr><td align="left">unique</td><td align="left">Boolean</td><td align="left">建立的索引是否唯一。指定为true创建唯一索引。默认值为<strong>false</strong>.</td></tr><tr><td align="left">name</td><td align="left">string</td><td align="left">索引的名称。如果未指定，MongoDB的通过连接索引的字段名和排序顺序生成一个索引名称。</td></tr><tr><td align="left">dropDups</td><td align="left">Boolean</td><td align="left"><strong>3.0+版本已废弃。</strong>在建立唯一索引时是否删除重复记录,指定 true 创建唯一索引。默认值为 <strong>false</strong>.</td></tr><tr><td align="left">sparse</td><td align="left">Boolean</td><td align="left">对文档中不存在的字段数据不启用索引；这个参数需要特别注意，如果设置为true的话，在索引字段中不会查询出不包含对应字段的文档.。默认值为 <strong>false</strong>.</td></tr><tr><td align="left">expireAfterSeconds</td><td align="left">integer</td><td align="left">指定一个以秒为单位的数值，完成 TTL设定，设定集合的生存时间。</td></tr><tr><td align="left">v</td><td align="left">index version</td><td align="left">索引的版本号。默认的索引版本取决于mongod创建索引时运行的版本。</td></tr><tr><td align="left">weights</td><td align="left">document</td><td align="left">索引权重值，数值在 1 到 99,999 之间，表示该索引相对于其他索引字段的得分权重。</td></tr><tr><td align="left">default_language</td><td align="left">string</td><td align="left">对于文本索引，该参数决定了停用词及词干和词器的规则的列表。 默认为英语</td></tr><tr><td align="left">language_override</td><td align="left">string</td><td align="left">对于文本索引，该参数指定了包含在文档中的字段名，语言覆盖默认的language，默认值为 language.</td></tr></tbody></table><h3 id="15-聚合"><a href="#15-聚合" class="headerlink" title="15.聚合"></a>15.聚合</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">表达式</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">$sum</td><td align="left">计算总和。</td><td align="left">db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$sum : “$likes”}}}])</td></tr><tr><td align="left">$avg</td><td align="left">计算平均值</td><td align="left">db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$avg : “$likes”}}}])</td></tr><tr><td align="left">$min</td><td align="left">获取集合中所有文档对应值得最小值。</td><td align="left">db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$min : “$likes”}}}])</td></tr><tr><td align="left">$max</td><td align="left">获取集合中所有文档对应值得最大值。</td><td align="left">db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$max : “$likes”}}}])</td></tr><tr><td align="left">$push</td><td align="left">在结果文档中插入值到一个数组中。</td><td align="left">db.mycol.aggregate([{$group : {_id : “$by_user”, url : {$push: “$url”}}}])</td></tr><tr><td align="left">$addToSet</td><td align="left">在结果文档中插入值到一个数组中，但不创建副本。</td><td align="left">db.mycol.aggregate([{$group : {_id : “$by_user”, url : {$addToSet : “$url”}}}])</td></tr><tr><td align="left">$first</td><td align="left">根据资源文档的排序获取第一个文档数据。</td><td align="left">db.mycol.aggregate([{$group : {_id : “$by_user”, first_url : {$first : “$url”}}}])</td></tr><tr><td align="left">$last</td><td align="left">根据资源文档的排序获取最后一个文档数据</td><td align="left">db.mycol.aggregate([{$group : {_id : “$by_user”, last_url : {$last : “$url”}}}])</td></tr></tbody></table><h3 id="16-管道"><a href="#16-管道" class="headerlink" title="16.管道"></a>16.管道</h3><p>管道在Unix和Linux中一般用于将当前命令的输出结果作为下一个命令的参数。</p><p>MongoDB的聚合管道将MongoDB文档在一个管道处理完毕后将结果传递给下一个管道处理。管道操作是可以重复的。</p><p>表达式：处理输入文档并输出。表达式是无状态的，只能用于计算当前聚合管道的文档，不能处理其它的文档。</p><p>这里我们介绍一下聚合框架中常用的几个操作：</p><ul><li>$project：修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。</li><li>$match：用于过滤数据，只输出符合条件的文档。$match使用MongoDB的标准查询操作。</li><li>$limit：用来限制MongoDB聚合管道返回的文档数。</li><li>$skip：在聚合管道中跳过指定数量的文档，并返回余下的文档。</li><li>$unwind：将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。</li><li>$group：将集合中的文档分组，可用于统计结果。</li><li>$sort：将输入文档排序后输出。</li><li>$geoNear：输出接近某一地理位置的有序文档。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.article.aggregate(</span><br><span class="line">    &#123; $project : &#123;</span><br><span class="line">        title : 1 ,</span><br><span class="line">        author : 1 ,</span><br><span class="line">    &#125;&#125;</span><br><span class="line"> );</span><br></pre></td></tr></table></figure><p>这样的话结果中就只还有_id,tilte和author三个字段了，默认情况下_id字段是被包含的，如果要想不包含_id话可以这样:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.article.aggregate(</span><br><span class="line">    &#123; $project : &#123;</span><br><span class="line">        _id : 0 ,</span><br><span class="line">        title : 1 ,</span><br><span class="line">        author : 1</span><br><span class="line">    &#125;&#125;);</span><br></pre></td></tr></table></figure><h2 id="五、维护"><a href="#五、维护" class="headerlink" title="五、维护"></a>五、维护</h2><h3 id="1-副本集？"><a href="#1-副本集？" class="headerlink" title="1.副本集？"></a>1.副本集？</h3><h3 id="2-分片集？"><a href="#2-分片集？" class="headerlink" title="2.分片集？"></a>2.分片集？</h3><h3 id="3-备份-mongodump-与恢复-mongorestore"><a href="#3-备份-mongodump-与恢复-mongorestore" class="headerlink" title="3.备份(mongodump)与恢复(mongorestore)"></a>3.备份(mongodump)与恢复(mongorestore)</h3><p><strong>备份mongodump</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mongodump -h dbhost -d dbname -o dbdirectory</span><br><span class="line">mongodump -h 127.0.0.1:27017 -d TestBase -o D:\data\home\momgodump</span><br></pre></td></tr></table></figure><ul><li><p>-h：</p><p>MongDB所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017</p></li><li><p>-d：</p><p>需要备份的数据库实例，例如：test</p></li><li><p>-o：</p><p>备份的数据存放位置，例如：c:\data\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。</p></li></ul><p><strong>恢复mongorestore</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mongorestore -h &lt;hostname&gt;&lt;:port&gt; -d dbname &lt;path&gt;</span><br><span class="line">mongorestore -h 127.0.0.1:27017 -d TestBase --dir D:\data\home\momgodump\TestBase</span><br></pre></td></tr></table></figure><ul><li><p>–host &lt;:port&gt;, -h &lt;:port&gt;：</p><p>MongoDB所在服务器地址，默认为： localhost:27017</p></li><li><p>–db , -d ：</p><p>需要恢复的数据库实例，例如：test，当然这个名称也可以和备份时候的不一样，比如test2</p></li><li><p>–drop：</p><p>恢复的时候，先删除当前数据，然后恢复备份的数据。就是说，恢复后，备份后添加修改的数据都会被删除，慎用哦！</p></li><li><p><path>：</p><p>mongorestore 最后的一个参数，设置备份数据所在位置，例如：c:\data\dump\test。</p><p>你不能同时指定 <path> 和 –dir 选项，–dir也可以设置备份目录。</p></li><li><p>–dir：</p><p>指定备份的目录</p><p>你不能同时指定 <path> 和 –dir 选项。</p></li></ul><h3 id="4-监控"><a href="#4-监控" class="headerlink" title="4.监控"></a>4.监控</h3><p>mongostat会间隔固定时间获取mongodb的当前运行状态，并输出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongostat</span><br></pre></td></tr></table></figure><p>mongotop提供了一个方法，用来跟踪一个MongoDB的实例，查看哪些大量的时间花费在读取和写入数据。 mongotop提供每个集合的水平的统计数据。默认情况下，mongotop返回值的每一秒。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongotop</span><br></pre></td></tr></table></figure><h3 id="5-Mongodb-to-Json"><a href="#5-Mongodb-to-Json" class="headerlink" title="5.Mongodb to Json"></a>5.Mongodb to Json</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongoexport -h 连接地址 --port 端口 --authenticationDatabase admin -u 用户名 -p 密码 -d 数据库名字 -c 集合名 -o D:\tx.json</span><br></pre></td></tr></table></figure><p><code>--authenticationDatabase admin</code>不加这个参数会出现错误。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在菜鸟教程中学了MongoDB，做此笔记以记录。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="MongoDB" scheme="http://yoursite.com/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="http://yoursite.com/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Typora+PicGo+七牛云 个人博客方案</title>
    <link href="http://yoursite.com/2020/04/30/Typora+PicGo+%E4%B8%83%E7%89%9B%E4%BA%91%20%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2020/04/30/Typora+PicGo+%E4%B8%83%E7%89%9B%E4%BA%91%20%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%96%B9%E6%A1%88/</id>
    <published>2020-04-30T03:23:35.425Z</published>
    <updated>2020-06-27T12:44:22.101Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>选择Typora+PicGo+七牛云这一套个人博客方案，简化自己创建博客过程。</p></blockquote><a id="more"></a><p><span style="border-bottom:2px dashed red;">注意：七牛云的域名只能用一个月，所以最好拥有一个备案的域名。不然一个月后的图床域名会被回收，之前上传的图片无法下载，只能通过官方工具来下载。至于如何通过官方工具来下载图片，后期再更新吧。总之，这是个悲伤的故事。</span></p><h4 id="1-PicGo的下载安装"><a href="#1-PicGo的下载安装" class="headerlink" title="1. PicGo的下载安装"></a>1. PicGo的下载安装</h4><p>下载地址：<a href="https://molunerfinn.com/PicGo/" target="_blank" rel="noopener">https://molunerfinn.com/PicGo/</a></p><p>找到图床设置，七牛图床。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/05/ibRYOnlrgjcpxP2.png" alt="QQ截图20200430105256" title="">                </div>                <div class="image-caption">QQ截图20200430105256</div>            </figure><p>查看自己需要的配置项。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/05/zSbf4CHhKy9VgqY.png" alt="QQ截图20200430105451" title="">                </div>                <div class="image-caption">QQ截图20200430105451</div>            </figure><p><strong>需要填写的配置项：</strong></p><ul><li>AccessKey：接入公钥。</li><li>SecretKey：自己的私钥。</li><li>存储空间名：七牛云上设置的存储空间名。</li><li>访问地址：七牛云上空间的外链访问地址。</li><li>存储区域：创建空间时，选择的存储区域，从z0到z1，依次对应：华东、华北、华南、北美、东南亚。</li></ul><h4 id="2-七牛云图床创建"><a href="#2-七牛云图床创建" class="headerlink" title="2. 七牛云图床创建"></a>2. 七牛云图床创建</h4><p>七牛云官网：<a href="https://www.qiniu.com/" target="_blank" rel="noopener">https://www.qiniu.com/</a></p><p>注册选择个人用户，登录并个人身份认证。</p><p>点击自己的头像，选择秘钥管理。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/05/4YF2DmX3LAPC9l5.png" alt="QQ截图20200430110237" title="">                </div>                <div class="image-caption">QQ截图20200430110237</div>            </figure><p>这样就可以看到自己的AccessKey和SercetKey了。复制粘贴到PicGo的配置中。</p><p>在左边侧边栏中找到对象存储。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/05/J3mfiDGKzTB1o82.png" alt="QQ截图20200430110522" title="">                </div>                <div class="image-caption">QQ截图20200430110522</div>            </figure><p>找到空间管理，选择新建空间。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/05/lCq1W8XfzrgUHj2.png" alt="QQ截图20200430110657" title="">                </div>                <div class="image-caption">QQ截图20200430110657</div>            </figure><p>在新建空间时可以设置响应的空间名，存储区域。</p><p>存储区域选择一个举例自己位置近的即可。<strong>注意：填在PicGo的存储区域，是相应的区域代码：z0-z4</strong></p><p>访问控制选择公开。</p><p>这样就可以在PicGo中填入，空间名和存储区域。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/05/Vqi9WpHJxCPv5ko.png" alt="QQ截图20200430110926" title="">                </div>                <div class="image-caption">QQ截图20200430110926</div>            </figure><p>现在就差一个访问地址没有填了。</p><p>这个可以在空间管理，找到自己刚创建的空间，选择后面的概览，进入概览后选择文件管理，这样就看到自己的外链域名了。（注意：这个地址不可复制）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/05/ytUSOJBnPeCd3fg.png" alt="QQ截图20200430111715" title="">                </div>                <div class="image-caption">QQ截图20200430111715</div>            </figure><p>将地址输入PicGo的配置中，在指定存储路径中添加<code>img/</code>。</p><p>这样PicGo就配置好了。</p><h4 id="3-Typora配置"><a href="#3-Typora配置" class="headerlink" title="3. Typora配置"></a>3. Typora配置</h4><p>选择文件-&gt;偏好设置-&gt;图像。按照图中配置，配置完验证图片上传选项即可。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/05/BwunejVROhvosc2.png" alt="QQ截图20200430112103" title="">                </div>                <div class="image-caption">QQ截图20200430112103</div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;选择Typora+PicGo+七牛云这一套个人博客方案，简化自己创建博客过程。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="个人博客" scheme="http://yoursite.com/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="图床应用" scheme="http://yoursite.com/tags/%E5%9B%BE%E5%BA%8A%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>功能测试</title>
    <link href="http://yoursite.com/2020/01/03/test/"/>
    <id>http://yoursite.com/2020/01/03/test/</id>
    <published>2020-01-03T03:41:23.267Z</published>
    <updated>2020-06-05T11:24:17.377Z</updated>
    
    <content type="html"><![CDATA[<hr /><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>测试一些博客的功能<br><img src="https://i.loli.net/2020/06/05/gSDOawKukWfAlGj.jpg"></p></blockquote><a id="more"></a><img src="https://i.loli.net/2020/06/05/2ZsjRpGgaiuvtyQ.jpg"><p><a href="/download/test.py"">点击下载text.py</a></p><video width="100%" height="400" src="/video/movie.mp4" controls="controls">The `<video>` tag is not supported by your browser.</video>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;测试一些博客的功能&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2020/06/05/gSDOawKukWfAlGj.jpg&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="测试" scheme="http://yoursite.com/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="测试" scheme="http://yoursite.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Numpy学习笔记</title>
    <link href="http://yoursite.com/2020/01/01/Numpy/"/>
    <id>http://yoursite.com/2020/01/01/Numpy/</id>
    <published>2020-01-01T07:49:09.931Z</published>
    <updated>2020-01-02T12:06:39.294Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>学习Numpy的基本应用</p></blockquote><a id="more"></a><h1 id="Numpy学习笔记"><a href="#Numpy学习笔记" class="headerlink" title="Numpy学习笔记"></a>Numpy学习笔记</h1><p>首先需要导入Numpy包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><h2 id="一、ndarray数组"><a href="#一、ndarray数组" class="headerlink" title="一、ndarray数组"></a>一、ndarray数组</h2><h3 id="1、数组的生成"><a href="#1、数组的生成" class="headerlink" title="1、数组的生成"></a>1、数组的生成</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a = array([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>可以与C语言一样用索引来定位数组元素，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a[<span class="number">0</span>] = <span class="number">5</span></span><br></pre></td></tr></table></figure><p>也可以将数组改为二维数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a.shape = <span class="number">2</span>,<span class="number">2</span></span><br><span class="line">&gt;&gt;&gt;print(a)</span><br><span class="line">   [[<span class="number">5</span> <span class="number">1</span>]</span><br><span class="line">    [<span class="number">2</span> <span class="number">3</span>]]</span><br></pre></td></tr></table></figure><p>特例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;b = zeros((<span class="number">2</span>,<span class="number">3</span>),dtype=int)<span class="comment">#生成2行3列的0填充数组</span></span><br><span class="line">   [[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line">    [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]]</span><br><span class="line">&gt;&gt;&gt;a = ones((<span class="number">3</span>,<span class="number">2</span>),dtype=int) * <span class="number">5</span> </span><br><span class="line">   [[<span class="number">5</span> <span class="number">5</span>]</span><br><span class="line">    [<span class="number">5</span> <span class="number">5</span>]</span><br><span class="line">    [<span class="number">5</span> <span class="number">5</span>]]</span><br><span class="line">&gt;&gt;&gt;b.fill(<span class="number">-4.8</span>)<span class="comment">#向数组中填充元素，填充元素会转化为数组原数据类型</span></span><br><span class="line">   [[<span class="number">-4</span> <span class="number">-4</span> <span class="number">-4</span>]</span><br><span class="line">    [<span class="number">-4</span> <span class="number">-4</span> <span class="number">-4</span>]]</span><br><span class="line">&gt;&gt;&gt;a = arange(<span class="number">0</span>,<span class="number">80</span>,<span class="number">10</span>)<span class="comment">#start到end间隔是10左闭右开</span></span><br><span class="line">   array([ <span class="number">0</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>, <span class="number">70</span>])</span><br><span class="line">&gt;&gt;&gt;a = identity(<span class="number">3</span>,dtype=int)<span class="comment">#生成单位矩阵</span></span><br><span class="line">   array([[ <span class="number">1.</span>,  <span class="number">0.</span>,  <span class="number">0.</span>],</span><br><span class="line">          [ <span class="number">0.</span>,  <span class="number">1.</span>,  <span class="number">0.</span>],</span><br><span class="line">          [ <span class="number">0.</span>,  <span class="number">0.</span>,  <span class="number">1.</span>]])</span><br></pre></td></tr></table></figure><h3 id="2、数组的类型"><a href="#2、数组的类型" class="headerlink" title="2、数组的类型"></a>2、数组的类型</h3><p> 复数数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a = array([<span class="number">1</span> + <span class="number">1j</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">&gt;&gt;&gt;a.real<span class="comment">#实部</span></span><br><span class="line">&gt;&gt;&gt;a.imag<span class="comment">#虚部</span></span><br><span class="line">&gt;&gt;&gt;a.conj()<span class="comment">#查看共轭</span></span><br></pre></td></tr></table></figure><p>类型转换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;asarray(a, dtype=float64)<span class="comment">#不会修改原数组的值,但转换与原数组类型相同时返回引用</span></span><br><span class="line">&gt;&gt;&gt;a.astype(float64)<span class="comment">#无论何时返回复制</span></span><br></pre></td></tr></table></figure><h3 id="3、数组的属性"><a href="#3、数组的属性" class="headerlink" title="3、数组的属性"></a>3、数组的属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a.size<span class="comment">#数组的大小</span></span><br><span class="line">&gt;&gt;&gt;a.shape<span class="comment">#数组的形状</span></span><br><span class="line">&gt;&gt;&gt;a.nbytes<span class="comment">#数组元素所占空间</span></span><br><span class="line">&gt;&gt;&gt;a.ndim<span class="comment">#数组维数</span></span><br></pre></td></tr></table></figure><h3 id="4、数组索引切片"><a href="#4、数组索引切片" class="headerlink" title="4、数组索引切片"></a>4、数组索引切片</h3><p> 花式索引：<br><em>与切片不同花式索引返回的是对象的一个复制不是引用。</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;indices = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">-3</span>]</span><br><span class="line">&gt;&gt;&gt;y = a[indices]</span><br></pre></td></tr></table></figure><p>还可以用bool值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;mask = array([<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],dtype=bool)</span><br><span class="line">&gt;&gt;&gt;a[mask]</span><br></pre></td></tr></table></figure><p>mask数组可以用布尔表达式生成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">from</span> numpy.random <span class="keyword">import</span> rand</span><br><span class="line">&gt;&gt;&gt;a = rand(<span class="number">10</span>)<span class="comment">#生成[0,1)之间的10个随机数</span></span><br><span class="line">&gt;&gt;&gt;mask = a &gt; <span class="number">0.5</span></span><br><span class="line">&gt;&gt;&gt;a[mask]</span><br></pre></td></tr></table></figure><p> 二维花式索引：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a[(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>), (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)]</span><br><span class="line"><span class="comment">#行标列标一一对应，a[0,1],a[1,2]...5个数</span></span><br><span class="line">&gt;&gt;&gt;a[<span class="number">3</span>:, [<span class="number">0</span>,<span class="number">2</span>,<span class="number">5</span>]]<span class="comment">#第四行后，1,3,6列</span></span><br><span class="line">&gt;&gt;&gt;mask = array([<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>],dtype=bool)</span><br><span class="line">&gt;&gt;&gt;a[mask, <span class="number">2</span>]<span class="comment">#依然可以用mask索引</span></span><br><span class="line">&gt;&gt;&gt;y = a[:<span class="number">3</span>]<span class="comment">#返回前3行</span></span><br></pre></td></tr></table></figure><p>where语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;loc = where(a &gt; <span class="number">10</span>)</span><br><span class="line">&gt;&gt;&gt;a[loc]</span><br><span class="line">   (array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>], dtype=int64), array([<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=int64))</span><br><span class="line">   <span class="comment">#如同二维花式索引，行列坐标一一对应</span></span><br><span class="line">&gt;&gt;&gt;rows, cols = where(a&gt;<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h3 id="5、数组的方法"><a href="#5、数组的方法" class="headerlink" title="5、数组的方法"></a>5、数组的方法</h3><p>求和：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a = array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])a.sum(axis=<span class="number">1</span>)</span><br><span class="line">&gt;&gt;&gt;sum(a)</span><br><span class="line">&gt;&gt;&gt;sum(a,axis=<span class="number">0</span>)<span class="comment">#或者a.sum(axis=0)沿着第一维度增方向求和，得到行向量</span></span><br><span class="line">   array([<span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>])</span><br><span class="line">&gt;&gt;&gt;sum(a,axis=<span class="number">1</span>)<span class="comment">#或者a.sum(axis=1)沿着第而维度增方向求和，得到类向量</span></span><br><span class="line">   array([ <span class="number">6</span>, <span class="number">15</span>])</span><br></pre></td></tr></table></figure><p>求积：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a.prod()</span><br><span class="line">&gt;&gt;&gt;prod(a, axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>最大值最小值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a.max()<span class="comment">#全局最大</span></span><br><span class="line">&gt;&gt;&gt;a.max(axis=<span class="number">-1</span>)</span><br><span class="line">&gt;&gt;&gt;a.min()<span class="comment">#全局最小</span></span><br><span class="line">&gt;&gt;&gt;a.min(axis=<span class="number">0</span>)<span class="comment">#沿着第一维度最小，得到行向量</span></span><br></pre></td></tr></table></figure><p>最大值最小值位置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a.argmin()</span><br><span class="line">&gt;&gt;&gt;a.argmax(axis=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>均值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a.mean()</span><br><span class="line">&gt;&gt;&gt;a.mean(axis=<span class="number">-1</span>)</span><br><span class="line">&gt;&gt;&gt;average(a, axis = <span class="number">0</span>, weights=[<span class="number">1</span>,<span class="number">2</span>])<span class="comment">#可以算加权平均</span></span><br></pre></td></tr></table></figure><p>标准差：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a.std(axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>方差：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a.var(axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>将数值限制在某个范围内：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a = array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">&gt;&gt;&gt;a.clip(<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line">   array([[<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">          [<span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>]])</span><br></pre></td></tr></table></figure><p>计算最大值与最小值之差：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a.ptp(axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>近似方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a.round(decimals=<span class="number">1</span>)<span class="comment">#近似到以为小数</span></span><br></pre></td></tr></table></figure><h3 id="6、数组排序"><a href="#6、数组排序" class="headerlink" title="6、数组排序"></a>6、数组排序</h3><p>分为函数和方法<br>注意：其他三种不改变原数组，只有data.sort()方法会改变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;sort(weights)<span class="comment">#函数</span></span><br><span class="line">&gt;&gt;&gt;data.sort()<span class="comment">#方法 注意注意</span></span><br><span class="line">&gt;&gt;&gt;argsort(weights)<span class="comment">#函数</span></span><br><span class="line">&gt;&gt;&gt;data.argsort()<span class="comment">#方法</span></span><br></pre></td></tr></table></figure><p>对二维数组默认相当于对每一行的元素进行排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a = array([</span><br><span class="line">        [<span class="number">.2</span>, <span class="number">.1</span>, <span class="number">.5</span>], </span><br><span class="line">        [<span class="number">.4</span>, <span class="number">.8</span>, <span class="number">.3</span>],</span><br><span class="line">        [<span class="number">.9</span>, <span class="number">.6</span>, <span class="number">.7</span>]</span><br><span class="line">    ])</span><br><span class="line">&gt;&gt;&gt;sort(a)</span><br><span class="line">   array([[ <span class="number">0.1</span>,  <span class="number">0.2</span>,  <span class="number">0.5</span>],</span><br><span class="line">          [ <span class="number">0.3</span>,  <span class="number">0.4</span>,  <span class="number">0.8</span>],</span><br><span class="line">          [ <span class="number">0.6</span>,  <span class="number">0.7</span>,  <span class="number">0.9</span>]])</span><br><span class="line">&gt;&gt;&gt;sort(a, axis = <span class="number">0</span>)</span><br><span class="line">   array([[ <span class="number">0.2</span>,  <span class="number">0.1</span>,  <span class="number">0.3</span>],</span><br><span class="line">          [ <span class="number">0.4</span>,  <span class="number">0.6</span>,  <span class="number">0.5</span>],</span><br><span class="line">          [ <span class="number">0.9</span>,  <span class="number">0.8</span>,  <span class="number">0.7</span>]])</span><br></pre></td></tr></table></figure><h3 id="7、数组形状"><a href="#7、数组形状" class="headerlink" title="7、数组形状"></a>7、数组形状</h3><p>修改形状</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a = arange(<span class="number">6</span>)</span><br><span class="line">&gt;&gt;&gt;a.shape = <span class="number">2</span>,<span class="number">3</span></span><br><span class="line">&gt;&gt;&gt;b = a.reshape(<span class="number">3</span>,<span class="number">2</span>)<span class="comment">#返回一个新数组</span></span><br></pre></td></tr></table></figure><p>数组连接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x = array([</span><br><span class="line">        [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line">        [<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]</span><br><span class="line">    ])</span><br><span class="line">y = array([</span><br><span class="line">        [<span class="number">50</span>,<span class="number">51</span>,<span class="number">52</span>],</span><br><span class="line">        [<span class="number">60</span>,<span class="number">61</span>,<span class="number">62</span>]</span><br><span class="line">    ])</span><br><span class="line">z = concatenate((x,y))<span class="comment">#第一维度连接</span></span><br><span class="line">z = concatenate((x,y), axis=<span class="number">1</span>)<span class="comment">#第二维度连接</span></span><br></pre></td></tr></table></figure><p>降维</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = array([[<span class="number">0</span>,<span class="number">1</span>],</span><br><span class="line">           [<span class="number">2</span>,<span class="number">3</span>]])</span><br><span class="line">b = a.flatten()<span class="comment">#降为1维数组</span></span><br></pre></td></tr></table></figure><h3 id="8、数组对角线"><a href="#8、数组对角线" class="headerlink" title="8、数组对角线"></a>8、数组对角线</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;a.diagonal()</span><br><span class="line">&gt;&gt;&gt;a.diagonal(offset=<span class="number">1</span>)<span class="comment">#对角线右移</span></span><br><span class="line">&gt;&gt;&gt;a.diagonal(offset=<span class="number">-1</span>)<span class="comment">#对角线左移</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;学习Numpy的基本应用&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="Nunpy" scheme="http://yoursite.com/tags/Nunpy/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/01/01/hello-world/"/>
    <id>http://yoursite.com/2020/01/01/hello-world/</id>
    <published>2020-01-01T04:19:20.007Z</published>
    <updated>2020-01-02T12:05:53.615Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Welcome"><a href="#Welcome" class="headerlink" title="Welcome"></a>Welcome</h1><blockquote><p>HelloWorld</p></blockquote><a id="more"></a><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Welcome&quot;&gt;&lt;a href=&quot;#Welcome&quot; class=&quot;headerlink&quot; title=&quot;Welcome&quot;&gt;&lt;/a&gt;Welcome&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;HelloWorld&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>

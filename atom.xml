<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>何小智の博客</title>
  
  <subtitle>时间是人类发展的空间。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hexuezhi.github.io/"/>
  <updated>2020-12-05T05:08:25.899Z</updated>
  <id>https://hexuezhi.github.io/</id>
  
  <author>
    <name>RenKeXZ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解决pip安装速度慢</title>
    <link href="https://hexuezhi.github.io/2020/12/05/%E8%A7%A3%E5%86%B3pip%E5%AE%89%E8%A3%85%E9%80%9F%E5%BA%A6%E6%85%A2/"/>
    <id>https://hexuezhi.github.io/2020/12/05/%E8%A7%A3%E5%86%B3pip%E5%AE%89%E8%A3%85%E9%80%9F%E5%BA%A6%E6%85%A2/</id>
    <published>2020-12-05T04:09:34.349Z</published>
    <updated>2020-12-05T05:08:25.899Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>解决pip安装慢的问题。</p></blockquote><a id="more"></a><p>方案：更换<code>下载源</code><br>国内的一些站点：</p><ul><li>豆瓣：<a href="http://pypi.douban.com/simple/" target="_blank" rel="noopener">http://pypi.douban.com/simple/</a></li><li>清华：<a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a></li><li>阿里云：<a href="http://mirrors.aliyun.com/pypi/simple/" target="_blank" rel="noopener">http://mirrors.aliyun.com/pypi/simple/</a></li><li>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.mirrors.ustc.edu.cn/simple/</a></li><li>华中理工大学：<a href="http://pypi.hustunique.com/" target="_blank" rel="noopener">http://pypi.hustunique.com/</a></li><li>山东理工大学：<a href="http://pypi.sdutlinux.org/" target="_blank" rel="noopener">http://pypi.sdutlinux.org/</a></li></ul><p>注意：地址中可能有的是https协议</p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install pymongo -i https://mirrors.aliyun.com/pypi/simple/<br></code></pre></td></tr></table></figure><h4 id="方法二：永久"><a href="#方法二：永久" class="headerlink" title="方法二：永久"></a>方法二：永久</h4><h5 id="1-ubuntu18下"><a href="#1-ubuntu18下" class="headerlink" title="1.ubuntu18下"></a>1.ubuntu18下</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gedit ~/.pip/pip.conf<br></code></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">[global]<br>index-url &#x3D; https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;<br>[install]<br>trusted-host&#x3D;mirrors.aliyun.com<br></code></pre></td></tr></table></figure><hr><h5 id="2-win10下"><a href="#2-win10下" class="headerlink" title="2.win10下"></a>2.win10下</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">pip config set global.index-url https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;解决pip安装慢的问题。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://hexuezhi.github.io/categories/python/"/>
    
    
      <category term="pip" scheme="https://hexuezhi.github.io/tags/pip/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat启动startup.bat出现乱码</title>
    <link href="https://hexuezhi.github.io/2020/12/05/Tomcat%E5%90%AF%E5%8A%A8startup.bat%E5%87%BA%E7%8E%B0%E4%B9%B1%E7%A0%81/"/>
    <id>https://hexuezhi.github.io/2020/12/05/Tomcat%E5%90%AF%E5%8A%A8startup.bat%E5%87%BA%E7%8E%B0%E4%B9%B1%E7%A0%81/</id>
    <published>2020-12-05T04:09:32.106Z</published>
    <updated>2020-12-05T05:08:40.881Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>解决tomcat出现乱码的问题。</p></blockquote><a id="more"></a><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><p>找到<code>apache-tomcat-9.0.31\conf\</code>的logging.properties文件。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">java.util.logging.ConsoleHandler.encoding</span> = <span class="hljs-string">UTF-8</span><br></code></pre></td></tr></table></figure><p>将<code>UTF-8</code>，改为<code>GBK</code>即可。<br>如果没有这行配置，则加上。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;解决tomcat出现乱码的问题。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Tomcat" scheme="https://hexuezhi.github.io/categories/Tomcat/"/>
    
    
      <category term="乱码" scheme="https://hexuezhi.github.io/tags/%E4%B9%B1%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Go环境变量配置</title>
    <link href="https://hexuezhi.github.io/2020/12/05/Go%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/"/>
    <id>https://hexuezhi.github.io/2020/12/05/Go%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/</id>
    <published>2020-12-05T04:08:51.652Z</published>
    <updated>2020-12-05T04:54:48.039Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Go的安装和配置。</p></blockquote><a id="more"></a><h3 id="windows下需要设置三个环境变量"><a href="#windows下需要设置三个环境变量" class="headerlink" title="windows下需要设置三个环境变量"></a>windows下需要设置三个环境变量</h3><p><em>将三个变量设置在系统变量中即可</em></p><ol><li>GOROOT; Go的安装目录，如D:\Go</li><li>GOPATH; Go项目的工作目录，如D:\GoProject</li><li>PATH; 类似JAVA,如D:\Go\bin<h3 id="linux下"><a href="#linux下" class="headerlink" title="linux下"></a>linux下</h3><strong>下载地址</strong>：<a href="https://golang.google.cn/dl/" target="_blank" rel="noopener">https://golang.google.cn/dl/</a><br><strong>解压</strong>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo tar xf go1.14.linux-amd64.tar.gz -C /usr/<span class="hljs-built_in">local</span><br></code></pre></td></tr></table></figure><p><strong>配置环境变量</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gedit ~/.bashrc<br></code></pre></td></tr></table></figure><p><strong>添加以下内容</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">export GOROOT&#x3D;&#x2F;usr&#x2F;local&#x2F;go<br>export GOPATH&#x3D;&#x2F;home&#x2F;hxz&#x2F;project<br>export PATH&#x3D;$GPROOT&#x2F;bin:$PATH<br></code></pre></td></tr></table></figure><p><strong>测试是否安装成功</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">go version<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Go的安装和配置。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Go" scheme="https://hexuezhi.github.io/categories/Go/"/>
    
    
      <category term="环境变量" scheme="https://hexuezhi.github.io/tags/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>python文件操作</title>
    <link href="https://hexuezhi.github.io/2020/12/03/python%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>https://hexuezhi.github.io/2020/12/03/python%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</id>
    <published>2020-12-03T12:41:33.650Z</published>
    <updated>2020-12-03T12:43:56.750Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>折腾了一下自己的linux的shell，更换为oh-my-zsh，并更换主题,安装提示插件。</p></blockquote><blockquote><p>python文件操作。</p></blockquote><a id="more"></a><h3 id="with-open-as-f-用法"><a href="#with-open-as-f-用法" class="headerlink" title="with open() as f:用法"></a>with open() as f:用法</h3><h4 id="1-常见用法："><a href="#1-常见用法：" class="headerlink" title="1. 常见用法："></a>1. 常见用法：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> open(<span class="hljs-string">r'filename.txt'</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> f:<br>        l = json.loads(l)  <span class="hljs-comment">#文件的读操作</span><br><br><span class="hljs-keyword">with</span> open(<span class="hljs-string">'Hello.txt'</span>, <span class="hljs-string">'w'</span>) <span class="hljs-keyword">as</span> f:<br>   f.write(<span class="hljs-string">'hello world'</span>)  <span class="hljs-comment">#文件的写操作</span><br></code></pre></td></tr></table></figure><h4 id="2-先关参数："><a href="#2-先关参数：" class="headerlink" title="2. 先关参数："></a>2. 先关参数：</h4><ul><li>r:    以只读方式打开文件。文件的指针将会放在文件的开头。这是<strong>默认模式</strong>。</li><li>rb: 以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</li><li>r+: 打开一个文件用于读写。文件指针将会放在文件的开头。</li><li>rb+:以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</li><li>w:    打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</li><li>wb:    以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</li><li>w+:    打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</li><li>wb+:以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</li><li>a:    打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</li><li>ab:    以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</li><li>a+:    打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</li><li>ab+:以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</li></ul><h4 id="3-f的方法属性："><a href="#3-f的方法属性：" class="headerlink" title="3. f的方法属性："></a>3. f的方法属性：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">file.read([size])   <span class="hljs-comment">#将文件数据作为字符串返回，可选参数size控制读取的字节数</span><br>file.readlines([size])   <span class="hljs-comment">#返回文件中行内容的列表，size参数可选</span><br>file.write(str)   <span class="hljs-comment">#将字符串写入文件</span><br>file.writelines(strings)   <span class="hljs-comment">#将字符串序列写入文件</span><br>file.close()   <span class="hljs-comment">#关闭文件</span><br>file.closed  <span class="hljs-comment">#表示文件已经被关闭，否则为False</span><br><br>file.mode<span class="hljs-comment">#Access文件打开时使用的访问模式</span><br>file.encoding<span class="hljs-comment">#文件所使用的编码</span><br>file.name<span class="hljs-comment">#文件名</span><br>file.newlines<span class="hljs-comment">#未读取到行分隔符时为None，只有一种行分隔符时为一个字符串，当文件有多种类型的行结束符时，则为一个包含所有当前所遇到的行结束的列表</span><br>file.softspace<span class="hljs-comment">#为0表示在输出一数据后，要加上一个空格符，1表示不加。这个属性一般程序员用不着，由程序内部使用</span><br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;折腾了一下自己的linux的shell，更换为oh-my-zsh，并更换主题,安装提示插件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;python文件操作。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://hexuezhi.github.io/categories/python/"/>
    
    
      <category term="文件" scheme="https://hexuezhi.github.io/tags/%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>题目</title>
    <link href="https://hexuezhi.github.io/2020/11/30/upload/%E5%AE%89%E8%A3%85ohmyzsh%201/"/>
    <id>https://hexuezhi.github.io/2020/11/30/upload/%E5%AE%89%E8%A3%85ohmyzsh%201/</id>
    <published>2020-11-30T12:58:26.488Z</published>
    <updated>2020-11-30T13:01:07.133Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言。</p></blockquote><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="分类" scheme="https://hexuezhi.github.io/categories/%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="标签" scheme="https://hexuezhi.github.io/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>scrapy爬虫部署</title>
    <link href="https://hexuezhi.github.io/2020/11/16/scrapy%E7%88%AC%E8%99%AB%E9%83%A8%E7%BD%B2/"/>
    <id>https://hexuezhi.github.io/2020/11/16/scrapy%E7%88%AC%E8%99%AB%E9%83%A8%E7%BD%B2/</id>
    <published>2020-11-16T14:55:27.087Z</published>
    <updated>2020-12-05T05:13:29.793Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学习了一下scrapy爬虫的部署，记录一下过程。</p></blockquote><a id="more"></a><h2 id="一、服务器端"><a href="#一、服务器端" class="headerlink" title="一、服务器端"></a>一、服务器端</h2><h3 id="1-安装包"><a href="#1-安装包" class="headerlink" title="1 安装包"></a>1 安装包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">pip3 install scrapyd<br>pip3 install scrapy<br>pip3 install scrapyd-client<br>pip3 install pymongo<br></code></pre></td></tr></table></figure><h3 id="2-修改scrapyd配置文件"><a href="#2-修改scrapyd配置文件" class="headerlink" title="2 修改scrapyd配置文件"></a>2 修改scrapyd配置文件</h3><h4 id="2-1-首先找包的安装路径"><a href="#2-1-首先找包的安装路径" class="headerlink" title="2.1 首先找包的安装路径"></a>2.1 首先找包的安装路径</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">python3<br>&gt;&gt;import sys<br>&gt;&gt;print(sys.path)<br>&gt;&gt;exit()<br></code></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/11/16/a2IFbzoBR14Z9Mm.png" alt="image-20201116153610363" title="">                </div>                <div class="image-caption">image-20201116153610363</div>            </figure><h4 id="2-2-修改scrapyd的配置文件"><a href="#2-2-修改scrapyd的配置文件" class="headerlink" title="2.2  修改scrapyd的配置文件"></a>2.2  修改scrapyd的配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">cd &#x2F;home&#x2F;ethTrace&#x2F;.local&#x2F;lib&#x2F;python3.6&#x2F;site-packages<br>ls #查看是否有scrapyd文件夹<br>cd scrapyd<br>vim default_scrapyd.conf<br></code></pre></td></tr></table></figure><p>将bind_address改为<code>0.0.0.0</code></p>{% image https://i.loli.net/2020/11/16/9hMbZR7TulJcQCi.png 'image-20201116154003135' '' %}<h3 id="3-启动scrapyd"><a href="#3-启动scrapyd" class="headerlink" title="3 启动scrapyd"></a>3 启动scrapyd</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">#新建自己的私人项目的目录，并到自己的私人项目目录下，我这里是code&#x2F;python&#x2F;CollecAbi<br>cd ~&#x2F;hxz&#x2F;code&#x2F;python&#x2F;CollecAbi<br>nohup scrapyd &amp;<br></code></pre></td></tr></table></figure><h3 id="4-验证启动是否成功"><a href="#4-验证启动是否成功" class="headerlink" title="4 验证启动是否成功"></a>4 验证启动是否成功</h3><p>在这之前需要开启服务器的<code>6800</code>端口。如果是自己买的服务器，不光要检查防火墙端口是否开放，还需登录购买服务器的官网，检查安全组是否开放6800端口。</p><p>在本地浏览器输入<code>http://服务器ip地址:6800</code>，如下图所示，则表示启动成功</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/11/16/1axv7bAVNjCfGs3.png" alt="image-20201116154829745" title="">                </div>                <div class="image-caption">image-20201116154829745</div>            </figure><h2 id="二、本地"><a href="#二、本地" class="headerlink" title="二、本地"></a>二、本地</h2><h3 id="1-安装包-1"><a href="#1-安装包-1" class="headerlink" title="1 安装包"></a>1 安装包</h3><h4 id="1-1-安装scrapy-client"><a href="#1-1-安装scrapy-client" class="headerlink" title="1.1 安装scrapy-client"></a>1.1 安装scrapy-client</h4><p>==注意==：安装scrapy-client，win10系统如果直接用pip安装可能会发生不能识别<code>scrapy-deploy</code>命令的错误。所以建议直接通过下载github源码安装。</p><p><a href="https://github.com/scrapy/scrapyd-client" target="_blank" rel="noopener">源码地址</a>，下载后解压，在文件夹下执行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">python setup.py install<br></code></pre></td></tr></table></figure><p><strong>若已经用pip安装了的，先卸载Scrapyd-client</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">pip uninstall scrapyd-client<br></code></pre></td></tr></table></figure><h4 id="1-2-安装curl"><a href="#1-2-安装curl" class="headerlink" title="1.2 安装curl"></a>1.2 安装curl</h4><p><a href="https://curl.haxx.se/download.html" target="_blank" rel="noopener">下载地址</a>，win10_64位下载如下版本。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/11/16/KkwYSgxvn4tT5qB.png" alt="image-20201116161250262" title="">                </div>                <div class="image-caption">image-20201116161250262</div>            </figure><p>添加环境变量</p><p>CURL_HOME:为解压后的文件夹根目录</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/11/16/9vwMf173VpPneik.png" alt="image-20201116161520511" title="">                </div>                <div class="image-caption">image-20201116161520511</div>            </figure><p>Path中添加两个地址</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/11/16/HxVd7vno2sQfSYP.png" alt="image-20201116161617776" title="">                </div>                <div class="image-caption">image-20201116161617776</div>            </figure><p>测试是否安装成功，在powershell中会出错，推荐用cmd。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">curl --help<br></code></pre></td></tr></table></figure><h3 id="2-修改项目文件夹下的scrapy-cfg文件"><a href="#2-修改项目文件夹下的scrapy-cfg文件" class="headerlink" title="2 修改项目文件夹下的scrapy.cfg文件"></a>2 修改项目文件夹下的scrapy.cfg文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">[settings]<br>default &#x3D; CollectAbi.settings<br><br>[deploy:CollectAbi] #这里添加<br>url &#x3D; http:&#x2F;&#x2F;服务器ip:6800&#x2F;<br>project &#x3D; CollectAbi<br></code></pre></td></tr></table></figure><h3 id="3-部署"><a href="#3-部署" class="headerlink" title="3 部署"></a>3 部署</h3><h4 id="3-1-打包"><a href="#3-1-打包" class="headerlink" title="3.1 打包"></a>3.1 打包</h4><p>在项目根目录下启用<code>cmd</code>，执行如下命令。一定要在<code>CMD</code>中运行命令，powershell中会出错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">scrapyd-deploy<br></code></pre></td></tr></table></figure>{% image https://i.loli.net/2020/11/15/Sj1etwknpKQlx7y.png 'image-20201115181511455' '' %}<h4 id="3-2-上传"><a href="#3-2-上传" class="headerlink" title="3.2 上传"></a>3.2 上传</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">scrapyd-deploy CollectAbi -p CollectAbi<br></code></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/11/15/ebuzIlvBNjQOEXs.png" alt="image-20201115181731049" title="">                </div>                <div class="image-caption">image-20201115181731049</div>            </figure><p>服务器端会出现两个文件夹，表示上传完成</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/11/15/64fFIJZkSaK8Xrh.png" alt="image-20201115181924994" title="">                </div>                <div class="image-caption">image-20201115181924994</div>            </figure><h4 id="3-3-检查服务器运行状态"><a href="#3-3-检查服务器运行状态" class="headerlink" title="3.3 检查服务器运行状态"></a>3.3 检查服务器运行状态</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">curl http:&#x2F;&#x2F;172.30.143.22:6800&#x2F;daemonstatus.json<br></code></pre></td></tr></table></figure><p>3个0，表示没用等待和运行以及完成的爬虫任务。</p>{% image https://i.loli.net/2020/11/16/AiNOaBM8lxG5e7F.png 'image-20201116162152531' '' %}<h3 id="4-启动爬虫"><a href="#4-启动爬虫" class="headerlink" title="4 启动爬虫"></a>4 启动爬虫</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">curl http:&#x2F;&#x2F;172.30.143.22:6800&#x2F;schedule.json -d project&#x3D;CollectAbi -d spider&#x3D;collectAbi<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：spider后面跟的是文件名，不是文件夹名。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/11/15/y6DR5QrXuqcpv7K.png" alt="image-20201115182328977" title="">                </div>                <div class="image-caption">image-20201115182328977</div>            </figure><p><img src="https://i.loli.net/2020/11/15/nbyILOaosqKQe2Y.png" alt="image-20201115182932159"></p><h3 id="5-停止爬虫"><a href="#5-停止爬虫" class="headerlink" title="5 停止爬虫"></a>5 停止爬虫</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain"><br><br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;学习了一下scrapy爬虫的部署，记录一下过程。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://hexuezhi.github.io/categories/python/"/>
    
    
      <category term="scrapy" scheme="https://hexuezhi.github.io/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>typora主题</title>
    <link href="https://hexuezhi.github.io/2020/10/16/typora%E4%B8%BB%E9%A2%98/"/>
    <id>https://hexuezhi.github.io/2020/10/16/typora%E4%B8%BB%E9%A2%98/</id>
    <published>2020-10-15T16:00:00.000Z</published>
    <updated>2020-10-16T05:44:39.924Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一直在用<a href="https://github.com/wnanbei/typora-theme-flora" target="_blank" rel="noopener">typora-theme-flora</a>这款主题，碰巧看到原主题github上有人发了<a href="https://github.com/wnanbei/typora-theme-flora/issues/4" target="_blank" rel="noopener">issue</a>求黑色主题，下手改了一个。改完发现原主题有<a href="https://github.com/wnanbei/typora-theme-flora/issues/3" target="_blank" rel="noopener">bug</a>，也一并解决了。</p></blockquote><a id="more"></a><p><strong>主题下载地址</strong>：<a href="https://github.com/HeXueZhi/typora-theme-FloraDark" target="_blank" rel="noopener">https://github.com/HeXueZhi/typora-theme-FloraDark</a><br><strong>如果可以的话请帮忙给个star，谢谢</strong></p><p><strong>声明</strong>：本主题是在<a href="https://github.com/wnanbei/typora-theme-flora" target="_blank" rel="noopener">typora-theme-flora</a>主题基础上做的修改，在此感谢原作者<a href="https://github.com/wnanbei" target="_blank" rel="noopener">wnanbei</a>。</p><p><strong>由来</strong>：一直在用flora这款主题，碰巧看到原主题github上有人发了<a href="https://github.com/wnanbei/typora-theme-flora/issues/4" target="_blank" rel="noopener">issue</a>求黑色主题，下手改了一个。改完发现原主题有<a href="https://github.com/wnanbei/typora-theme-flora/issues/3" target="_blank" rel="noopener">bug</a>，也一并解决了。所以本主题可以放心使用。</p><p><strong>相比原主题的变动</strong>：</p><ol><li>调大了字体，以及适配各种小符号。</li><li>修改了原主题的代码样式，以及一些代码选择、光标所在行背景颜色，语言选择。（原主题代码中会出现大片红色，显得很乱）</li><li>修改表格，增加分割线及表头深色显示。</li><li>在此基础上增加了黑色主题并修复了bug。</li></ol><h3 id="Dark-Preview"><a href="#Dark-Preview" class="headerlink" title="Dark Preview"></a>Dark Preview</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/10/16/KDJnT8VZo9R4PkX.png" alt="QQ截图20201013225453" title="">                </div>                <div class="image-caption">QQ截图20201013225453</div>            </figure><h3 id="Light-Preview"><a href="#Light-Preview" class="headerlink" title="Light Preview"></a>Light Preview</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/10/16/Ca75pbMrGUqdnVX.png" alt="QQ截图20201009130648" title="">                </div>                <div class="image-caption">QQ截图20201009130648</div>            </figure><h3 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h3><ol><li>通过Typora的<strong>设置-&gt;主题-&gt;打开主题文件夹</strong>，来打开文件夹。</li><li>将<code>flora文件夹</code>、<code>flora-hans.css</code>以及<code>flora-dark.css</code>复制到typora的主题文件夹下。</li><li>重启Typora，再次进入<strong>设置-&gt;主题</strong>，就可以选择新的FloraDark主题了。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一直在用&lt;a href=&quot;https://github.com/wnanbei/typora-theme-flora&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;typora-theme-flora&lt;/a&gt;这款主题，碰巧看到原主题github上有人发了&lt;a href=&quot;https://github.com/wnanbei/typora-theme-flora/issues/4&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;issue&lt;/a&gt;求黑色主题，下手改了一个。改完发现原主题有&lt;a href=&quot;https://github.com/wnanbei/typora-theme-flora/issues/3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bug&lt;/a&gt;，也一并解决了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="typora" scheme="https://hexuezhi.github.io/categories/typora/"/>
    
    
  </entry>
  
  <entry>
    <title>01背包问题</title>
    <link href="https://hexuezhi.github.io/2020/10/12/01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <id>https://hexuezhi.github.io/2020/10/12/01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</id>
    <published>2020-10-11T16:00:00.000Z</published>
    <updated>2020-11-07T19:44:16.196Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在LeetCode上看到大神总结的01背包问题。</p></blockquote><a id="more"></a><p>原链接：<a href="https://leetcode-cn.com/problems/combination-sum-iv/solution/xi-wang-yong-yi-chong-gui-lu-gao-ding-bei-bao-wen-/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/combination-sum-iv/solution/xi-wang-yong-yi-chong-gui-lu-gao-ding-bei-bao-wen-/</a></p><h3 id="一、背包问题分类"><a href="#一、背包问题分类" class="headerlink" title="一、背包问题分类"></a>一、背包问题分类</h3><h4 id="1-组合问题"><a href="#1-组合问题" class="headerlink" title="1 组合问题"></a>1 组合问题</h4><p><a href="https://leetcode-cn.com/problems/combination-sum-iv/description/" target="_blank" rel="noopener">377.组合总和Ⅳ</a></p><p><a href="https://leetcode-cn.com/problems/target-sum/description/" target="_blank" rel="noopener">494.目标和</a></p><p><a href="https://leetcode-cn.com/problems/coin-change-2/description/" target="_blank" rel="noopener">518.零钱兑换 II</a></p><h4 id="2-True、False问题。"><a href="#2-True、False问题。" class="headerlink" title="2 True、False问题。"></a>2 True、False问题。</h4><p><a href="https://leetcode-cn.com/problems/word-break/" target="_blank" rel="noopener">139.单词拆分</a></p><p><a href="https://leetcode-cn.com/problems/partition-equal-subset-sum/" target="_blank" rel="noopener">416.分割等和子集</a></p><h4 id="3-最大最小问题"><a href="#3-最大最小问题" class="headerlink" title="3 最大最小问题"></a>3 最大最小问题</h4><p><a href="https://leetcode-cn.com/problems/ones-and-zeroes/description/" target="_blank" rel="noopener">474.一和零</a></p><p><a href="https://leetcode-cn.com/problems/coin-change/description/" target="_blank" rel="noopener">322.零钱兑换</a></p><h3 id="二、背包问题状态转移公式"><a href="#二、背包问题状态转移公式" class="headerlink" title="二、背包问题状态转移公式"></a>二、背包问题状态转移公式</h3><h4 id="1-组合问题公式"><a href="#1-组合问题公式" class="headerlink" title="1 组合问题公式"></a>1 组合问题公式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">dp[i] +&#x3D; dp[i-num]<br></code></pre></td></tr></table></figure><h4 id="2-True、False问题公式"><a href="#2-True、False问题公式" class="headerlink" title="2 True、False问题公式"></a>2 True、False问题公式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">dp[i] &#x3D; dp[i] or dp[i-num]<br></code></pre></td></tr></table></figure><h4 id="3-最大最小问题公式"><a href="#3-最大最小问题公式" class="headerlink" title="3 最大最小问题公式"></a>3 最大最小问题公式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">dp[i] &#x3D; min(dp[i], dp[i-num]+1)或者dp[i] &#x3D; max(dp[i], dp[i-num]+1)<br></code></pre></td></tr></table></figure><h3 id="三、解题步骤"><a href="#三、解题步骤" class="headerlink" title="三、解题步骤"></a>三、解题步骤</h3><ol><li>分析是否为背包问题。</li><li>是以上三种背包问题中的哪一种。</li><li>是0-1背包问题还是完全背包问题。也就是题目给的nums数组中的元素是否可以重复使用。</li><li>如果是组合问题，是否需要考虑元素之间的顺序。需要考虑顺序有顺序的解法，不需要考虑顺序又有对应的解法。</li></ol><h3 id="四、背包问题的判定"><a href="#四、背包问题的判定" class="headerlink" title="四、背包问题的判定"></a>四、背包问题的判定</h3><p><strong>背包问题具备的特征</strong>：</p><p>给定一个target，target可以是数字也可以是字符串，再给定一个数组nums，nums中装的可能是数字，也可能是字符串，问：能否使用nums中的元素做各种排列组合得到target。</p><p><strong>背包问题技巧</strong>：</p><ol><li>如果是0-1背包，即数组中的元素不可重复使用，nums放在外循环，target在内循环，且内循环倒序；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> num in nums:<br>    <span class="hljs-function"><span class="hljs-keyword">for</span> i in <span class="hljs-title">range</span><span class="hljs-params">(target, nums<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>)</span>:</span><br></code></pre></td></tr></table></figure><ol start="2"><li>如果是完全背包，即数组中的元素可重复使用，nums放在外循环，target在内循环。且内循环正序。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> num in nums:<br>    <span class="hljs-function"><span class="hljs-keyword">for</span> i in <span class="hljs-title">range</span><span class="hljs-params">(nums, target+<span class="hljs-number">1</span>)</span>:</span><br></code></pre></td></tr></table></figure><ol start="3"><li>如果组合问题需考虑元素之间的顺序，需将target放在外循环，将nums放在内循环。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">for</span> i in <span class="hljs-title">range</span><span class="hljs-params">(<span class="hljs-number">1</span>, target+<span class="hljs-number">1</span>)</span>:<br>    <span class="hljs-keyword">for</span> num in nums:</span><br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在LeetCode上看到大神总结的01背包问题。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://hexuezhi.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="01背包问题" scheme="https://hexuezhi.github.io/tags/01%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Java刷题笔记</title>
    <link href="https://hexuezhi.github.io/2020/09/24/java%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
    <id>https://hexuezhi.github.io/2020/09/24/java%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</id>
    <published>2020-09-23T16:00:00.000Z</published>
    <updated>2020-11-30T13:33:32.227Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>想把自己刷题过程中一些，使用经典方法、思想的题记录下来。</p></blockquote><a id="more"></a><h2 id="一、集合"><a href="#一、集合" class="headerlink" title="一、集合"></a>一、集合</h2><h3 id="1-数组"><a href="#1-数组" class="headerlink" title="1 数组"></a>1 数组</h3><h4 id="1-1-新建数组"><a href="#1-1-新建数组" class="headerlink" title="1.1 新建数组"></a>1.1 新建数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">5</span>];<br></code></pre></td></tr></table></figure><h4 id="1-2-数组大小"><a href="#1-2-数组大小" class="headerlink" title="1.2 数组大小"></a>1.2 数组大小</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">a.length<br></code></pre></td></tr></table></figure><h4 id="1-3-数组排序"><a href="#1-3-数组排序" class="headerlink" title="1.3 数组排序"></a>1.3 数组排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Arrays.sort(a);<span class="hljs-comment">//升序排列数组</span><br>Arrays.sort(a, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>);<span class="hljs-comment">//对index从1到4的元素做升序排列</span><br></code></pre></td></tr></table></figure><p>自定义排序规则：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[][] b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">4</span>][<span class="hljs-number">2</span>];<br>Arrays.sort(b, <span class="hljs-keyword">new</span> Comparator&lt;<span class="hljs-keyword">int</span>[]&gt;()&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] o1, <span class="hljs-keyword">int</span>[] o2)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> o1[<span class="hljs-number">0</span>]==o2[<span class="hljs-number">0</span>] ? o1[<span class="hljs-number">1</span>]-o2[<span class="hljs-number">1</span>] : o2[<span class="hljs-number">0</span>]-o1[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="1-4-数组复制"><a href="#1-4-数组复制" class="headerlink" title="1.4 数组复制"></a>1.4 数组复制</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Arrays.copyOfRange(array,<span class="hljs-number">0</span>,array.length);<span class="hljs-comment">//左闭右开</span><br></code></pre></td></tr></table></figure><h3 id="2-List"><a href="#2-List" class="headerlink" title="2 List"></a>2 List</h3><h4 id="2-1-新建List"><a href="#2-1-新建List" class="headerlink" title="2.1 新建List"></a>2.1 新建List</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; nums = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br></code></pre></td></tr></table></figure><h4 id="2-2-添加元素"><a href="#2-2-添加元素" class="headerlink" title="2.2 添加元素"></a>2.2 添加元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">nums.add(<span class="hljs-number">3</span>);<span class="hljs-comment">//尾部添加3</span><br>nums.add(<span class="hljs-number">0</span>,<span class="hljs-number">3</span>);<span class="hljs-comment">//index=0处，添加3</span><br></code></pre></td></tr></table></figure><h4 id="2-3-获取元素"><a href="#2-3-获取元素" class="headerlink" title="2.3 获取元素"></a>2.3 获取元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> n = nums.get(<span class="hljs-number">0</span>);<span class="hljs-comment">//index</span><br></code></pre></td></tr></table></figure><h4 id="2-4-删除元素"><a href="#2-4-删除元素" class="headerlink" title="2.4 删除元素"></a>2.4 删除元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">nums.remove(<span class="hljs-number">0</span>);<span class="hljs-comment">//删除第一个元素</span><br></code></pre></td></tr></table></figure><h4 id="2-5-是否为空"><a href="#2-5-是否为空" class="headerlink" title="2.5 是否为空"></a>2.5 是否为空</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">nums.isEmpty()<br></code></pre></td></tr></table></figure><h4 id="2-6-是否包含元素"><a href="#2-6-是否包含元素" class="headerlink" title="2.6 是否包含元素"></a>2.6 是否包含元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">nums.contains(<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><h4 id="2-7-列表长度"><a href="#2-7-列表长度" class="headerlink" title="2.7 列表长度"></a>2.7 列表长度</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">nums.size()<br></code></pre></td></tr></table></figure><h4 id="2-8-清空列表"><a href="#2-8-清空列表" class="headerlink" title="2.8 清空列表"></a>2.8 清空列表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">nums.clear()<br></code></pre></td></tr></table></figure><h4 id="2-9-反转列表"><a href="#2-9-反转列表" class="headerlink" title="2.9 反转列表"></a>2.9 反转列表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; nums = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>Collections.reverse(nums);<br></code></pre></td></tr></table></figure><h4 id="2-10-List转为Array数组"><a href="#2-10-List转为Array数组" class="headerlink" title="2.10 List转为Array数组"></a>2.10 List转为Array数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; strList = <span class="hljs-keyword">new</span> ArrayList&lt;String&gt;();<br>strList.add(<span class="hljs-string">"list"</span>);<br>strList.add(<span class="hljs-string">"to"</span>);<br>strList.add(<span class="hljs-string">"array"</span>);<br>String[] strArray = <span class="hljs-keyword">new</span> String[strList.size()];<br>strList.toArray(strArray);<span class="hljs-comment">//括号里的数组，为想要的结果数组的形式</span><br>strList.toArray(<span class="hljs-keyword">new</span> String[strList.size()]);<br></code></pre></td></tr></table></figure><h4 id="2-11-Array数组转为List"><a href="#2-11-Array数组转为List" class="headerlink" title="2.11 Array数组转为List"></a>2.11 Array数组转为List</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] strArray = <span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">"array"</span>, <span class="hljs-string">"to"</span>, <span class="hljs-string">"list"</span>&#125;;<br>List&lt;String&gt; strList = Arrays.asList(strArray);<br></code></pre></td></tr></table></figure><h4 id="2-12-List合并"><a href="#2-12-List合并" class="headerlink" title="2.12 List合并"></a>2.12 List合并</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">list1.addAll(list2);<br></code></pre></td></tr></table></figure><h4 id="2-13-List排序"><a href="#2-13-List排序" class="headerlink" title="2.13 List排序"></a>2.13 List排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Collection.sort(list);<span class="hljs-comment">//从小到大</span><br>Collection.sort(list,Collections.reverseOrder());<span class="hljs-comment">//从大到小</span><br><span class="hljs-comment">//自定义</span><br>Collection.sort(list,<span class="hljs-keyword">new</span> Comparator&lt;Point&gt;()&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Point a,Point b)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> a.get(x)==b.get(x)?a.get(y)-b.get(y):a.get(x)-b.get(x);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="3-Set"><a href="#3-Set" class="headerlink" title="3 Set"></a>3 Set</h3><h4 id="3-1-新建集合"><a href="#3-1-新建集合" class="headerlink" title="3.1 新建集合"></a>3.1 新建集合</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Set&lt;Integer&gt; set = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br></code></pre></td></tr></table></figure><h4 id="3-1-添加元素"><a href="#3-1-添加元素" class="headerlink" title="3.1 添加元素"></a>3.1 添加元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">set.add(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h4 id="3-2-删除元素"><a href="#3-2-删除元素" class="headerlink" title="3.2 删除元素"></a>3.2 删除元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">set.remove(<span class="hljs-number">2</span>);<span class="hljs-comment">//这里只能删除元素，无index</span><br></code></pre></td></tr></table></figure><h4 id="3-3-是否包含"><a href="#3-3-是否包含" class="headerlink" title="3.3 是否包含"></a>3.3 是否包含</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">set.contains(<span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><h4 id="3-4-遍历"><a href="#3-4-遍历" class="headerlink" title="3.4 遍历"></a>3.4 遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(Integer i:set)&#123;<br>    System.out.println();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-HashMap"><a href="#4-HashMap" class="headerlink" title="4 HashMap"></a>4 HashMap</h3><h4 id="4-1-新建HashMap"><a href="#4-1-新建HashMap" class="headerlink" title="4.1 新建HashMap"></a>4.1 新建HashMap</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap&lt;String, String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br></code></pre></td></tr></table></figure><h4 id="4-2-添加键值对"><a href="#4-2-添加键值对" class="headerlink" title="4.2 添加键值对"></a>4.2 添加键值对</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">map.put(<span class="hljs-string">"zhang"</span>, <span class="hljs-string">"31"</span>);<br></code></pre></td></tr></table></figure><h4 id="4-3-获取键值对"><a href="#4-3-获取键值对" class="headerlink" title="4.3 获取键值对"></a>4.3 获取键值对</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">map.get(<span class="hljs-string">"zhang"</span>);<br></code></pre></td></tr></table></figure><h4 id="4-4-是否包含"><a href="#4-4-是否包含" class="headerlink" title="4.4 是否包含"></a>4.4 是否包含</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">map.containsKey(<span class="hljs-string">"zhang"</span>);<br>map.containsValue(<span class="hljs-string">"31"</span>);<br></code></pre></td></tr></table></figure><h4 id="4-5-删除键值对"><a href="#4-5-删除键值对" class="headerlink" title="4.5 删除键值对"></a>4.5 删除键值对</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">map.remove(<span class="hljs-string">"zhang"</span>);<br>map.remove(<span class="hljs-string">"zhang"</span>,<span class="hljs-string">"31"</span>);<span class="hljs-comment">//Removes the entry for the specified key only if it is currently mapped to the specified value.</span><br></code></pre></td></tr></table></figure><h4 id="4-6-返回key-Set"><a href="#4-6-返回key-Set" class="headerlink" title="4.6 返回key Set"></a>4.6 返回key Set</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">map.keySet();<br></code></pre></td></tr></table></figure><h4 id="4-7-返回value-Colleciton"><a href="#4-7-返回value-Colleciton" class="headerlink" title="4.7 返回value Colleciton"></a>4.7 返回value Colleciton</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">map.values();<br></code></pre></td></tr></table></figure><h4 id="4-8-遍历HashMap"><a href="#4-8-遍历HashMap" class="headerlink" title="4.8 遍历HashMap"></a>4.8 遍历HashMap</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, String&gt;();<br><span class="hljs-keyword">for</span> (String key : map.keySet()) &#123;<br>map.get(key);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-9-getOrDefault"><a href="#4-9-getOrDefault" class="headerlink" title="4.9 getOrDefault"></a>4.9 getOrDefault</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">map.put(str, map.getOrDefault(str, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>);<span class="hljs-comment">//如果存在就+1，不存在就为0</span><br></code></pre></td></tr></table></figure><h3 id="5-Stack"><a href="#5-Stack" class="headerlink" title="5 Stack"></a>5 Stack</h3><p>官方不推荐使用Stack类，推荐使用<code>Deque</code>。</p><h4 id="5-1-新建栈"><a href="#5-1-新建栈" class="headerlink" title="5.1 新建栈"></a>5.1 新建栈</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Stack&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br></code></pre></td></tr></table></figure><h4 id="5-2-添加元素"><a href="#5-2-添加元素" class="headerlink" title="5.2 添加元素"></a>5.2 添加元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">stack.push(<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><h4 id="5-3-弹出元素"><a href="#5-3-弹出元素" class="headerlink" title="5.3 弹出元素"></a>5.3 弹出元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">stack.pop();<br></code></pre></td></tr></table></figure><h4 id="5-4-获取栈顶元素"><a href="#5-4-获取栈顶元素" class="headerlink" title="5.4 获取栈顶元素"></a>5.4 获取栈顶元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">stack.peek();<br></code></pre></td></tr></table></figure><h3 id="6-queue"><a href="#6-queue" class="headerlink" title="6 queue"></a>6 queue</h3><h4 id="6-1-新建队列"><a href="#6-1-新建队列" class="headerlink" title="6.1 新建队列"></a>6.1 新建队列</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayDeque&lt;Integer&gt; deque = <span class="hljs-keyword">new</span> ArrayDeque&lt;&gt;();<br></code></pre></td></tr></table></figure><h4 id="6-2-添加元素"><a href="#6-2-添加元素" class="headerlink" title="6.2 添加元素"></a>6.2 添加元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">deque.add(<span class="hljs-number">3</span>);<span class="hljs-comment">//尾部添加3</span><br>deque.addFirst(<span class="hljs-number">3</span>);<span class="hljs-comment">//头部添加3</span><br></code></pre></td></tr></table></figure><h4 id="6-3-获取元素"><a href="#6-3-获取元素" class="headerlink" title="6.3 获取元素"></a>6.3 获取元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">duque.getFirst();<br>deque.getLast();<br></code></pre></td></tr></table></figure><h4 id="6-4-获取并删除"><a href="#6-4-获取并删除" class="headerlink" title="6.4 获取并删除"></a>6.4 获取并删除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">deque.pollFirst();<span class="hljs-comment">//出队</span><br>deque.pollLast();<span class="hljs-comment">//弹栈</span><br></code></pre></td></tr></table></figure><h3 id="7-PriorityQueue"><a href="#7-PriorityQueue" class="headerlink" title="7 PriorityQueue"></a>7 PriorityQueue</h3><h4 id="7-1-新建堆"><a href="#7-1-新建堆" class="headerlink" title="7.1 新建堆"></a>7.1 新建堆</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">PriorityQueue&lt;Integer&gt; pq = <span class="hljs-keyword">new</span> PriorityQueue&lt;&gt;();<br></code></pre></td></tr></table></figure><h4 id="7-2-添加元素"><a href="#7-2-添加元素" class="headerlink" title="7.2 添加元素"></a>7.2 添加元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">pq.add(<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><h4 id="7-3-获取元素"><a href="#7-3-获取元素" class="headerlink" title="7.3 获取元素"></a>7.3 获取元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">pq.peek();<span class="hljs-comment">//不删除元素</span><br>pq.poll();<span class="hljs-comment">//删除元素</span><br></code></pre></td></tr></table></figure><h4 id="7-4-删除元素"><a href="#7-4-删除元素" class="headerlink" title="7.4 删除元素"></a>7.4 删除元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">pq.remove(<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><h4 id="7-5-转为数组"><a href="#7-5-转为数组" class="headerlink" title="7.5 转为数组"></a>7.5 转为数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">pq.toArray();<br></code></pre></td></tr></table></figure><h3 id="8-Deque"><a href="#8-Deque" class="headerlink" title="8 Deque"></a>8 Deque</h3><p>双端队列，控制每一端元素的进出，可以实现栈或者队列。</p><h4 id="8-1-实例化"><a href="#8-1-实例化" class="headerlink" title="8.1 实例化"></a>8.1 实例化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Deque&lt;Integer&gt; deque = mew ArrayDeque&lt;&gt;();<br>Deque&lt;Integer&gt; deque = enw LinkedList&lt;&gt;();<br></code></pre></td></tr></table></figure><h4 id="8-2-添加元素到队尾"><a href="#8-2-添加元素到队尾" class="headerlink" title="8.2 添加元素到队尾"></a>8.2 添加元素到队尾</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">addLast(E e) <br>offerLast(E e)<br></code></pre></td></tr></table></figure><h4 id="8-3-取队尾元素并删除"><a href="#8-3-取队尾元素并删除" class="headerlink" title="8.3 取队尾元素并删除"></a>8.3 取队尾元素并删除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">E <span class="hljs-title">removeLast</span><span class="hljs-params">()</span><br>E <span class="hljs-title">pollLast</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><h4 id="8-4-取队尾元素并不删除"><a href="#8-4-取队尾元素并不删除" class="headerlink" title="8.4 取队尾元素并不删除"></a>8.4 取队尾元素并不删除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">E <span class="hljs-title">getLast</span><span class="hljs-params">()</span><br>E <span class="hljs-title">peekLast</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><h4 id="8-5-添加元素到队首"><a href="#8-5-添加元素到队首" class="headerlink" title="8.5 添加元素到队首"></a>8.5 添加元素到队首</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">addFirst(E e)<br>offerFirst(E e)<br></code></pre></td></tr></table></figure><h4 id="8-6-取队首元素并删除"><a href="#8-6-取队首元素并删除" class="headerlink" title="8.6 取队首元素并删除"></a>8.6 取队首元素并删除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">E <span class="hljs-title">removeFirst</span><span class="hljs-params">()</span><br>E <span class="hljs-title">pollFirst</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><h4 id="8-7-取队首元素并不删除"><a href="#8-7-取队首元素并不删除" class="headerlink" title="8.7 取队首元素并不删除"></a>8.7 取队首元素并不删除</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function">E <span class="hljs-title">getFirst</span><span class="hljs-params">()</span><br>E <span class="hljs-title">peekFirst</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><h2 id="二、杂项"><a href="#二、杂项" class="headerlink" title="二、杂项"></a>二、杂项</h2><h3 id="1-三元运算符"><a href="#1-三元运算符" class="headerlink" title="1 三元运算符"></a>1 三元运算符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> a = node==<span class="hljs-keyword">null</span> ? <span class="hljs-number">0</span> : node.val;<br></code></pre></td></tr></table></figure><h3 id="2-Math"><a href="#2-Math" class="headerlink" title="2 Math"></a>2 Math</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> a = Math.max(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br><span class="hljs-keyword">int</span> a = Math.sqrt(<span class="hljs-number">4</span>);<span class="hljs-comment">//开根号</span><br><span class="hljs-keyword">int</span> a = Math.abs(-<span class="hljs-number">1</span>);<span class="hljs-comment">//取绝对值</span><br><span class="hljs-keyword">int</span> a = Math.pow(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<span class="hljs-comment">//2的3次方</span><br></code></pre></td></tr></table></figure><h3 id="3-最大值、最小值表示"><a href="#3-最大值、最小值表示" class="headerlink" title="3 最大值、最小值表示"></a>3 最大值、最小值表示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> a = Integer.MAX_VALUE<br><span class="hljs-keyword">int</span> b = Integer.MIN_VALUE<br></code></pre></td></tr></table></figure><h3 id="4-Arrays"><a href="#4-Arrays" class="headerlink" title="4 Arrays"></a>4 Arrays</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Arrays.sort(a);<span class="hljs-comment">//排序int[] a</span><br>Arrays.fill(a,Integer.MAX_VALUE);<span class="hljs-comment">//快速向a中填充最大值</span><br>Arrays.copyOf(nums,nums.length);<span class="hljs-comment">//复制数组</span><br></code></pre></td></tr></table></figure><h3 id="5-位运算"><a href="#5-位运算" class="headerlink" title="5 位运算"></a>5 位运算</h3><p><strong>位运算后，需要重新赋值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">a = a &amp; <span class="hljs-number">1</span>;<span class="hljs-comment">//判断a是不是基数</span><br>a = a | <span class="hljs-number">1</span>;<br>a = ~a;<br>a = a ^ <span class="hljs-number">1</span>;<span class="hljs-comment">//异或运算</span><br>a = a &lt;&lt; <span class="hljs-number">1</span>;<span class="hljs-comment">//左移一位</span><br>a = a &gt;&gt; <span class="hljs-number">1</span>;<span class="hljs-comment">//右移一位</span><br></code></pre></td></tr></table></figure><h3 id="6-转换"><a href="#6-转换" class="headerlink" title="6  转换"></a>6  转换</h3><h4 id="6-1-char转int"><a href="#6-1-char转int" class="headerlink" title="6.1 char转int"></a>6.1 char转int</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">char</span> ch = <span class="hljs-string">'x'</span>;<br><span class="hljs-keyword">int</span> x = <span class="hljs-string">'x'</span> - <span class="hljs-string">'a'</span>;<br></code></pre></td></tr></table></figure><h4 id="6-2-int转char"><a href="#6-2-int转char" class="headerlink" title="6.2 int转char"></a>6.2 int转char</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">char</span> ch = (<span class="hljs-keyword">char</span>)(num + <span class="hljs-string">'a'</span>);<br></code></pre></td></tr></table></figure><h4 id="6-3-char转String"><a href="#6-3-char转String" class="headerlink" title="6.3 char转String"></a>6.3 char转String</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String s = String.valueOf(ch);<br></code></pre></td></tr></table></figure><h4 id="6-4-char-转Stirng"><a href="#6-4-char-转Stirng" class="headerlink" title="6.4 char[]转Stirng"></a>6.4 char[]转Stirng</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">char</span>[] chs = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[n];<br>String s = <span class="hljs-keyword">new</span> String(chs);<br><span class="hljs-comment">//或者</span><br>String s = String.valueOf(chs)<br></code></pre></td></tr></table></figure><h4 id="6-5-String转char"><a href="#6-5-String转char" class="headerlink" title="6.5 String转char"></a>6.5 String转char</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">s.charAt(i);<br></code></pre></td></tr></table></figure><h4 id="6-6-String转char"><a href="#6-6-String转char" class="headerlink" title="6.6 String转char[]"></a>6.6 String转char[]</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">s.toCharArray()<br></code></pre></td></tr></table></figure><h3 id="7-flag取反"><a href="#7-flag取反" class="headerlink" title="7 flag取反"></a>7 flag取反</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">flag = !flag;<br></code></pre></td></tr></table></figure><h3 id="8-随机数"><a href="#8-随机数" class="headerlink" title="8 随机数"></a>8 随机数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Random rand = <span class="hljs-keyword">new</span> Random();<br>rand.nextInt(n);<span class="hljs-comment">//[0,n)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;想把自己刷题过程中一些，使用经典方法、思想的题记录下来。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="https://hexuezhi.github.io/categories/leetcode/"/>
    
    
      <category term="java" scheme="https://hexuezhi.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>oh-my-zsh安装及主题更换</title>
    <link href="https://hexuezhi.github.io/2020/09/14/%E5%AE%89%E8%A3%85ohmyzsh/"/>
    <id>https://hexuezhi.github.io/2020/09/14/%E5%AE%89%E8%A3%85ohmyzsh/</id>
    <published>2020-09-14T13:48:47.277Z</published>
    <updated>2020-09-27T11:35:34.977Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>折腾了一下自己的linux的shell，更换为oh-my-zsh，并更换主题,安装提示插件。</p></blockquote><a id="more"></a><p><strong>最终效果</strong>：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/09/21/KSrv5D4ZpIk8Y1c.png" alt="new UI" title="">                </div>                <div class="image-caption">new UI</div>            </figure><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install git<br>yum install zsh<br><br><span class="hljs-comment">#方案一：</span><br>sh -c <span class="hljs-string">"<span class="hljs-variable">$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh --no-check-certificate -O -)</span>"</span><br><span class="hljs-comment">#方案二：（官方方案）</span><br>sh -c <span class="hljs-string">"<span class="hljs-variable">$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>"</span><br></code></pre></td></tr></table></figure><h3 id="2-更换主题"><a href="#2-更换主题" class="headerlink" title="2 更换主题"></a>2 更换主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/.oh-my-zsh/themes &amp;&amp; ls<br>vim ~/.zshrc<br><span class="hljs-comment">#ZSH_THEME="agnoster"</span><br><span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure><h3 id="3-安装插件（zsh-autosuggestions）"><a href="#3-安装插件（zsh-autosuggestions）" class="headerlink" title="3 安装插件（zsh-autosuggestions）"></a>3 安装插件（zsh-autosuggestions）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git://github.com/zsh-users/zsh-autosuggestions <span class="hljs-variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions<br>vim ~/.zshrc<br><span class="hljs-comment">#将zsh-autosuggestions添加到plugins中</span><br><span class="hljs-comment">#plugins=(git zsh-autosuggestions)</span><br><span class="hljs-built_in">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;折腾了一下自己的linux的shell，更换为oh-my-zsh，并更换主题,安装提示插件。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="CentOS" scheme="https://hexuezhi.github.io/categories/CentOS/"/>
    
    
      <category term="oh-my-zsh" scheme="https://hexuezhi.github.io/tags/oh-my-zsh/"/>
    
  </entry>
  
  <entry>
    <title>获取用户任务列表报500BUG</title>
    <link href="https://hexuezhi.github.io/2020/09/04/%E7%94%A8%E6%88%B7%E4%BB%BB%E5%8A%A1%E5%88%97%E8%A1%A8%E6%8A%A5500BUG/"/>
    <id>https://hexuezhi.github.io/2020/09/04/%E7%94%A8%E6%88%B7%E4%BB%BB%E5%8A%A1%E5%88%97%E8%A1%A8%E6%8A%A5500BUG/</id>
    <published>2020-09-04T07:05:19.444Z</published>
    <updated>2020-11-27T10:49:41.876Z</updated>
    
    <content type="html"><![CDATA[<hr /><blockquote><p>公司人员报告了获取任务列表为500的bug，但是我们测试数据却能正常返回。玄学？NO!NO!NO!</p></blockquote><a id="more"></a><h3 id="BUG情况"><a href="#BUG情况" class="headerlink" title="BUG情况"></a>BUG情况</h3><p>公司人员报告了一个bug，获取我们用户任务列表的接口数据时会出现500的异常。但是经过我们自己测试没有发现问题。</p><p>几天后，公司人员又发来了截图，表示获取任务列表又出现了500异常。并且测试过后发现只有<code>userid</code>是6的才会出现500异常，其他<code>userid</code>不会出现，并且<code>userid</code>为6的用户调用这个接口，时而能够正常返回数据，时而又出现500bug。</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>经过查看项目log发现程序运行过程中出现了空指针异常。并且定位到相关的代码行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">long</span> sl = user.getFinishTime().getTime() - user.getCreateTime().getTime();<br></code></pre></td></tr></table></figure><p>（不要问为什么任务的变量名是<code>user</code>，我也不知道。。。）小伙伴写这段代码时是通过获取到任务的<code>finishTime</code>，再拿<code>finishTime</code>减去<code>createTime</code>。</p><p>初步猜想可能是新创建的任务没有finish，导致获取到的<code>finishTime</code>为<code>null</code>。因此引发空指针异常。</p><p>而当用户的任务完成时，<code>finishTime</code>被填上，再获取任务列表时，又可以正常获取到数据。</p><p>又因为公司那边测试一直用的是同一个用户id（6），所以每次创建任务之后获取任务列表，显示是500.其他用户id并没有运行任务，所以表象是只有<code>userid</code>为6的用户才会发生异常。</p><p>进一步查看log，佐证了自己的猜想。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/09/04/MFgUWpX9ZlRJbIH.png" alt="500bug" title="">                </div>                <div class="image-caption">500bug</div>            </figure><p>log显示在查询用户列表之前，用户新创建了一个任务。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>虽问题不是什么大问题，代码也不是自己写的，但有两点须引以为戒。</p><ol><li>变量名的规范：任务记录的对象，命名为<code>user</code>，让我在定位bug的时候，理解代码出现了偏差。所以变量命名规范，有助于对代码快速的理解，从而能够更快的定位bug。</li><li>注释：太重要了！！！如果不写注释，等出现bug再定位的时候，再次读即使是自己写的代码，也会耗费些时间来理解。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;公司人员报告了获取任务列表为500的bug，但是我们测试数据却能正常返回。玄学？NO!NO!NO!&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="bug" scheme="https://hexuezhi.github.io/categories/bug/"/>
    
    
      <category term="bug" scheme="https://hexuezhi.github.io/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>docker部署nginx+tomcat</title>
    <link href="https://hexuezhi.github.io/2020/09/03/docker%E9%83%A8%E7%BD%B2nginx+tomcat/"/>
    <id>https://hexuezhi.github.io/2020/09/03/docker%E9%83%A8%E7%BD%B2nginx+tomcat/</id>
    <published>2020-09-03T13:10:08.815Z</published>
    <updated>2020-09-05T12:33:38.941Z</updated>
    
    <content type="html"><![CDATA[<hr /><blockquote><p>以docker方式启动tomcat+nginx。</p></blockquote><a id="more"></a><h3 id="一、tomcat"><a href="#一、tomcat" class="headerlink" title="一、tomcat"></a>一、tomcat</h3><p>新建tomcat文件夹，可以放入自己的应用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir tomcat<br><span class="hljs-built_in">cd</span> tomcat<br>mkdir app<br><span class="hljs-built_in">cd</span> app<br>touch index.html<br><span class="hljs-built_in">echo</span> &lt;h1&gt;helloworld&lt;/h1&gt; &gt;index.html<br><span class="hljs-built_in">cd</span> ..<br></code></pre></td></tr></table></figure><p>拉取镜像，并建立开启容器(注意这里并不用开启8080端口映射)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull tomcat<br>dockers run -id --name myTomcat -v <span class="hljs-variable">$PWD</span>:/usr/<span class="hljs-built_in">local</span>/tomcat/webapps tomcat<br></code></pre></td></tr></table></figure><p>查看容器ip：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker inspect myTomcat | grep <span class="hljs-string">"IPAddress"</span><br></code></pre></td></tr></table></figure><p>假设这里查到的是<code>172.17.0.3</code></p><h3 id="二、nginx"><a href="#二、nginx" class="headerlink" title="二、nginx"></a>二、nginx</h3><p>首先服务器防火墙开启80端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">firewall-cmd --zone=public --add-port=80/tcp --permanent<br>firewall-cmd --reload<br></code></pre></td></tr></table></figure><p>新建nginx文件夹，并新建<code>nginx.conf</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir nginx<br><span class="hljs-built_in">cd</span> nginx<br>touch nginx.conf<br>vim nginx.comf<br></code></pre></td></tr></table></figure><p>填入<code>nginx.conf</code>的内容，注意http-&gt;server-&gt;location-&gt;proxy_pass。修改为上一步查到的<code>ip</code>。</p><p>注意：这里不能填入宿主机的ip。（因为tomcat默认并不是以host模式开启，而是以桥接模式开启）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment">#user  nobody;</span><br>worker_processes  1;<br><br><span class="hljs-comment">#error_log  logs/error.log;</span><br><span class="hljs-comment">#error_log  logs/error.log  notice;</span><br><span class="hljs-comment">#error_log  logs/error.log  info;</span><br><br><span class="hljs-comment">#pid        logs/nginx.pid;</span><br><br><br>events &#123;<br>    worker_connections  1024;<br>&#125;<br><br><br>http &#123;<br>    include       mime.types;<br>    default_type  application/octet-stream;<br><br>    <span class="hljs-comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span><br>    <span class="hljs-comment">#                  '$status $body_bytes_sent "$http_referer" '</span><br>    <span class="hljs-comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span><br><br>    <span class="hljs-comment">#access_log  logs/access.log  main;</span><br><br>    sendfile        on;<br>    <span class="hljs-comment">#tcp_nopush     on;</span><br><br>    <span class="hljs-comment">#keepalive_timeout  0;</span><br>    keepalive_timeout  65;<br><br>    <span class="hljs-comment">#gzip  on;</span><br><br>    server &#123;<br>        listen       80;<br>        server_name  localhost;<br><br>        location / &#123;<br>            root   html;<br>            proxy_pass http://172.17.0.3:8080;<br>            index  index.html index.htm;<br>        &#125;<br><br>        error_page   500 502 503 504  /50x.html;<br>        location = /50x.html &#123;<br>            root   html;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>拉取镜像，并建立开启容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull nginx<br>docker run -d --name myNginx -p 80:80 nginx<br></code></pre></td></tr></table></figure><p>将之前写的配置文件复制到容器中，并重启容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker cp nginx.conf  nginx:/etc/nginx/nginx.conf<br>docker restart nginx<br></code></pre></td></tr></table></figure><h3 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h3><p>访问<code>http://服务器ip/app</code></p>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;以docker方式启动tomcat+nginx。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="以太坊" scheme="https://hexuezhi.github.io/categories/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
    
      <category term="docker" scheme="https://hexuezhi.github.io/tags/docker/"/>
    
      <category term="tomcat" scheme="https://hexuezhi.github.io/tags/tomcat/"/>
    
      <category term="nginx" scheme="https://hexuezhi.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>docker启动以太坊私链</title>
    <link href="https://hexuezhi.github.io/2020/09/01/docker%E5%90%AF%E5%8A%A8%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%A7%81%E9%93%BE/"/>
    <id>https://hexuezhi.github.io/2020/09/01/docker%E5%90%AF%E5%8A%A8%E4%BB%A5%E5%A4%AA%E5%9D%8A%E7%A7%81%E9%93%BE/</id>
    <published>2020-09-01T12:27:08.059Z</published>
    <updated>2020-10-08T16:26:39.888Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>以docker方式启动以太坊私链，并部署Dapp。</p></blockquote><a id="more"></a><h3 id="一、查看防火墙状态"><a href="#一、查看防火墙状态" class="headerlink" title="一、查看防火墙状态"></a>一、查看防火墙状态</h3><p>首先查看主机防火墙是否开启，如果已开启，需要开放<code>8545</code>端口，用于外界通过rpc方式访问私链。</p><p>查看防火墙状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl status firewalld.service<br></code></pre></td></tr></table></figure>{% image https://i.loli.net/2020/09/01/wJPvbiOChzE9VGx.png '防火墙状态' '' %}<p>开放方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">firewall-cmd --zone=public --add-port=8545/tcp --permanent<br>firewall-cmd --reload<br></code></pre></td></tr></table></figure><h3 id="二、创建链码"><a href="#二、创建链码" class="headerlink" title="二、创建链码"></a>二、创建链码</h3><p>在workspace下，新建<code>/code/chain/mychain</code>文件夹，创建<code>genesis.json</code>。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/09/01/t9w182CRcK7DGpI.png" alt="路径" title="">                </div>                <div class="image-caption">路径</div>            </figure><p><strong>chainId：</strong>以太坊的链的id，可以自己随便取值，但是需要注意搭建私链时，这个值<strong>不能与以太坊主网或者是测试网的chainId相同</strong>。<a href="https://chainid.network/" target="_blank" rel="noopener">以太坊chainId查询</a></p><p>genesis.json：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs plain">&#123;<br>  &quot;config&quot;: &#123;<br>    &quot;chainId&quot;: 666,<br>    &quot;homesteadBlock&quot;: 0,<br>    &quot;eip150Block&quot;: 0,<br>    &quot;eip150Hash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,<br>    &quot;eip155Block&quot;: 0,<br>    &quot;eip158Block&quot;: 0,<br>    &quot;byzantiumBlock&quot;: 0,<br>    &quot;constantinopleBlock&quot;: 0,<br>    &quot;petersburgBlock&quot;: 0,<br>    &quot;istanbulBlock&quot;: 0,<br>    &quot;ethash&quot;: &#123;&#125;<br>  &#125;,<br>  &quot;nonce&quot;: &quot;0x0&quot;,<br>  &quot;timestamp&quot;: &quot;0x5ddf8f3e&quot;,<br>  &quot;extraData&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,<br>  &quot;gasLimit&quot;: &quot;0x47b760&quot;,<br>  &quot;difficulty&quot;: &quot;0x00002&quot;,<br>  &quot;mixHash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;,<br>  &quot;coinbase&quot;: &quot;0x0000000000000000000000000000000000000000&quot;,<br>  &quot;alloc&quot;: &#123; &#125;<br>  &#125;,<br>  &quot;number&quot;: &quot;0x0&quot;,<br>  &quot;gasUsed&quot;: &quot;0x0&quot;,<br>  &quot;parentHash&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000000&quot;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三、拉取image"><a href="#三、拉取image" class="headerlink" title="三、拉取image"></a>三、拉取image</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull ethereum/client-go<br></code></pre></td></tr></table></figure><h3 id="四、创建容器"><a href="#四、创建容器" class="headerlink" title="四、创建容器"></a>四、创建容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run -it --network=host --name mychain -v /workspace:/workspace --entrypoint /bin/sh ethereum/client-go<br><span class="hljs-comment">#或者</span><br>docker run -it --name mychain -p 8545:8545 -v /workspace:/workspace --entrypoint /bin/sh ethereum/client-go<br></code></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><code>-i</code>：打开STDIN，用于控制台交互，常与-t一起使用</li><li><code>-t</code>：分配tty设备，支持终端登陆，默认为false，常与-i一起使用</li><li><code>--network=host</code>：将容器的网络模式设置为host模式，即用宿主机的ip和端口进行外部通信</li><li><code>-p 8545:8545</code>：将宿主机的8545端口映射到dockers容器的8545端口上</li><li><code>--rm</code>：指定容器停止后自动删除容器（不支持以docker run -d启动的容器 ）</li><li><code>-v</code>：给容器挂载存储卷，挂载到容器的某个目录，这里讲本地的/workspace挂载到了容器的/workspace目录，用来在容器和宿主机之间共享文件</li><li><code>--entrypoint</code>：覆盖image的入口点，ubuntu环境下docker默认入口点其实是/bin/bash，修改默认入口点是为了不让节点自动运行，稍后会对节点进行自定义配置使其成为私有链节点</li></ul><p>此后启动容器就可以，直接通过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker start -i mychain<br></code></pre></td></tr></table></figure><h3 id="五、启动私链"><a href="#五、启动私链" class="headerlink" title="五、启动私链"></a>五、启动私链</h3><p>经过上面的命令，此时命令行提示符已经转变。进入之前创建的<code>/workspace/code/chain/mychain</code>文件夹下，初始化链json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">geth --datadir . init genesis.json<br></code></pre></td></tr></table></figure><p>启动私链，<code>networkid</code>和<code>rpcaddr</code>的设置方法同开发者模式。查看输出日志<code>output.log</code>同上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">geth --datadir . --nodiscover --networkid 1234 --rpc --rpccorsdomain &quot;*&quot; --rpcaddr 0.0.0.0 --rpcport 8545 console --allow-insecure-unlock 2&gt;output.log<br></code></pre></td></tr></table></figure><p><strong>注意：</strong>搭建私链后一定要进行以下测试，看是否能够正常发起交易。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;以docker方式启动以太坊私链，并部署Dapp。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="以太坊" scheme="https://hexuezhi.github.io/categories/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
    
      <category term="docker" scheme="https://hexuezhi.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>以太坊合约交易inputData解码</title>
    <link href="https://hexuezhi.github.io/2020/09/01/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%90%88%E7%BA%A6%E4%BA%A4%E6%98%93inputData%E8%A7%A3%E7%A0%81/"/>
    <id>https://hexuezhi.github.io/2020/09/01/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%90%88%E7%BA%A6%E4%BA%A4%E6%98%93inputData%E8%A7%A3%E7%A0%81/</id>
    <published>2020-09-01T02:20:24.016Z</published>
    <updated>2020-11-26T05:28:45.958Z</updated>
    
    <content type="html"><![CDATA[<hr /><blockquote><p>以太坊每笔交易中都有InputData，本项目主要是识别合约交易中的InputData。</p></blockquote><a id="more"></a><h3 id="一、需求式例"><a href="#一、需求式例" class="headerlink" title="一、需求式例"></a>一、需求式例</h3><p>交易hash：<a href="https://cn.etherscan.com/tx/0xb1c0abd217193ffe64f97caedad8fa6f0f9c0265967d2ab9fb782280c928fb47" target="_blank" rel="noopener">0xb1c0abd217193ffe64f97caedad8fa6f0f9c0265967d2ab9fb782280c928fb47</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/09/01/zRVY1tOMWE37aqJ.png" alt="inputdata" title="">                </div>                <div class="image-caption">inputdata</div>            </figure><p>需要将交易中的数据解码为上图中的数据。</p><h3 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h3><ol><li>先通过web3来取得交易中的<code>to</code>地址和<code>inputdata</code>。</li><li>将<code>to</code>地址传入erherScan的api获得合约的abi。</li><li>通过abi-decoder来解析inputdata。</li></ol><h3 id="三、具体实现"><a href="#三、具体实现" class="headerlink" title="三、具体实现"></a>三、具体实现</h3><p>项目地址：<a href="https://github.com/HeXueZhi/DecodeInputData" target="_blank" rel="noopener">https://github.com/HeXueZhi/DecodeInputData</a></p><p>整体通过webpack框架。<br>应用的包：<code>package.json</code>文件中的<code>dependencies</code></p><h4 id="3-1-实例化web3"><a href="#3-1-实例化web3" class="headerlink" title="3.1 实例化web3"></a>3.1 实例化web3</h4><p>在infura注册一个key，替换代码中的key。（<em>Infura</em>提供免费的以太坊节点RPC API服务）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'load'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> web3 !== <span class="hljs-string">'undefined'</span>) &#123;<br>        <span class="hljs-built_in">window</span>.web3 = <span class="hljs-keyword">new</span> Web3(web3.currentProvider);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">var</span> web3Provider;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.ethereum) &#123;<br>            web3Provider = <span class="hljs-built_in">window</span>.ethereum;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 请求用户授权</span><br>                <span class="hljs-built_in">window</span>.ethereum.enable();<br>            &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>                <span class="hljs-comment">// 用户不授权时</span><br>                <span class="hljs-built_in">console</span>.error(<span class="hljs-string">"User denied account access"</span>)<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.web3) &#123;   <span class="hljs-comment">// 老版 MetaMask Legacy dapp browsers...</span><br>            web3Provider = <span class="hljs-built_in">window</span>.web3.currentProvider;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            web3Provider = <span class="hljs-keyword">new</span> Web3.providers.HttpProvider(<span class="hljs-string">'https://mainnet.infura.io/v3/填入infura个人的key'</span>);<br>        &#125;<br>        web3 = <span class="hljs-keyword">new</span> Web3(web3Provider);<br>    &#125;<br>    <span class="hljs-comment">// App.start();</span><br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="3-2-解析inputdata"><a href="#3-2-解析inputdata" class="headerlink" title="3.2 解析inputdata"></a>3.2 解析inputdata</h4><p>在etherscan注册apikey，替换代码中的。</p><p>如果不想注册删掉代码中的<code>&amp;apikey=填入etherscan的个人key</code>也可以，不过etherscan会添加每秒限制访问5次的限制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-string">"./app.css"</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-keyword">default</span> <span class="hljs-keyword">as</span> Web3&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'web3'</span>;<br><br><span class="hljs-keyword">var</span> web3;<br><span class="hljs-keyword">var</span> ABI;<br><br><br><span class="hljs-keyword">const</span> fetch = <span class="hljs-built_in">require</span>(<span class="hljs-string">'node-fetch'</span>);<br><span class="hljs-comment">//通过fetch获取abi</span><br><br><span class="hljs-keyword">const</span> abiDecoder = <span class="hljs-built_in">require</span>(<span class="hljs-string">'abi-decoder'</span>); <br><span class="hljs-comment">// 通过abi解析inputdata</span><br><br><br><span class="hljs-built_in">window</span>.App = &#123;<br>    <span class="hljs-attr">getInputData</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"textArea"</span>).value = <span class="hljs-string">""</span>;<br>        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"textArea2"</span>).value = <span class="hljs-string">""</span>;<br>        <span class="hljs-keyword">var</span> TXHash = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"TXHash"</span>).value;<br>        <span class="hljs-keyword">if</span> (TXHash != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-built_in">console</span>.log(TXHash);<br>            <span class="hljs-keyword">var</span> inputData;<br>            web3.eth.getTransaction(TXHash,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, accs</span>) </span>&#123;<br>                <span class="hljs-keyword">if</span> (err != <span class="hljs-literal">null</span>) &#123;<br>                    alert(<span class="hljs-string">"There was an error fetching your TX."</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (accs.length == <span class="hljs-number">0</span>) &#123;<br>                    alert(<span class="hljs-string">"Couldn't get any accounts! Make sure your Ethereum client is configured correctly."</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                <span class="hljs-built_in">console</span>.log(accs.input);<span class="hljs-comment">//输出inputdata</span><br>                <span class="hljs-comment">//验证to地址是否是合约地址，合约地址的Code不为空</span><br>                web3.eth.getCode(accs.to, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, accs</span>)</span>&#123;<br>                    <span class="hljs-keyword">if</span>(accs === <span class="hljs-string">'0x'</span>) &#123;<br>                        alert(<span class="hljs-string">'普通转账交易'</span>);<br>                        <span class="hljs-keyword">return</span>;<br>                    &#125;<br>                &#125;);<br>                <br>                <span class="hljs-keyword">var</span> contractAddress = accs.to;<br>                <span class="hljs-keyword">if</span> (contractAddress != <span class="hljs-literal">null</span>)&#123;<br>                    <span class="hljs-keyword">var</span> url = <span class="hljs-string">'https://api-cn.etherscan.com/api?module=contract&amp;action=getabi&amp;address='</span> + contractAddress + <span class="hljs-string">'&amp;apikey=填入etherscan的个人key'</span>;<br>                    fetch(url, &#123;<span class="hljs-attr">method</span>: <span class="hljs-string">'get'</span>,&#125;).then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.json().then(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>                        ABI = <span class="hljs-built_in">JSON</span>.parse(data.result);<span class="hljs-comment">//获取合约abi'</span><br>                        <span class="hljs-comment">// console.log(ABI);</span><br>                        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"textArea"</span>).value = <span class="hljs-built_in">JSON</span>.stringify(<span class="hljs-built_in">JSON</span>.parse(data.result),<span class="hljs-literal">null</span>, <span class="hljs-string">' '</span>);<br>                        abiDecoder.addABI(ABI);<span class="hljs-comment">//解析abi</span><br>                        <span class="hljs-keyword">var</span> decodedData = abiDecoder.decodeMethod(accs.input);<span class="hljs-comment">//获得解析数据</span><br>                        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"textArea2"</span>).value = <span class="hljs-built_in">JSON</span>.stringify(decodedData,<span class="hljs-literal">null</span>,<span class="hljs-string">' '</span>);<br>                    &#125;));<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    alert(<span class="hljs-string">"error: ContractAddress为null!!!"</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            alert(<span class="hljs-string">"error: TXHash为null!!!"</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="3-3-build项目"><a href="#3-3-build项目" class="headerlink" title="3.3 build项目"></a>3.3 build项目</h4><p>在文件夹下执行:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm run build<br></code></pre></td></tr></table></figure><h4 id="3-4-启动项目"><a href="#3-4-启动项目" class="headerlink" title="3.4 启动项目"></a>3.4 启动项目</h4><p>在文件夹下执行:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm run dev<br></code></pre></td></tr></table></figure><p>访问<code>http://localhost:8080</code>即可。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/09/01/oLYVu25P6QNyUk7.png" alt="项目截图" title="">                </div>                <div class="image-caption">项目截图</div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;以太坊每笔交易中都有InputData，本项目主要是识别合约交易中的InputData。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="以太坊" scheme="https://hexuezhi.github.io/categories/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
    
      <category term="以太坊" scheme="https://hexuezhi.github.io/tags/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
      <category term="inputData" scheme="https://hexuezhi.github.io/tags/inputData/"/>
    
  </entry>
  
  <entry>
    <title>基于以太坊私链的溯源Dapp</title>
    <link href="https://hexuezhi.github.io/2020/08/15/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%BA%AF%E6%BA%90Dapp/"/>
    <id>https://hexuezhi.github.io/2020/08/15/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%BA%AF%E6%BA%90Dapp/</id>
    <published>2020-08-15T09:58:10.027Z</published>
    <updated>2020-10-08T16:28:23.266Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>帮助老师撰写以太坊课程的实验指导书，因此需要设计一个基于以太坊私链的溯源Dapp项目。</p></blockquote><a id="more"></a><p>项目源码：<a href="https://github.com/HeXueZhi/FoodTransportation" target="_blank" rel="noopener">https://github.com/HeXueZhi/FoodTransportation</a></p><p>实验环境：</p><ul><li>win10：用于创建Dapp</li><li>CentOS7：用于搭建私链</li></ul><h3 id="一、私链的创建"><a href="#一、私链的创建" class="headerlink" title="一、私链的创建"></a>一、私链的创建</h3><p>前面的文章有写如何搭建私链。</p><p><a href="https://hexuezhi.github.io/2020/04/30/以太坊搭建私链/">以太坊搭建私链</a></p><h3 id="二、以太坊Dapp的创建"><a href="#二、以太坊Dapp的创建" class="headerlink" title="二、以太坊Dapp的创建"></a>二、以太坊Dapp的创建</h3><p>Dapp整体基于truffle，前端采用webpack打包。</p><h4 id="2-1-编写合约"><a href="#2-1-编写合约" class="headerlink" title="2.1 编写合约"></a>2.1 编写合约</h4><p>合约编写以及编译采用<a href="http://remix.ethereum.org/" target="_blank" rel="noopener">remix</a>（需要较好的网络环境），推荐使用老版本界面。<a href="https://hexuezhi.github.io/2020/04/30/水龙头合约/">remix入门</a></p><p>合约代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs plain">pragma solidity &gt;&#x3D;0.4.22 &lt;0.7.0;<br><br>contract FoodTransportation&#123;<br>    struct Location&#123;<br>        string locationName;<br>        string transPerson;<br>        uint timeStamp;<br>    &#125;<br>    string foodName;<br><br>    mapping (uint &#x3D;&gt; Location) trail;<br>    uint8 locationNum;<br><br>    function addNewLocation(string memory food,string memory locationName,string memory transPerson)public&#123;<br>        if(bytes(foodName).length &#x3D;&#x3D; 0)&#123;<br>            foodName &#x3D; food;<br>        &#125;<br>        Location memory newLocation;<br>        newLocation.locationName &#x3D; locationName;<br>        newLocation.transPerson &#x3D; transPerson;<br>        newLocation.timeStamp &#x3D; now;<br>        trail[locationNum] &#x3D; newLocation;<br>        locationNum++;<br>    &#125;<br><br>    function getLocationNum() public view returns(uint8)&#123;<br>        return locationNum;<br>    &#125;<br><br>    function getFoodName() public view returns(string memory)&#123;<br>        return foodName;<br>    &#125;<br><br>    function getLocation(uint8 locationNo) public view returns(string memory,string memory,uint)&#123;<br>        return (trail[locationNo].locationName,trail[locationNo].transPerson,trail[locationNo].timeStamp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这一步需要完成合约的编译和测试。</p><h4 id="2-2-环境准备"><a href="#2-2-环境准备" class="headerlink" title="2.2 环境准备"></a>2.2 环境准备</h4><p>win10系统中，安装node、truffle、ganache-cli。</p><p>执行<code>truffle version</code>查看版本。</p>{% image https://i.loli.net/2020/08/15/9PmGtVHWqx5iZhc.png 'truffle version' '' %}<p>尤其需要注意solidity和web3的版本。版本不同语法支持也不同，所以安装时，尽量选择于上图中相差不多的版本。</p><h4 id="2-3-truffle-webpack创建项目"><a href="#2-3-truffle-webpack创建项目" class="headerlink" title="2.3 truffle+webpack创建项目"></a>2.3 truffle+webpack创建项目</h4><ol><li><p>新建Dapp/FoodTransportation文件夹</p></li><li><p>文件夹下执行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">truffle unbox webpack<br></code></pre></td></tr></table></figure><p>此命令会下载truffle提供的官方示例，下载时间可能会有点长，耐心等待。下载完成后的提示以及目录结构如下图所示。</p><p><img src="https://i.loli.net/2020/08/15/YLxKbDhaNI4SeC5.png" alt="download truffle-webpack"></p><p>此示例项目的运行启动：留个坑。</p></li><li><p>修改<code>truffle-config.js</code>为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">require</span>(<span class="hljs-string">'babel-register'</span>)<br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">networks</span>: &#123;<br>    <span class="hljs-attr">development</span>: &#123;<br>      <span class="hljs-attr">host</span>: <span class="hljs-string">'localhost'</span>,<br>      <span class="hljs-attr">port</span>: <span class="hljs-number">8545</span>,<br>      <span class="hljs-attr">network_id</span>: <span class="hljs-string">'*'</span> <span class="hljs-comment">// Match any network id</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>本文件夹下的powershell中执行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm install babel<span class="hljs-literal">-register</span><br></code></pre></td></tr></table></figure></li><li><p>删除contracts文件夹中的<code>ConvertLib.sol</code>和<code>MetaCoin.sol</code>文件，创建<code>FoodTransportation.sol</code>合约文件，复制刚才编写的合约代码。</p></li><li><p>修改migrations文件夹中的<code>2_deploy_contracts.js</code>文件。</p><p><strong>注意：</strong>这里直接删除这个文件也无妨，因为本项目使用web3来部署合约，不需要使用<code>truffle migrate</code>命令帮助部署合约。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> FoodTransportation = artifacts.require(<span class="hljs-string">"./FoodTransportation"</span>);<br><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">deployer</span>) </span>&#123;<br>  deployer.deploy(FoodTransportation);<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>powershell中执行<code>truffle compile</code>命令。truffle中自带的solc-js会对合约进行编译。在Dapp文件夹下会出现build文件夹，存放编译形成的json文件。</p></li><li><p>在Dapp的app文件夹下粘贴写好的html文件，src目录下粘贴需要的js文件和css文件。</p></li><li><p>修改webpack-config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>);<br><span class="hljs-keyword">const</span> CopyWebpackPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'copy-webpack-plugin'</span>);<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">'./src/app.js'</span>,<br>  <span class="hljs-attr">output</span>: &#123;<br>    <span class="hljs-attr">path</span>: path.resolve(__dirname, <span class="hljs-string">'build'</span>),<br>    <span class="hljs-attr">filename</span>: <span class="hljs-string">'app.js'</span><br>  &#125;,<br>  <span class="hljs-attr">mode</span> : <span class="hljs-string">'development'</span>,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-comment">// Copy our app's index.html to the build folder.</span><br>    <span class="hljs-keyword">new</span> CopyWebpackPlugin([<br>      &#123; <span class="hljs-attr">from</span>: <span class="hljs-string">'./index.html'</span>, <span class="hljs-attr">to</span>: <span class="hljs-string">"index.html"</span> &#125;<br>    ])<br>  ],<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>        <span class="hljs-attr">use</span>: [ <span class="hljs-string">'style-loader'</span>, <span class="hljs-string">'css-loader'</span> ]<br>      &#125;,<br>      &#123; <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.json$/</span>, <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/(node_modules|bower_components)/</span>, <span class="hljs-attr">use</span>: <span class="hljs-string">'json-loader'</span> &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>        <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/(node_modules|bower_components)/</span>,<br>        <span class="hljs-attr">loader</span>: <span class="hljs-string">'babel-loader'</span>,<br>        <span class="hljs-attr">query</span>: &#123;<br>          <span class="hljs-attr">presets</span>: [<span class="hljs-string">'es2015'</span>],<br>          <span class="hljs-attr">plugins</span>: [<span class="hljs-string">'transform-runtime'</span>]<br>        &#125;<br>      &#125;<br>    ]<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在app目录下执行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm install web3@<span class="hljs-number">0.18</span>.<span class="hljs-number">4</span> -<span class="hljs-literal">-save</span><span class="hljs-literal">-dev</span><br>npm install webpack -<span class="hljs-literal">-save</span><span class="hljs-literal">-dev</span><br>npm install style<span class="hljs-literal">-loader</span> css<span class="hljs-literal">-loader</span> json<span class="hljs-literal">-loader</span> -<span class="hljs-literal">-save</span><span class="hljs-literal">-dev</span><br>npm install <span class="hljs-literal">-D</span> babel<span class="hljs-literal">-loader</span>@<span class="hljs-number">7</span> babel<span class="hljs-literal">-core</span> babel<span class="hljs-literal">-preset</span><span class="hljs-literal">-env</span> -<span class="hljs-literal">-save</span><span class="hljs-literal">-dev</span><br>npm install babel<span class="hljs-literal">-preset</span><span class="hljs-literal">-es2015</span> -<span class="hljs-literal">-save</span><span class="hljs-literal">-dev</span><br>npm install babel<span class="hljs-literal">-plugin</span><span class="hljs-literal">-transform</span><span class="hljs-literal">-runtime</span> -<span class="hljs-literal">-save</span><span class="hljs-literal">-dev</span><br>npm run build<br>npm run dev<br></code></pre></td></tr></table></figure></li><li><p>进入<code>http://localhost:8080</code>查看界面。注意：现在如果没有启动私链，页面由于没有获取到账户，会发出警告，启动私链，连接metamask刷新即可。</p></li></ol><h3 id="三、合约部署"><a href="#三、合约部署" class="headerlink" title="三、合约部署"></a>三、合约部署</h3><h4 id="3-1-win10本地ganache测试"><a href="#3-1-win10本地ganache测试" class="headerlink" title="3.1 win10本地ganache测试"></a>3.1 win10本地ganache测试</h4><ol><li><p>安装<code>ganache-cli</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm install <span class="hljs-literal">-g</span> ganache<span class="hljs-literal">-cli</span><br></code></pre></td></tr></table></figure></li><li><p>执行<code>ganache-cli</code></p><p><img src="https://i.loli.net/2020/08/15/Z76IToRKD3gm5AP.png" alt="ganache-cli"></p></li><li><p>在谷歌浏览器中安装metamask插件，安装好后，先在metamask右上角选择localhost:8545网络，然后选择助记词恢复钱包账户。</p></li><li><p>然后在<code>Dapp/app</code>执行<code>npm run dev</code>，打开浏览器的<code>http://localhost:8080/</code></p></li><li><p>按F12，查看console界面。</p></li><li><p>测试项目。</p></li></ol><h4 id="3-2-CentOS私链测试"><a href="#3-2-CentOS私链测试" class="headerlink" title="3.2 CentOS私链测试"></a>3.2 CentOS私链测试</h4><ol><li><p>开启私链，如无账户，先创建账户<code>personal.newAccount()</code>，输入密码。</p></li><li><p>开始挖矿。<code>miner.start(1)</code></p></li><li><p>查看账户余额<code>eth.getBalance(eth.accounts[0])</code>，为了保证能够发起合约部署等交易，需要一些ETH。</p></li><li><p>设置虚拟机防火墙，打开8545端口。<a href="https://hexuezhi.github.io/2020/06/26/CentOS7防火墙设置/">CentOS设置防火墙</a></p></li><li><p>metamask连接CentOS的私链。需要新创建rpc网络。</p><ul><li>rpc地址：<code>http://192.168.2.151:8545</code>，ip填虚拟机ip就可以。</li><li>chainID：填入<code>genesis.json</code>中的chainid即可。</li></ul></li><li><p>切换至刚创建的网络，并导入账户。通过虚拟机私链文件夹下的keystore文件夹下的json文件导入到metamask即可。</p><p><img src="https://i.loli.net/2020/08/15/mAJSqV3L5Gxe9ZO.png" alt="image-20200815203841886"></p></li><li><p>导入账户之后刷新<code>http://localhost:8080</code>，再点击metamask，就能够连接刚刚导入的账户了。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/09/01/XkTmJSiELF5dtw9.png" alt="项目截图" title="">                </div>                <div class="image-caption">项目截图</div>            </figure></li><li><p>测试项目。</p></li><li><p>测试完成后执行<code>miner.stop()</code>停止挖矿。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;帮助老师撰写以太坊课程的实验指导书，因此需要设计一个基于以太坊私链的溯源Dapp项目。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="以太坊" scheme="https://hexuezhi.github.io/categories/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
    
      <category term="以太坊" scheme="https://hexuezhi.github.io/tags/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
      <category term="Dapp" scheme="https://hexuezhi.github.io/tags/Dapp/"/>
    
      <category term="truffle" scheme="https://hexuezhi.github.io/tags/truffle/"/>
    
  </entry>
  
  <entry>
    <title>近期面试经验总结</title>
    <link href="https://hexuezhi.github.io/2020/07/19/%E8%BF%91%E6%9C%9F%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    <id>https://hexuezhi.github.io/2020/07/19/%E8%BF%91%E6%9C%9F%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/</id>
    <published>2020-07-19T02:22:17.131Z</published>
    <updated>2020-11-25T15:40:38.306Z</updated>
    
    <content type="html"><![CDATA[<hr /><blockquote><p>近期面试了几个后端岗位，记录一下面试得出的经验。</p></blockquote><a id="more"></a><h2 id="一、面试中的问题"><a href="#一、面试中的问题" class="headerlink" title="一、面试中的问题"></a>一、面试中的问题</h2><h4 id="1-问简历上的项目"><a href="#1-问简历上的项目" class="headerlink" title="1.问简历上的项目"></a>1.问简历上的项目</h4><p>大体来说就是会照着简历上写的项目来进行提问。<br>首先，就是项目的总体框架，涉及到的技术栈。会对涉及到的知识进行提问。</p><p>其次，在项目中的具体工作，就是你负责了哪一部分。项目中遇到的困难，以及如何解决的。</p><p>最后，面试官问这些一个是测试你的技术掌握的深度，再一个就是看看你对技术的热情程度。所以需要在这个过程中体现出来自己对技术的热枕。</p><h4 id="2-操作系统相关"><a href="#2-操作系统相关" class="headerlink" title="2.操作系统相关"></a>2.操作系统相关</h4><ul><li>进程管理</li><li>内存管理</li><li>死锁相关</li></ul><h4 id="3-计算机网络相关"><a href="#3-计算机网络相关" class="headerlink" title="3.计算机网络相关"></a>3.计算机网络相关</h4><ul><li>http<ul><li>https</li><li>http2.0</li></ul></li><li>osi和tcp/ip网络模型</li><li>Tcp三次握手，四次挥手。这里不仅要知道怎么握手，还要知道为什么是三次和四次</li><li>cookie和session</li><li>从输入网址到显示页面，发生了什么</li></ul><h4 id="4-mysql相关"><a href="#4-mysql相关" class="headerlink" title="4.mysql相关"></a>4.mysql相关</h4><ul><li>事务<ul><li>定义及四个特征</li><li>隔离级别</li></ul></li><li>innodb和myisam存储引擎</li><li>脏读，不可重复度和幻读</li><li>索引<ul><li>索引的类型</li><li>匹配原则</li><li>底层数据结构：B+树</li></ul></li></ul><h4 id="5-java"><a href="#5-java" class="headerlink" title="5.java"></a>5.java</h4><h5 id="5-1-java集合"><a href="#5-1-java集合" class="headerlink" title="5.1 java集合"></a>5.1 java集合</h5><ul><li>hashmap</li><li>arrayList</li></ul><h5 id="5-2-JVM"><a href="#5-2-JVM" class="headerlink" title="5.2  JVM"></a>5.2  JVM</h5><ul><li>内存机构</li><li>垃圾回收机制</li></ul><h5 id="5-3-多线程"><a href="#5-3-多线程" class="headerlink" title="5.3 多线程"></a>5.3 多线程</h5><ul><li>hashmap、hashtable、CurrentHashMap</li><li>锁</li></ul><h2 id="二、面试经验"><a href="#二、面试经验" class="headerlink" title="二、面试经验"></a>二、面试经验</h2><h4 id="1-算法方面"><a href="#1-算法方面" class="headerlink" title="1.算法方面"></a>1.算法方面</h4><p>首先，要弄清楚面试官的需求。以及一些题目的要求。所以第一步是<strong>一定不要马上写代码</strong>！！！拿到题目要问清楚面试官的具体要求，然后把自己的具体思路讲述给面试官。<strong>思路得到面试官肯定后，再写代码。</strong></p><p>其次，在写代码的过程中，一定要注意程序的<strong>鲁棒性</strong>。特别要考虑一些空值和边界值的情况</p><p>最后，面试官出的题目可能是连环题，在你写完代码之后，会问你写的程序的<strong>时间复杂度和空间复杂度</strong>。然后再问你<strong>优化方案</strong>。</p><h4 id="2-项目经历方面"><a href="#2-项目经历方面" class="headerlink" title="2.项目经历方面"></a>2.项目经历方面</h4><p>首先一个明确你在项目中的工作，然后是技术难点和解决方案，也有可能是技术亮点。</p><p>这类问题回答过程中一定要体现自己对于技术的热情。</p><h4 id="3-基础知识方面"><a href="#3-基础知识方面" class="headerlink" title="3.基础知识方面"></a>3.基础知识方面</h4><p>第一种就是单纯问你的基础知识，这方面理解的基础上记忆就好了。</p><p>第二种就比较复杂。面试官会结合具体的实际业务场景来对基础知识进行提问。这一块要求对知识的掌握程度更加深刻。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;近期面试了几个后端岗位，记录一下面试得出的经验。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="面经" scheme="https://hexuezhi.github.io/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
      <category term="面试" scheme="https://hexuezhi.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>字节跳动懂车帝后端面经</title>
    <link href="https://hexuezhi.github.io/2020/07/17/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E6%87%82%E8%BD%A6%E5%B8%9D%E5%90%8E%E7%AB%AF%E9%9D%A2%E7%BB%8F/"/>
    <id>https://hexuezhi.github.io/2020/07/17/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E6%87%82%E8%BD%A6%E5%B8%9D%E5%90%8E%E7%AB%AF%E9%9D%A2%E7%BB%8F/</id>
    <published>2020-07-17T12:45:07.499Z</published>
    <updated>2020-10-01T04:55:24.533Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>找了学长内推了字节跳动懂车帝的后端岗位，这也是作者本人的第一次面试，有纪念意义，所以记录一下过程。</p></blockquote><a id="more"></a><p>懂车帝后端主要用Go和python语言，因此相对来说就会少问一些java方面的知识。</p><p>面试的平台是在牛客网上，上来先做了一个简短的自我介绍，然后就直接开始问问题了。</p><h4 id="问题1、从长度未知的链表中随机取出一个数。"><a href="#问题1、从长度未知的链表中随机取出一个数。" class="headerlink" title="问题1、从长度未知的链表中随机取出一个数。"></a>问题1、从长度未知的链表中随机取出一个数。</h4><p>首先，需要说明这是一个经典的问题，需要用蓄水池抽样算法。但是本人当时并不知道这个算法。因此想出了两个方案，但是面试官都说不对，因此最后在面试官的提示下需要回去看看蓄水池算法。</p><p>错误方法1：先获取链表的长度，然后取链表长度的随机数，再取相应随机数位置的数。</p><p>面试官说不能获取链表的长度。</p><p>错误方法2：先生成一个随机数，然后取随机数位置上的链表上的数。会出现两种情况，一种是数到相应的位置上有数，直接取。第二种情况，向后遍历链表直到链表尾，发现随机数大于链表长度，这时候用随机数对链表长度取余数。取余数位置上的数。</p><p>面试官说还是需要获取到链表的长度。WTF？向后遍历到链表的尾部的同时就能够记录到链表的长度的啊。</p><p>正确答案：<strong>蓄水池取水算法</strong></p><p><strong>前提：</strong>给定一个数据流，数据流长度N很大，且N直到处理完所有数据之前都不可知，请问如何在只遍历一遍数据（O(N)）的情况下，能够随机选取出m个不重复的数据。<code>（这里面试官没有说出来只能够遍历一次链表）</code>。本题面试官提出的是取一个数据，因此把m设置为1即可。</p><p><strong>算法思路大致如下：</strong></p><ol><li>如果接收的数据量小于m，则依次放入蓄水池。</li><li>当遍历到第i个数据时，i &gt;= m，在[0, i]范围内取以随机数d，若d的落在[0, m-1]范围内，则用这第i个数据替换蓄水池中的第d个数据。</li><li>重复步骤2。</li></ol><p><strong>算法随机性的证明：</strong></p><p><strong>第i个数据最后能够留在蓄水池中的概率=第i个数据进入过蓄水池的概率*第i个数据不被替换的概率</strong>（第i+1到第N次处理数据都不会被替换）。</p><ol><li>当<code>i&lt;=m</code>时，数据直接放进蓄水池，所以<strong>第i个数据进入过蓄水池的概率=1</strong>。</li><li>当<code>i&gt;m</code>时，在[1,i]内选取随机数d，如果<code>d&lt;=m</code>，则使用第i个数据替换蓄水池中第d个数据，因此<strong>第i个数据进入蓄水池的概率=m/i</strong>。</li><li>当<code>i&lt;=m</code>时，程序从接收到第<code>m+1</code>个数据时开始执行替换操作，第<code>m+1</code>次处理会替换池中数据的为<code>m/(m+1)</code>，会替换掉第<code>i</code>个数据的概率为<code>1/m</code>，则第<code>m+1</code>次处理替换掉第<code>i</code>个数据的概率为<code>(m/(m+1))*(1/m)=1/(m+1)</code>，不被替换的概率为<code>1-1/(m+1)=m/(m+1)</code>。依次，第<code>m+2</code>次处理不替换掉第i个数据概率为<code>(m+1)/(m+2)</code>…第<code>N</code>次处理不替换掉第i个数据的概率为<code>(N-1)/N</code>。所以，之后第<code>i</code>个数据不被替换的概率=<code>m/(m+1)*(m+1)/(m+2)*...*(N-1)/N=m/N</code>。（<strong>这里如果m==1，表示只取一个数据，因此概率为1/N</strong>）</li><li>当<code>i&gt;m</code>时，程序从接收到第<code>i+1</code>个数据时开始有可能替换第i个数据。则参考上述第3点，<strong>之后第i个数据不被替换的概率=i/N</strong>。</li><li>结合第1点和第3点可知，当<code>i&lt;=m</code>时，第i个接收到的数据最后留在蓄水池中的概率=<code>1*m/N=m/N</code>。结合第2点和第4点可知，当<code>i&gt;m</code>时，第i个接收到的数据留在蓄水池中的概率=<code>m/i*i/N=m/N</code>。综上可知，<strong>每个数据最后被选中留在蓄水池中的概率为m/N</strong>。</li></ol><p>这个算法建立在统计学基础上，很巧妙地获得了<code>&quot;m/N&quot;</code>这个概率。</p><h4 id="问题2、写一个斐波那契数列。给n求n位置上的值"><a href="#问题2、写一个斐波那契数列。给n求n位置上的值" class="headerlink" title="问题2、写一个斐波那契数列。给n求n位置上的值"></a>问题2、写一个斐波那契数列。给n求n位置上的值</h4><p>0、1、1、2、3、5……</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fib</span><span class="hljs-params">(n)</span>:</span><br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> fib(n<span class="hljs-number">-1</span>)+fib(n<span class="hljs-number">-2</span>)<br></code></pre></td></tr></table></figure><h4 id="问题3、斐波那契数列递归算法的时间空间复杂度，以及如何优化"><a href="#问题3、斐波那契数列递归算法的时间空间复杂度，以及如何优化" class="headerlink" title="问题3、斐波那契数列递归算法的时间空间复杂度，以及如何优化"></a>问题3、斐波那契数列递归算法的时间空间复杂度，以及如何优化</h4><p>时间复杂度O（n）</p><p>空间复杂度O（n）</p><p>优化采用自底向下的动态规划算法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fib</span><span class="hljs-params">(n)</span>:</span><br>    res = [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span>,n+<span class="hljs-number">1</span>):<br>        res.append(res[<span class="hljs-number">-1</span>]+res[<span class="hljs-number">-2</span>])<br>    <span class="hljs-keyword">return</span> res[n]<br></code></pre></td></tr></table></figure><p>这种算法需要空间空间复杂度为O(n),可以再优化为常数级别。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fib</span><span class="hljs-params">(n)</span>:</span><br>    num1 = <span class="hljs-number">0</span><br>    num2 = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> num1<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span>,n+<span class="hljs-number">1</span>):<br>        num1,num2 = num2,num1+num2<br>    <span class="hljs-keyword">return</span> num2<br></code></pre></td></tr></table></figure><p>说起来惭愧，这是《剑指offer》上的原题，面试之前作者并没有读过，当时又非常紧张，没有写出来这道题。面完试感觉这道题是easy的。</p><h4 id="问题4-操作系统什么时候会从用户态进入到内核态"><a href="#问题4-操作系统什么时候会从用户态进入到内核态" class="headerlink" title="问题4.操作系统什么时候会从用户态进入到内核态"></a>问题4.操作系统什么时候会从用户态进入到内核态</h4><p>内核态主要涉及到一些特权指令的操作。发生系统调用时会从用户态转移到内核态。</p><p><strong>系统调用：</strong></p><ul><li>设备管理</li><li>文件管理</li><li>进程控制</li><li>进程通信</li><li>内存管理</li></ul><h4 id="问题5-Tcp拥塞控制"><a href="#问题5-Tcp拥塞控制" class="headerlink" title="问题5.Tcp拥塞控制"></a>问题5.Tcp拥塞控制</h4><ul><li>慢开始</li><li>拥塞避免</li><li>快重传</li><li>快恢复</li></ul><p><strong>慢开始：</strong>指数增长就是将拥塞窗口cwnd设置为1，没经过一个RTT，cwnd加倍，指数增长。知道到达满开始门限阈值采用拥塞避免算法。</p><p><strong>拥塞避免：</strong>线性zeng’zhang每经过一个RTT就增加一个MSS大小。知道出现第一次超时（网络拥塞），就将慢开始门限设置为此时拥塞窗口值的一半。然后把cwnd重置为1。执行慢开始算法。</p><p><strong>快重传：</strong>当发送方接收到3个冗余ACK时，就认为确认的报文后面的报文段丢失了。并立即对缺失的报文段重传。</p><p><strong>快恢复：</strong>就是发生冗余ACK时间时候，将慢开始门限设置为当前的一半，然后将cwnd设置慢开始门限值，开始拥塞避免算法。</p><h4 id="问题6-进程通信方式"><a href="#问题6-进程通信方式" class="headerlink" title="问题6.进程通信方式"></a>问题6.进程通信方式</h4><ol><li>管道pipe：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。</li><li>命名管道FIFO：有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。</li><li>消息队列MessageQueue：消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。</li><li>共享存储SharedMemory：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号量，配合使用，来实现进程间的同步和通信。</li><li>信号量Semaphore：信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。</li><li>套接字Socket：套解口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同及其间的进程通信。</li><li>信号 ( sinal ) ： 信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。</li></ol><h4 id="问题7-Tcp连接三次握手，为什么不是两次"><a href="#问题7-Tcp连接三次握手，为什么不是两次" class="headerlink" title="问题7.Tcp连接三次握手，为什么不是两次"></a>问题7.Tcp连接三次握手，为什么不是两次</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/10/01/OhW32KMb1nt6F5P.png" alt="tcp三次握手" title="">                </div>                <div class="image-caption">tcp三次握手</div>            </figure><p><strong>第一次握手：</strong>客户机向服务器发送<strong>连接请求报文</strong>。</p><p><strong>第二次握手：</strong>服务器的TCP收到连接请求报文之后，同意链接，向客户机发回确认，为TCP连接分配TCP缓存和变量。</p><p><strong>第三次握手：</strong>客户机收到确认报文，向服务器发送确认报文为连接分配缓存和变量。</p><p><strong>为什么不是两次？</strong></p><p>​    <strong>防止客户端失效的连接请求报文段突然又传到服务器</strong></p><p>例如以下情况如果使用两次握手：</p><ul><li>如果客户端向服务器发送第一次连接请求在网络节点上滞留了，没有收到服务器的确认，于是又重新发送了一次连接请求</li><li>服务器收到客户端的第二次请求发送确认，则连接建立完成</li><li>服务器客户端进行数据传输，传输完成断开连接。</li><li>此时，在网络上滞留的客户端第一次连接请求到达服务器，服务器发送确认连接但是客户端实际上并没有发送请求，因此不会理睬服务器发送的请求。但是服务器认为连接已完成，并等待客户端进行数据传输。这样会造成资源的浪费</li></ul><p>如果采用三次握手的话：</p><ul><li>滞留在网络上的客户端第一次请求到达服务器之后，服务器发送确认，但实际上服务器并没有发送请求，因此不会理睬服务器的确认，故不会发送确认，服务器等不到客户端的确认则连接建立失败。这样就防止了客户端失效的连接请求报文段突然又传到服务器</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这是作者本人的第一次面试，面试的时候很紧张。面试官出了编程题马上就上手去写，没有思考的过程，也没有去问具体的一些要求。导致越写越慌，到最后连斐波那契数列这样的基础题，也没有写出来。基础知识也很不牢靠，一些简单的问题，也没有答上来。</p><p>在面试后在网上找了一些《剑指offer》的资料，发现前几章很有帮助，其中比较重要的一点就是，拿到面试题先思考，不理解需求的问，想清楚了之后再具体的写代码。</p><p><strong>一些面试题答案的参考文献：</strong></p><p><a href="https://www.jianshu.com/p/7a9ea6ece2af" target="_blank" rel="noopener">https://www.jianshu.com/p/7a9ea6ece2af</a></p><p><a href="https://blog.csdn.net/zhaohong_bo/article/details/89552188" target="_blank" rel="noopener">https://blog.csdn.net/zhaohong_bo/article/details/89552188</a></p><p><a href="https://blog.csdn.net/qq_41727218/article/details/87881235" target="_blank" rel="noopener">https://blog.csdn.net/qq_41727218/article/details/87881235</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;找了学长内推了字节跳动懂车帝的后端岗位，这也是作者本人的第一次面试，有纪念意义，所以记录一下过程。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="面经" scheme="https://hexuezhi.github.io/categories/%E9%9D%A2%E7%BB%8F/"/>
    
    
      <category term="字节跳动" scheme="https://hexuezhi.github.io/tags/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8/"/>
    
      <category term="面试" scheme="https://hexuezhi.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>python集合的一些基本操作</title>
    <link href="https://hexuezhi.github.io/2020/07/12/python%E9%9B%86%E5%90%88%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>https://hexuezhi.github.io/2020/07/12/python%E9%9B%86%E5%90%88%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</id>
    <published>2020-07-12T13:03:11.494Z</published>
    <updated>2020-09-05T12:38:24.191Z</updated>
    
    <content type="html"><![CDATA[<hr /><blockquote><p>刷题过程中有时需要用到集合相关的数据结构，主要是list、set和dict。记录一下如何在刷题过程中应用这些结构。</p></blockquote><a id="more"></a><h3 id="一、list"><a href="#一、list" class="headerlink" title="一、list"></a>一、list</h3><h4 id="1、列表的创建"><a href="#1、列表的创建" class="headerlink" title="1、列表的创建"></a>1、列表的创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">nums = []<br><span class="hljs-comment">#快速创建队列并赋值</span><br>nums = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(n)]<br><span class="hljs-comment">#快速创建二维数组，并赋值</span><br>nums = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(n)] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(m)]<br></code></pre></td></tr></table></figure><h4 id="2、列表的压入"><a href="#2、列表的压入" class="headerlink" title="2、列表的压入"></a>2、列表的压入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">nums.append(x)<br>nums.insert(index,x)<span class="hljs-comment">#在index插入x</span><br></code></pre></td></tr></table></figure><h4 id="3、列表的删除"><a href="#3、列表的删除" class="headerlink" title="3、列表的删除"></a>3、列表的删除</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">x = nums.pop(<span class="hljs-number">1</span>)<span class="hljs-comment">#删除index为1的元素</span><br>list.remove(<span class="hljs-number">2</span>)<span class="hljs-comment">#删除元素2的第一个匹配项</span><br></code></pre></td></tr></table></figure><h4 id="4、列表排序"><a href="#4、列表排序" class="headerlink" title="4、列表排序"></a>4、列表排序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">nums.sort()<br>nums.sort(key=<span class="hljs-literal">None</span>,reverse=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><h4 id="5、反转列表"><a href="#5、反转列表" class="headerlink" title="5、反转列表"></a>5、反转列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">nums.reverse()<br></code></pre></td></tr></table></figure><h4 id="6、复制列表"><a href="#6、复制列表" class="headerlink" title="6、复制列表"></a>6、复制列表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">nums.copy()<br></code></pre></td></tr></table></figure><h4 id="7、列表中某个元素出现的个数"><a href="#7、列表中某个元素出现的个数" class="headerlink" title="7、列表中某个元素出现的个数"></a>7、列表中某个元素出现的个数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">nums.count(x)<span class="hljs-comment">#x出现的次数</span><br></code></pre></td></tr></table></figure><h4 id="8、某个值的第一个匹配项的index"><a href="#8、某个值的第一个匹配项的index" class="headerlink" title="8、某个值的第一个匹配项的index"></a>8、某个值的第一个匹配项的index</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">nums.index(x)<br></code></pre></td></tr></table></figure><h3 id="二、set"><a href="#二、set" class="headerlink" title="二、set"></a>二、set</h3><h4 id="1、集合的创建"><a href="#1、集合的创建" class="headerlink" title="1、集合的创建"></a>1、集合的创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">nums = &#123;&#125;<br></code></pre></td></tr></table></figure><h4 id="2、集合的压入"><a href="#2、集合的压入" class="headerlink" title="2、集合的压入"></a>2、集合的压入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">nums.add(x)<br><span class="hljs-comment">#高级方法</span><br>nums.update(x)<span class="hljs-comment">#x可以是列表、元组、字典，且x可以又多个，用逗号隔开</span><br>nums.update([<span class="hljs-number">1</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>])<br><span class="hljs-comment">#&#123;1, 3, 4, 5, 6&#125;</span><br></code></pre></td></tr></table></figure><h4 id="3、集合的删除"><a href="#3、集合的删除" class="headerlink" title="3、集合的删除"></a>3、集合的删除</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">nums.remove(x)<span class="hljs-comment">#如果元素不存在会发生错误</span><br>nums.discard(x)<span class="hljs-comment">#如果元素不存在不会发生错误</span><br></code></pre></td></tr></table></figure><h3 id="三、dict"><a href="#三、dict" class="headerlink" title="三、dict"></a>三、dict</h3><h4 id="1、字典的创建"><a href="#1、字典的创建" class="headerlink" title="1、字典的创建"></a>1、字典的创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">nums = &#123;&#125;<br></code></pre></td></tr></table></figure><h4 id="2、字典的压入"><a href="#2、字典的压入" class="headerlink" title="2、字典的压入"></a>2、字典的压入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">nums[x] = y<br></code></pre></td></tr></table></figure><h4 id="3、字典的删除"><a href="#3、字典的删除" class="headerlink" title="3、字典的删除"></a>3、字典的删除</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">del</span> nums[x]<br></code></pre></td></tr></table></figure><h4 id="4、字典的遍历"><a href="#4、字典的遍历" class="headerlink" title="4、字典的遍历"></a>4、字典的遍历</h4><h5 id="4-1、遍历键"><a href="#4-1、遍历键" class="headerlink" title="4.1、遍历键"></a>4.1、遍历键</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> nums:<br>    print(nums[key])<br><span class="hljs-comment">#或者</span><br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> nums.keys():<br></code></pre></td></tr></table></figure><h5 id="4-2、遍历值"><a href="#4-2、遍历值" class="headerlink" title="4.2、遍历值"></a>4.2、遍历值</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> nums.values():<br>    print(value)<br></code></pre></td></tr></table></figure><h5 id="4-3、遍历键和值"><a href="#4-3、遍历键和值" class="headerlink" title="4.3、遍历键和值"></a>4.3、遍历键和值</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> nums.items():<br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;刷题过程中有时需要用到集合相关的数据结构，主要是list、set和dict。记录一下如何在刷题过程中应用这些结构。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://hexuezhi.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://hexuezhi.github.io/tags/python/"/>
    
      <category term="leetcode" scheme="https://hexuezhi.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>python刷题过程中的栈、队列和堆的实现</title>
    <link href="https://hexuezhi.github.io/2020/07/12/python%E5%88%B7%E9%A2%98%E7%9A%84%E6%A0%88%E9%98%9F%E5%88%97%E5%92%8C%E5%A0%86%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://hexuezhi.github.io/2020/07/12/python%E5%88%B7%E9%A2%98%E7%9A%84%E6%A0%88%E9%98%9F%E5%88%97%E5%92%8C%E5%A0%86%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-07-12T12:49:55.263Z</published>
    <updated>2020-09-05T12:38:38.999Z</updated>
    
    <content type="html"><![CDATA[<hr /><blockquote><p>刷题过程中有时需要用到栈、队列和堆的数据结构，记录一下如何在刷题过程中快速应用</p></blockquote><a id="more"></a><h3 id="一、栈"><a href="#一、栈" class="headerlink" title="一、栈"></a>一、栈</h3><h4 id="1、栈的创建"><a href="#1、栈的创建" class="headerlink" title="1、栈的创建"></a>1、栈的创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">stack = []<br></code></pre></td></tr></table></figure><h4 id="2、栈的压入"><a href="#2、栈的压入" class="headerlink" title="2、栈的压入"></a>2、栈的压入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">stack.append(x)<br></code></pre></td></tr></table></figure><h4 id="3、栈的弹出"><a href="#3、栈的弹出" class="headerlink" title="3、栈的弹出"></a>3、栈的弹出</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">x = stack.pop()<br></code></pre></td></tr></table></figure><h3 id="二、队列"><a href="#二、队列" class="headerlink" title="二、队列"></a>二、队列</h3><h4 id="1、队列的创建"><a href="#1、队列的创建" class="headerlink" title="1、队列的创建"></a>1、队列的创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br>queue = deque()<br></code></pre></td></tr></table></figure><h4 id="2、队列的压入"><a href="#2、队列的压入" class="headerlink" title="2、队列的压入"></a>2、队列的压入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">queue.append(x)<br></code></pre></td></tr></table></figure><h4 id="3、队列的弹出"><a href="#3、队列的弹出" class="headerlink" title="3、队列的弹出"></a>3、队列的弹出</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">x = stack.popleft()<br></code></pre></td></tr></table></figure><h3 id="三、堆（最小堆）"><a href="#三、堆（最小堆）" class="headerlink" title="三、堆（最小堆）"></a>三、堆（最小堆）</h3><p><strong>注意：</strong>heapq默认是创建的最小堆，如果需要最大堆，就将<code>-x</code>存入堆中。</p><h4 id="1、栈的创建-1"><a href="#1、栈的创建-1" class="headerlink" title="1、栈的创建"></a>1、栈的创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> heapq<br>heap = []<span class="hljs-comment">#新建</span><br><span class="hljs-comment">#或者将列表变成小顶堆</span><br>nums = [......]<br>heapq.heapify(nums)<br></code></pre></td></tr></table></figure><h4 id="2、堆的压入"><a href="#2、堆的压入" class="headerlink" title="2、堆的压入"></a>2、堆的压入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">heapq.heappush(heap,x)<br></code></pre></td></tr></table></figure><h4 id="3、堆的弹出"><a href="#3、堆的弹出" class="headerlink" title="3、堆的弹出"></a>3、堆的弹出</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">heapq.heappop(heaq)<br></code></pre></td></tr></table></figure><h4 id="4、寻找序列中最大或最小的N个元素"><a href="#4、寻找序列中最大或最小的N个元素" class="headerlink" title="4、寻找序列中最大或最小的N个元素"></a>4、寻找序列中最大或最小的N个元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">lista = [<span class="hljs-number">64</span>, <span class="hljs-number">92</span>, <span class="hljs-number">93</span>, <span class="hljs-number">83</span>, <span class="hljs-number">85</span>, <span class="hljs-number">50</span>, <span class="hljs-number">10</span>, <span class="hljs-number">49</span>, <span class="hljs-number">28</span>, <span class="hljs-number">60</span>]<br>print(heapq.nlargest(<span class="hljs-number">3</span>, lista)) <span class="hljs-comment"># [93, 92, 85]</span><br>print(heapq.nsmallest(<span class="hljs-number">3</span>, lista)) <span class="hljs-comment"># [10, 28, 49]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;刷题过程中有时需要用到栈、队列和堆的数据结构，记录一下如何在刷题过程中快速应用&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://hexuezhi.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://hexuezhi.github.io/tags/python/"/>
    
      <category term="leetcode" scheme="https://hexuezhi.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>win10下运行hadoop的wordcount程序报错</title>
    <link href="https://hexuezhi.github.io/2020/06/27/WordCount%E7%A8%8B%E5%BA%8F%E6%8A%A5%E9%94%99/"/>
    <id>https://hexuezhi.github.io/2020/06/27/WordCount%E7%A8%8B%E5%BA%8F%E6%8A%A5%E9%94%99/</id>
    <published>2020-06-27T12:15:08.039Z</published>
    <updated>2020-09-05T12:38:18.071Z</updated>
    
    <content type="html"><![CDATA[<hr /><blockquote><p>学习hadoop的过程中遇到了一个bug，记录一下过程</p></blockquote><a id="more"></a><h2 id="Exception-in-thread“main”java-lang-UnsatisfiedLinkError-org-apache-hadoop-io-nativeio-NativeIO-Windows-access0-Ljava-lang-String-I-Z"><a href="#Exception-in-thread“main”java-lang-UnsatisfiedLinkError-org-apache-hadoop-io-nativeio-NativeIO-Windows-access0-Ljava-lang-String-I-Z" class="headerlink" title="Exception in thread“main”java.lang.UnsatisfiedLinkError: org.apache.hadoop.io.nativeio.NativeIO$Windows.access0(Ljava/lang/String;I)Z"></a>Exception in thread“main”java.lang.UnsatisfiedLinkError: org.apache.hadoop.io.nativeio.NativeIO$Windows.access0(Ljava/lang/String;I)Z</h2><h3 id="第一步、检查系统环境变量"><a href="#第一步、检查系统环境变量" class="headerlink" title="第一步、检查系统环境变量"></a>第一步、检查系统环境变量</h3><h4 id="1、检查HADOOP-HOME"><a href="#1、检查HADOOP-HOME" class="headerlink" title="1、检查HADOOP_HOME"></a>1、检查HADOOP_HOME</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/27/lYMTFLXqh4tjRH5.png" alt="image-20200627202154495" title="">                </div>                <div class="image-caption">image-20200627202154495</div>            </figure><h4 id="2、检查PATH"><a href="#2、检查PATH" class="headerlink" title="2、检查PATH"></a>2、检查PATH</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://i.loli.net/2020/06/27/vYaiKe8wSRZIodT.png" alt="image-20200627202320374" title="">                </div>                <div class="image-caption">image-20200627202320374</div>            </figure><h3 id="第二步、检查hadoop-bin文件夹"><a href="#第二步、检查hadoop-bin文件夹" class="headerlink" title="第二步、检查hadoop/bin文件夹"></a>第二步、检查hadoop/bin文件夹</h3><p>主要检查是否有<code>winutils.exe</code>和<code>hadoop.dll</code>两个文件。</p><p>如果没有的话请从网上下载，要下载对应版本的文件。</p><h3 id="第三步、检查C-Windows-System32文件夹"><a href="#第三步、检查C-Windows-System32文件夹" class="headerlink" title="第三步、检查C:\Windows\System32文件夹"></a>第三步、检查C:\Windows\System32文件夹</h3><p>检查是否有<code>hadoop.dll</code>文件，如果没有的话，从hadoop/bin文件夹下复制过去。</p><p>文章来源：<a href="https://sparkbyexamples.com/spark/spark-hadoop-exception-in-thread-main-java-lang-unsatisfiedlinkerror-org-apache-hadoop-io-nativeio-nativeiowindows-access0ljava-lang-stringiz/" target="_blank" rel="noopener">https://sparkbyexamples.com/spark/spark-hadoop-exception-in-thread-main-java-lang-unsatisfiedlinkerror-org-apache-hadoop-io-nativeio-nativeiowindows-access0ljava-lang-stringiz/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;学习hadoop的过程中遇到了一个bug，记录一下过程&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="hadoop" scheme="https://hexuezhi.github.io/categories/hadoop/"/>
    
    
      <category term="hadoop" scheme="https://hexuezhi.github.io/tags/hadoop/"/>
    
      <category term="wordcount" scheme="https://hexuezhi.github.io/tags/wordcount/"/>
    
  </entry>
  
</feed>
